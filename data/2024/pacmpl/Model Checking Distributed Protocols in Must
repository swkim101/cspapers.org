We describe the design and implementation of Must, a framework for
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 modeling and automatically verifying distributed systems. Must
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 provides a concurrency API that supports multiple communication
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 models, on top of a mainstream programming language, such as Rust.
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 Given a program using this API, Must verifies it by means of a
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 novel, optimal dynamic partial order reduction algorithm that
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 maintains completeness and optimality for all communication models
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 supported by the API.
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 We use Must to design and verify models of distributed systems in
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 an industrial context. We demonstrate the usability of Must's API
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 by modeling high-level system idioms (e.g., timeouts, leader
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 election, versioning) as abstractions over the core API, and
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 demonstrate Must's scalability by verifying systems employed in
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 production (e.g., replicated logs, distributed transaction management
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 protocols), the verification of which lies beyond the capacity of
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 previous model checkers.