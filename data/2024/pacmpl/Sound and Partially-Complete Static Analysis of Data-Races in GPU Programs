GPUs are progressively being integrated into modern society, playing a pivotal role in Artificial Intelligence
 
and High-Performance Computing. Programmers need a deep understanding of the GPU programming model
 
to avoid subtle data-races in their codes. Static verification that is sound and incomplete can guarantee
 
data-race freedom, but the alarms it raises may be spurious and need to be validated.
 In this paper, we establish a True Positive Theorem for a static data-race detector for GPU programs, i.e., a
 
result that identifies a class of programs for which our technique only raises true alarms. Our work builds on
 
the formalism of memory access protocols, that models the concurrency operations of CUDA programs. The
 
crux of our approach is an approximation analysis that can correctly identify true alarms, and pinpoint the
 
conditions that make an alarm imprecise. Our approximation analysis detects when the reported locations are
 
reachable (control independence, or CI), and when the reported locations are precise (data independence, or
 
DI), as well identify inexact values in an alarm. In addition to a True Positive result for programs that are CI
 
and DI, we establish the root causes of spurious alarms depending on whether CI or DI are present.
 We apply our theory to introduce FaialAA, the first sound and partially complete data-race detector. We
 
evaluate FaialAA in three experiments. First, in a comparative study with the state-of-the-art tools, we show that
 
FaialAA confirms more DRF programs than others while emitting 1.9× fewer potential alarms. Importantly, the
 
approximation analysis of FaialAA detects 10 undocumented data-races. Second, in an experiment studying 6
 
commits of data-race fixes in open source projects OpenMM and Nvidia’s MegaTron, FaialAA confirmed the
 
buggy and fixed versions of 5 commits, while others were only able to confirm 2. Third, we show that 59.5% of
 
2,770 programs are CI and DI, quantifying when the approximation analysis of FaialAA is complete.
 This paper is accompanied by the mechanized proofs of the theoretical results presented therein and a tool
 
(FaialAA) implementing of our theory.