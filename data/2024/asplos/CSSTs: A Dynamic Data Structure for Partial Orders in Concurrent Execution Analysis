Dynamic analyses are a standard approach to analyzing and testing concurrent programs. Such techniques observe program traces ? and analyze them to infer the presence or absence of bugs. At its core, each analysis maintains a partial order ? that represents order dependencies between the events of ? . Naturally, the scalability of the analysis largely depends on maintaining ? efficiently. The standard data structure for this task has thus far been Vector Clocks. These, however, are slow for analyses that follow a non-streaming style, costing ?(?) time for inserting (and propagating) each new ordering in ?, where ? is the size of ?, while they cannot handle the deletion of existing orderings. In this paper we develop Collective Sparse Segment Trees (CSSTs), a simple but elegant data structure for maintaining a partial order ?. CSSTs thrive when the width ? of ? is much smaller than the size ? of its domain, allowing inserting, deleting, and querying for orderings in ? to run in ?(log?) time. For a concurrent trace, ? normally equals the number of its threads, and is orders of magnitude smaller than its size ?, making CSSTs fitting for this setting. Our experiments confirm that CSSTs are the best data structure currently to handle a range of dynamic analyses from existing literature.