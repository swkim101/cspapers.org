Android enforces access control checks to protect sensitive framework APIs. If not properly protected, APIs can open the door for malicious, underprivileged apps to access sensitive resources. Unfortunately, as reported by the existing literature, such access control flaws are prevalent in Android APIs, notably in those introduced by customization parties. Hence, various solutions have been proposed to detect the flaws, particularly those due to inconsistencies. The solutions can be largely divided into two categories: convergence-based techniques and probabilistic inference approaches. In this paper, we are motivated by the promising application of using code constructs - beyond convergence analysis as proposed by the recent probabilistic approaches, to recommend access control enforcement and detect inconsistencies. Specifically, we propose a deep learning-based approach that aims to automatically learn the correspondence between various code constructs and access control requirement. This task faces significant challenges, particularly due the path-sensitive nature of Android access control implementation. To this end, we develop a static analysis pipeline that extracts and abstracts an API's implementation to succinct execution traces that can be correlated with access control labels. We then employ the statically derived features to fine-tune CodeBERT for our access control recommendation task. The fine-tuned model achieves an accuracy of 91 %, pre-cision of 91 %, and recall of 92 % on AOSP data. Additionally, our evaluation on custom ROMs shows that the model is able to rediscover previously reported inconsistencies, and even discover new ones. Hence, demonstrating its complementary nature to the existing access control evaluation and recom-mendation systems.