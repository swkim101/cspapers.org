The virtual machine abstraction provides a wide variety  of  benefits  which  have  undeniably  enabled  cloud computing.   Virtual  machines,  however,  are  a  double-edged sword as hypervisors they run on top of must treat them as a black box, limiting the information which the hypervisor and virtual machine may exchange,  a problem known as the semantic gap. In this paper, we present the design and implementation of a new mechanism, hyperupcalls, which enables a hypervisor to safely execute verified code provided by a guest virtual machine in order to transfer information.  Hyperupcalls are written in C and have complete access to guest data structures such as page tables. We provide a complete framework which makes  it  easy  to  access  familiar  kernel  functions  from within a hyperupcall.  Compared to state-of-the-art paravirtualization techniques and virtual machine introspection,  Hyperupcalls are much more flexible and less intrusive.  We demonstrate that hyperupcalls can not only be used to improve guest performance for certain operations by up to 2Ã—but hyperupcalls can also serve as a powerful debugging and security tool.