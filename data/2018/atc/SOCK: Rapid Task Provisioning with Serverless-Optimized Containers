Serverless computing promises to provide applications with cost savings and extreme elasticity.  Unfortunately, slow application and container initialization can hurt common-case latency on serverless platforms.  In this work, we analyze Linux container primitives, identifying scalability bottlenecks related to storage and network isolation.  We also analyze Python applications from GitHub and show that importing many popular libraries adds about 100ms to startup. Based on these findings, we implement SOCK, a container system optimized for serverless workloads.  Careful avoidance of kernel scalability bottlenecks gives SOCK an 18x speedup over Docker. A generalized-Zygote provisioning strategy yields an additional 3x speedup.  A more sophisticated three-tier caching strategy based on Zygotes provides a 45x speedup over SOCK without Zygotes.  Relative to AWS Lambda and OpenWhisk, OpenLambda with SOCK reduces platform overheads by 2.8x and 5.3x respectively in an image processing case study.