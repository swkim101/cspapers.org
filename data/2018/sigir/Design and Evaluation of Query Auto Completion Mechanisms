Query Auto Completion (QAC) systems present a list of completions to a partial query entered by the user. The completions extend the partial query and are updated with subsequent modifications made to the partial query. The partial query, or more generally, the query pattern is matched against a target string collection to retrieve a candidate set of strings. A scoring function is applied to the strings in the candidate set to choose a subset of them which are then presented in a specific order as the final completions. Krishnan et al. [8] define a set of QAC modes based on how a query pattern is matched with the target string collection. Each QAC mode produces distinct candidate sets and results in different completions being presented. A taxonomy of QAC modes will help us better understand the effects of match functions, desirable characteristics of an effective QAC method and their applicability to specific scenarios. The taxonomy proposed by Krishnan et al. [8] can be further refined to multiple dimensions such as error tolerance, phrase completions (without considering the order of the tokens), and completions on sub-tokens (complete just the final token vs complete each token). From an implementation aspect, each QAC mode needs specific algorithmic strategies and index structures. We measure the computational efficiency of different implementation strategies in terms of index memory, index construction time, querying and update time. For instance, a trie [1, 6, 7] is a commonly used data structure for prefix lookup, denoted “Mode 1". A different querying mode suggested by Bast andWeber [2] splits the pattern P based on white spaces and presents completions containing tokens having a prefix match with each query tokens. We call this Mode 2. Typical implementations for this mode (or its variants) use an inverted index [2, 5] to map the tokens to the documents they appear in and computes document list intersections for tokens from query pattern. If a pattern match is performed on the tokens instead of prefix match (as in Mode 2), we get “Mode 3”. A suffix tree or suffix