This paper describes the design, evolution, and evaluation of a second-year undergraduate course on professional software development practices. The course design arose from two properties of a curriculum revision: the removal of redundancy across Discrete Mathematics, Data Structures, and Algorithms coursework and the identification of desired skills for students entering the upper-division courses. A research-informed design for the course incorporates code quality, version control, teamwork, user-centered design, risk management, design thinking, and reflective practice, presented in keeping with the values of agile software development. We describe the evolution of the course over its six years of implementation, including a transition from a Java-specific textbook to a more generic book about code quality and the transition from a six-week to a nine-week project. The course has become a linchpin for mid-major assessment of students' software development skills, and we discuss the strengths, weaknesses, and results of our assessment strategy. We provide a reflection of the role this course has had within our program and advice for those who might wish to adopt or adapt this design.