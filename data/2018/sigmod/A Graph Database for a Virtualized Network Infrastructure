Modern communication networks are large, dynamic, complex, and increasingly use virtualized network infrastructure. To deploy, maintain, and troubleshoot such networks, it is essential to understand how network elements - such as servers, switches, virtual machines, and virtual network functions - are connected to one another, and to be able to discover communication paths between them. For network maintenance applications such as troubleshooting and service quality management, it is also essential to understand how connections change over time, and be able to pose time-travel queries to retrieve information about past network states. With the industry-wide move to Software Defined Networks and Virtualized Network Functions (VNFs) [26][24], maintaining these inventory and topology databases becomes a critical issue. In this paper, we explore the database requirements for the management and troubleshooting of network services using VNF and SDN technologies. This work was initiated in the context of Open source ECOMP, which has been now merged into ONAP [24], the new industry-standard for managing network automation. We develop a graph-based layered network model with layers representing increasing levels of specificity, from VNFs to physical hardware. We then describe the kinds of queries required for activities such as operations management and troubleshooting. These considerations have led us to develop Nepal, a model-driven graph database system to represent and reason over network service topology and data flows within the network. Nepal has several features making it particularly applicable for querying inventory: Nepal has a strongly-typed but flexible schema to support model-driven networking; it makes graph paths a first-class object in its query system; it has sophisticated support for in-the-past queries; and it works as a layer over one or more underlying databases. We demonstrate the capabilities of Nepal by examples, discuss its model-driven query capabilities, and implementation details on Gremlin and Postgres. We illustrate how path queries can simplify the extraction of information from a dynamic inventory of a multi-layer network and can be used for troubleshooting.