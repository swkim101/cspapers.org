Database administrators construct secondary indexes on data tables to accelerate query processing in relational database management systems (RDBMSs). These indexes are built on top of the most frequently queried columns according to the data statistics. Unfortunately, maintaining multiple secondary indexes in the same database can be extremely space consuming, causing signiﬁcant performance degradation due to the potential exhaustion of memory space. However, we ﬁnd that there indeed exist many opportunities to save storage space by exploiting column correlations. We recently introduced H ERMIT , a succinct secondary indexing mechanism for modern RDBMSs. H ERMIT judiciously leverages the rich soft functional dependencies hidden among columns to prune out redundant structures for indexed key access. Instead of building a complete index that stores every single entry in the key columns, H ERMIT navigates any incoming key access queries to an existing index built on the correlated columns. This is achieved through the Tiered Regression Search Tree (TRS-T REE ), a succinct, ML-enhanced data structure that performs fast curve ﬁtting to adaptively and dynamically capture both column correlations and outliers. In this demonstration, we showcase H ERMIT ’s appealing characteristics. we not only demonstrate that H ERMIT can signiﬁcantly reduce space consumption with limited performance overhead in terms of query response time and index maintenance time, but also explain in detail the rationale behind H ERMIT ’s high efﬁciency using interactive online query processing examples.