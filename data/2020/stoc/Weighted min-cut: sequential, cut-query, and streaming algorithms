Consider the following 2-respecting min-cut problem. Given any weighted graph G and its spanning tree T, find the minimum cut among the cuts that contain at most two edges in T. This problem is an important subroutine in Karger’s celebrated randomized near-linear-time min-cut algorithm [STOC’96]. We present a new approach for this problem which can be easily implemented in many settings, leading to the following randomized min-cut algorithms for weighted graphs. – An O(mlog2 n/loglogn + nlog6 n)-time sequential algorithm improving Karger’s long-standing O(m log3 n) and O(nlog6 n + mlog2 nlog(n 2/m)/loglogn) bounds when the input graph is not extremely sparse or dense. Improvements over Karger’s bounds were previously known only under a rather strong assumption that the input graph is simple (unweighted without parallel edges) [Henzinger, Rao, Wang, SODA’17; Ghaffari, Nowicki, Thorup, SODA’20]. For unweighted graphs (possibly with parallel edges) and using bit operations, our bound can be further improved to O(mlog1.5 n/loglogn + nlog6 n). – An algorithm that requires Õ(n) cut queries to compute the min-cut of a weighted graph: This answers an open problem by Rubinstein, Schramm, and Weinberg [ITCS’18], who obtained a similar bound for simple graphs. Our bound is tight up to polylogarithmic factors. – A streaming algorithm that requires Õ(n) space and O(logn) passes to compute the min-cut: The only previous non-trivial exact min-cut algorithm in this setting is the 2-pass Õ(n)-space algorithm on simple graphs [Rubinstein et al., ITCS’18] (observed by Assadi, Chen, and Khanna [STOC’19]). Our approach exploits some cute structural properties so that it only needs to compute the values of Õ(n) cuts corresponding to removing Õ(n) pairs of tree edges, an operation that can be done quickly in many settings. This is in contrast to the techniques used by Karger and Lovett-Sandlund to solve 2-respecting min-cut where information about many more cuts is computed, stored in and accessed from sophisticated data-structures.