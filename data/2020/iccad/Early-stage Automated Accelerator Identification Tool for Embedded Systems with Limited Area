Designers are turning toward hardware specialization through the use of application-specific accelerators to provide energy-efficiency and performance. We propose an early detection methodology to identify computationally similar and synthesize-able kernels that are used to build Shared Accelerators (SAs). SAs are specialized hardware accelerators that execute very different software kernels but share the common hardware functions between them. SAs can provide increased coverage if both data flow and control flow similarities between - seemingly very different- workloads are detected. This work leverages abstract syntax trees (ASTs) generated from clang (part of LLVM) to discover similar kernels among workloads. ASTs provide a level of abstraction well suited to detect commonalities between kernels. Our methodology, ReconfAST, transforms the AST into a new clustered AST (CAST) representation that further removes unneeded nodes and uses a regular expression to match common node configurations. The approach is validated using Mach-Suite, a HLS-ified benchmark suite designed for accelerators in C. A good Shared Accelerator accelerates workloads—with similar speedup compared to dedicated accelerators—and reduces the resources required for FPGA implementations. SAs constructed with our ReconfAST methodology provide an average speedup of 1.6x. ReconfAST also reduces FPGA resources, we saw a maximum reduction of above 200% in DSP, 75% reduction for LUTs, and 40% reduction for FFs compared to smallest DAs.