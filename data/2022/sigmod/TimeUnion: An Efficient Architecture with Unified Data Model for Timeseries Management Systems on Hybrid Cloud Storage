Timeseries management systems have attracted considerable attention during the last decade with the rise of IoT and performance monitoring. With the rapidly increasing data scale in the production environment, deploying timeseries management systems on cloud with cloud storage is a natural trend because of its high availability, reliability, and scalability. However, the state-of-the-art designs are not tailored for cloud environments; they suffer from the limited number of timeseries a single compute node can handle because of the imbalanced resource usage. In this paper, we present TimeUnion, an efficient timeseries management system tailored for hybrid cloud storage services (e.g. fast cloud block stores and slow cloud object stores). First, we propose our unified data model to represent both independent timeseries and groups of timeseries, which is capable of handling diverse use cases of timeseries. Second, since the main bottleneck of the current timeseries systems is the overuse of memory, we introduce our exploration on memory-efficient data structures for timeseries to maximize the number of timeseries a compute instance can maintain. Third, to absorb the memory data chunks quickly, we present our time-partitioned LSM-tree with tailored architecture, compaction mechanism, out-of-order data handling, and dynamic level size adjustment for timeseries data. We prototype TimeUnion with C++ from scratch and evaluate it on AWS EC2 with AWS EBS (cloud block store) and AWS S3 (cloud object store). Compared to the storage engine of Cortex, TimeUnion can handle at least 5x more timeseries, and achieve at least 24.8% higher insertion throughput and 49.8% lower query latency. We have released the open-source code of TimeUnion for public access.