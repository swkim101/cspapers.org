Serverless computing commonly adopts strong isolation mechanisms for deploying functions, which may bring significant performance overhead because each function needs to run in a completely new environment (i.e., the “one-to-one” model). To accelerate the function computation, prior work has proposed using sand-box sharing to reduce the overhead, i.e., the “many-to-one” model. Nonetheless, either process-based true parallelism or thread-based pseudo-parallelism still causes high latency, preventing its adaptation for latency-sensitive web services. To achieve optimal performance and resource efficiency for server-less workflow, we argue an “m-to-n” deployment model that manipulates multiple granularities of computing abstractions such as processes, threads, and sandboxes to amortize overhead. We propose wrap, a new deployment abstraction that balances the trade-offs between interaction overhead, startup overhead and function execution. We further design Chiron, a wrap-based deployment manager that can automatically perform the orchestration of multiple computing abstractions based on performance prioritization. Our comprehensive evaluation indicates that Chiron outperforms state-of-the-art systems by $1.3\times-21.8\times$ on system throughput.