In teaching university entry-level calculus, it proved useful to distinguish early from late transcendentals depending on the time at which transcendentals such as the exponential and logarithmic functions are introduced. I suggest we pose analogous "early X or late X" questions for first-year computer science courses. I propose a tentative list of concepts for which the "early or late" question might be worthy a discussion and argue that the approach allows us to pay attention to pedagogical choices rather than the choice of the programming language for CS1 and CS2. The first calculus textbook by late Torontonian and mathematics educator James Drewry Stewart follows the traditional approach of late transcendentals where the transcendental logarithm function is introduced as an integral of ƒ (χ) = 1/χ and the transcendental exponential function as its inverse. Stewart and others realized that this approach deprives the concepts preceding integrals of these two transcendentals as interesting example functions. Stewart's early-transcendentals alternative introduces them-along with transcendental trigonometric functions-informally in the first chapter and uses these transcendentals throughout the book. Do we have analogous pedagogic choices in CS1 and CS2? An exhaustive approach would list all essential concepts in the first year in CS and analyse their prerequisite dependencies. To initiate a more focused discussion, I propose instead to limit the discourse to a handful of concepts, and explore their "early or late" question.