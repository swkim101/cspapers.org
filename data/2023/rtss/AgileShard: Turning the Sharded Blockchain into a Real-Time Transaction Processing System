Blockchain, as an emerging transaction processing system, suffers from low throughput and high latency. Sharded blockchains can significantly increase throughput by dividing nodes into groups (i.e., shards) to process disjoint transactions in parallel. However, the diverse latency requirements of transactions in current sharded blockchains are not well met. Three challenges prevent the sharded blockchain from becoming a real-time transaction processing system, namely, the static block size, the first-come-first-served transaction packing strategy, and the load imbalance. Therefore, this paper proposes 3 methods to help turn the sharded blockchain into a real-time transaction processing system. First, we propose an inter-shard dynamic block size negotiation method that enables shards to adaptively determine the globally optimal block size based on the deadlines of pending transactions. Then, we propose a DAG-based transaction packing method for reducing the number of deadline violations and improving parallelism. Finally, we propose a minimum-cost-flow-based shard reconfiguration method to address load imbalance. Under real datasets on Ethereum, experimental results show that AgileShard using the above three methods can effectively improve the transaction deadline satisfaction rate.