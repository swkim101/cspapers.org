(b) if we wish to avoid redundant computation of common subexpressions then generation of optimal code becomes very difficult, even for quite simple machines [3,9]. Elaborating on (b) above, Bruno and Sethi [9] show that the problem of generating optimal code for a one register machine is NP-complete. Aho et al. [3] add that even when all common subexpressions have exactly one operation, optimal code generation is NP-complete for one register machines and also for infinite register machines. 1 Expressions will be represented by dags (directed acyclic graphs) as in Figure 1. If no common subexpressions occur, then the dag representation is a tree. Real machines have many features not found in models of machines, so any theoretical results can at best provide insight into the design of code generators. Johnson [12] eloquently describes the application of theoretical results on code generation from trees to the design of a portable code generator. See also the discussion in Wulf et al. [201.