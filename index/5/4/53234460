A flow analysis framework for higher-order, mostly-functional languages is given. The framework unifies and extends previous work on flow analyses for this class of programming languages. The analysis is based on abstract interpretation and is parameterized over the abstraction of literals, two polyvariance operators, and a projection operator. The polyvariance operators regulate the accuracy of the analysis while the projection operator regulates the speed. A preliminary implementation of the analysis is incorporated and used in a production-quality Scheme compiler. The analysis can process any legal Scheme program without modification. While it has been demonstrated that analyses at least as accurate as OCFA are useful for justifying program transformations, an instantiation of this analysis less precise than OCFA is used to facilitate loop recognition, eliminate the construction of closures, and optimize procedure calls. This demonstrates that relatively inaccurate analyses can still be useful for justifying transformations.