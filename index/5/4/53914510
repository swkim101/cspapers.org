Software systems tend to diverge from their intended architecture. This architectural decay reduces software quality, like understandability, changeability and maintainability. Furthermore, non-functional properties provided by the intended architecture are no longer guaranteed to hold for the system. To ensure architectural compliance, regular checks are essential. We examined the architecture of eight software systems. Supported by the software architects, the architectural prescriptions for the module views were collected to automatically check compliance of the systems with the intended architecture. We used three tools that support architectural compliance checks: Sotograph, Sonar J and Lattix. Though these tools were helpful, it turned out that they could not adequately check all aspects of the intended architecture. We identified three concepts that could not be fully modeled and checked. This paper describes these concepts and substantiates them with examples from the eight software systems. The given concepts can be utilized in several ways, e.g., for extending existing check approaches and tools, and as a means for architectural modeling.