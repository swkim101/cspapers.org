This paper describes the structure of two, self-paced, language-translation tutorials that integrate nicely into a principles-based undergraduate programming languages course, thus bringing material normally covered in a compiler course down into the context of a traditional programming languages course. The primary goal of the tutorials is to provide students with useful models for programming language principles as well as a very basic introduction to compiling techniques, including tokenizing, parsing, static semantic checking, and code generation. The paper also exposes a pedagogic technique of repeated exposure that drives the success of these tutorials.