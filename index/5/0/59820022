The goal of Machine Learning is to automate the acquisition of the knowledge that is built into intelligent computer systems. ML contrasts itself with a statistical approach and more recently neural net and other numerical techniques by claiming that it acquires symbolic knowledge. The form of this knowledge approximates the form of in which we communicate with each other. An analogical claim is made to contrast knowledge-based systems with other computer systems. However, it is quite clear that symbolic languages and comprehensiblity are not the same thing. It is a general experience from people working in manual knowledge acquisition that within symbolic languages there is a tension between comprehensibility on one hand and on the other hand "executability", eeciency (in storage and speed) and accuracy. At this point we must note that (1) there will be a trade oo between comprehensibility and other desirable properties of knowledge and (2) that the nature of this trade oo will depend on the purpose of the system. For some applications comprehensibility is irrelevant (e.g. in certain process control applications where performance is automatically optimised comprehensibility is not an issue). In other applications \executability" is not a major issue, e.g. in scientiic discovery. For systems that have a teaching function accuracy in performance may well be less relevant than comprehensibility. It is more important that the important concepts and relations are acquired than the details of their application. This suggests that we should analyse the requirements on the knowledge that is to be learned. These determine the notion of comprehensibility. 1 Comprehensibility as generating appropriate explanations Some of the requirements on the knowledge that is to be learned are associated with knowledge as software. We want executable programs that can be read and understood by a programmer who may want to debug them or use them later as part of a new program. In this case criteria from software engineering such as modularity and size apply. A recent eeort in the context of Inductive Logic Programming is the work by Sommer 1] on restructuring knowledge bases to give the call graph a uniform structure, without necessarily changing the functionality. However, general properties of the format of knowledge may help to make knowledge copmprehensible to a programmer, they will never be strong enough to specify \comprehensibility" for a user. We need an approach that gives us additional criteria.