Relaxed plans are used in the heuristic search planner FF for computing a numerical heuristic and extracting helpful actions. We present a novel way for extracting information from the relaxed plan and for dealing with helpful actions, by considering the high quality of the relaxed plans. In numerous domains, the performance of heuristic search planning and the size of the problems that can be handled have been drastically improved. 1 Computing and using lookahead states In classical forward state-space search algorithms, a node in the search graph represents a planning state and an arc starting from that node represents the application of one action to this state, that leads to a new state. In order to ensure completeness, all actions that can be applied to one state must be considered. The order in which these states wil l then be considered for development depends on the overall search strategy: depth-first, breadth-first, best-first... Let us now imagine that for each evaluated state S, we knew a valid plan P that could be applied to S and would lead to a state closer to the goal than the direct descendants of 5. It could then be interesting to apply P to 5, and use the resulting state S' as a new node in the search. This state could be simply considered as a new descendant of S. We have then two kinds of arcs in the search graph: the ones that come from the direct application of an action to a state, and the ones that come from the application of a valid plan to a state S and lead to a state S' reachable from S. We wil l call such states lookahead states, as they are computed by the application of a plan to a node S but are considered in the search tree as direct descendants of S. Nodes created for lookahead states wil l be called lookahead nodes. Plans labeling arcs that lead to lookahead nodes wil l be called lookahead plans. Once a goal state is found, the solution plan is then the concatenation of single actions for arcs leading to classical nodes and lookahead plans for arcs leading to lookahead nodes. *This work has been supported in part by the IUT de Lens, the CNRS and the Region Nord/Pas-de-Calais under the TACT Programme. The determination of an heuristic value for each state as performed in the FF planner [Hoffmann and Nebel, 2001] offers a way to compute such lookahead plans. FF creates a planning graph [Blum and Furst, 1997] for each encountered state S, using the relaxed problem obtained by ignoring deletes of actions and using S as initial state. A relaxed plan is then extracted in polynomial time and space from this planning graph. The length in number of actions of the relaxed plan corresponds to the heuristic evaluation of the state for which it is calculated. Generally, the relaxed plan for a state S is not valid for S, as deletes of actions are ignored during its computation. In numerous benchmark domains, we can observe that relaxed plans have a very good quality because they contain a lot of actions that belong to solution plans. We propose a way of computing lookahead plans from these relaxed plans, by trying as most actions as possible from them and keeping the ones that can be collected into a valid plan. The lookahead algorithm and the modifications to the search algorithm are the following (all details can be found in [Vidal, 2002]). Each time a state S is evaluated, it is entered into the open list. The relaxed plan extracted by the evaluation function is used to compute a lookahead plan P which leads to a state S" reachable from S. If P is more than one action long, S' is evaluated and added to the open list. Let P be a relaxed plan for a state S. A lookahead plan P' is computed as follows: all actions of P are observed in turn. When an action a is applicable to 5, it is added to the end of P' and S is updated (by the application of a). When all actions of P have been tried, this process is iterated without the actions that have been applied, until no action can be used. Completeness and correctness of search algorithms are preserved by this process, because no information is lost: all actions that can be applied to a state are still considered, and because the nodes that are added by lookahead plans are reachable from the states they are connected to. The only modification is the addition of new nodes, corresponding to states that can be reached from the initial state. 2 Using helpful actions: the "optimistic" best-first search algorithm In classical search algorithms, all actions that can be applied to a node are considered the same way: the states that they lead to are evaluated by an heuristic function and are then or-