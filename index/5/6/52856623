In this paper, we study the problem of emulating <italic>T<subscrpt>G</subscrpt></italic> steps of an <italic>N<subscrpt>G</subscrpt></italic>-node guest network on an <italic>N<subscrpt>H</subscrpt></italic>-node host network. We call an emulation <italic>work-preserving</italic> if the time required by the host, <italic>T<subscrpt>H</subscrpt></italic>, is <italic>&Ogr;</italic>(<italic>T<subscrpt>G</subscrpt>N<subscrpt>G</subscrpt></italic>/<italic>N<subscrpt>H</subscrpt></italic>) because then both the guest and host networks perform the same total work, &THgr;(<italic>T<subscrpt>G</subscrpt>N<subscrpt>G</subscrpt></italic>), to within a constant factor. We say that an emulation is <italic>real-time</italic> if <italic>T<subscrpt>H</subscrpt></italic> = <italic>&Ogr;</italic>(<italic>T<subscrpt>G</subscrpt></italic>), because then the host emulates the guest with constant delay. Although many isolated emulation results have been proved for specific networks in the past, and measures such as dilation and congestion were known to be important, the field has lacked a model within which general results and meaningful lower bounds can be proved. We attempt to provide such a model, along with corresponding general techniques and specific results in this paper. Some of the more interesting and diverse consequences of this work include:<list><item>a proof that a linear array can emulate a (much larger) butterfly in a work-preserving fashion, but that a butterfly cannot emulate an expander (of any size) in a work-preserving fashion.
</item><item>a proof that a mesh can be emulated in real time in a work-preserving fashion on a butterfly, even though any <italic>&Ogr;</italic>(1)-to-1 embedding of a mesh in a butterfly has dilation &OHgr;(log <italic>N</italic>),
</item><item>a proof that an <italic>N</italic> log <italic>N</italic>-node butterfly can be emulated in a work-preserving fashion on an <italic>N</italic>-node shuffle-exchange graph, and vice-versa,
</item><item>simple <italic>&Ogr;</italic>(<italic>N<supscrpt>2</supscrpt></italic>/log<supscrpt>2</supscrpt> <italic>N</italic>)-area and <italic>&Ogr;</italic>(<italic>N</italic><supscrpt>3/2</supscrpt>/log<supscrpt>3/2</supscrpt> <italic>N</italic>)-volume layouts for the <italic>N</italic>-node shuffle-exchange graph, and
</item><item>an algorithm for sorting <italic>N</italic>-numbers in <italic>&Ogr;</italic>(log <italic>N</italic>) steps with high probability on an <italic>N</italic>-node shuffle-exchange graph with constant size queues.
</item></list>