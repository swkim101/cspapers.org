We study the depth (~-parallel time) complexity of widely used shared memory CRCW PRAM models. We first consider COMMON(m), ARBITRARY(m) and PRIORITY(m), for m<-n c (the communication width), assuming that the inputs are given in a read only memory (ROM) which can be read by all processors ([CO], [VW]). (1) With inputs in ROM, we prove that COMMON(n ~) is weaker than ARBITRARY(n') , ARBITRARY(n ~) is weaker than PRIORITY(n ' ) , for e ~ l . The pioneering papers [FRW] and [FMRW] showed that if each processor can read only one input, then COMMON(n ~) is weaker than PRIORITY(n~). We remove this restriction. The case with ROM is impor tant [VW] and requires new techniques. (2) We answer a conjecture by [VW] on computing PARITY on nondeterminist ic PRIORITY(l) . Without ROM (each processor has one input), we prove a t ight I~/(X/~-) bound. With ROM, we prove ~(loglogn) lower bound and O( n 1/3) upper bound. (3) We obtain optimal deterministic simulations of nondeterministie PRAM's , providing another new technique for obtaining t ight lower bounds for and separation between nondeterminist ic models. (4) For models without ROM, we prove tha t symmetr ic functions with inputs from a finite domain cannot separate between ARBITRARY(l) and PRIORITY(I) . In the second part, we for the first t ime successfully apply Kolmogorov-complexity to obtain lower bounds for PRIORITY(oo) (the most powerful concurrent write PRAM with shared memory). We develop two new and general lower bound techniques which enable us to give very clean proofs for (1) The first depth-processor-input_size tradeoff, d e p t h = a ( m i n ( l o g n , ' -~-~-~-' PRIORITY(d0) with log logP )' on P processors for a large class of functions f ( z l , • • • , z , ) including addition, multiplication, and bitwise OR, where Ixil-<b(n). This improves a beautiful result in [MW], whose Iogn lower bound, however, does not provide a Permission to copy without fee all or part of this material is granted provided that the copies are not made or distributed for direct commercial advantage, the ACM copyright notice and the title of the publication and its date appear, and notice is given that copying is by permission of the Association for Computing Machinery. To copy otherwise, or to republish, requires a fee and/or specific permission. © 1986 ACM 0-89791-193-8/86/0500/0177 $00.75 bound on the size of inputs x i. Our result implies that for n °(t) processors I~(logn) depth is needed even for inputs of size n ~. Hence even the bit complexity is logarithmic in this case. It also partially answers an open question in JR] on addition of n small numbers. Especially, when the number size is n l/t°gt°gn our ~(logn/loglogn) bound is t ight (even for probabilistic addition). (2) Up to now, there has been no lower bound on PRIORITY(~) with n °(l) processors on functions with inputs~{0,1}. We give the first such bound, namely n ~(logn) for the function f ( z l , ' ' ' , x n ) = ~ lx ia ' where a is fixed and xiE{0,1 }. (3) Finally, we establish a first lower bound for a Boolean function (i.e. n 1-bit inputs and one 1-bit output) , namely PARITY, on the most powerful CRCW parallel model PRIORITY(a) . We show that with less than exponential number of processors, a PRIORITY(w) cannot compute PARITY in constant depth. 1. I n t r o d u c t i o n A PRAM consists of processors P( i ) i= 1,2, • • • , shared memory cells C(i) i=1,2 , • • , and n read only input cells (ROM) X(1) , . . ,X(n) . Each step of the computation consists of four parallel phases as follows. Each processor: (1) reads from some ROM cell, (2) reads from some shared memory cell, (3) performs a computat ion, and (4) may a t t empt writing into some shared memory cell. At each step each processor is in some state. The actions and the next state of each processor at each step depend on the current state and the values read from the ROM and the shared memory. The various variants of the PRAM differ in the way they handle write confl icts: (1) CREW (Concurrent Read Exclusive Write): Write conflicts cannot occur. (2) COMMON: All the processors simultaneously writing into the same cell write the same value. (3) ARBITRARY: An arbitrary processor succeeds in writing. (4) PRIORITY: The processor with minimum index succeeds in writing. For M any of the above models, N M is the nondeterminist ic version of M (with cons tant nondeterministie branching for each parallel step). Also let M(m), (or N M ( m ) ) be the model with m shared memory cells. The depth of the PRAM is the number of parallel s teps used. The history of a computat ion through step t is a vector H1, • • • ,Ht, where H i is the contents of the shared memory at step i.