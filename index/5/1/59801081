We describe how we constructed a Java class library for text mining and information retrieval. The system consists of Facades around a database, a search engine and a text mining tool. We discuss the design of the object models we used for each of these elements and how they evolved as different databases and search engines became available. Then we discuss how we needed to evolve the system further in work with our customer. Finally we discuss the eventual fate of the system after the customer adopted the final version of the code, showing what we learned from the experience. Introduction We began building Java applications for text mining and information retrieval in 1995, shortly after Java was released. We reported on the first application interface in 1997, discussing the advantages of Prompted Query Refinement [1] to help users focus their queries. The initial system was built using a Unix-based internal research level search engine and a set of binary tables for term lookups. The communication between the Java applet and the server was provided using a low-level socket interface. We then embarked on a more ambitious project, working with the Giga Information group, to index their consultant reports and provide a more sophisticated way for their user to search and review these reports. This system consisted of a Windows NT server, an IBM product search engine and a database of the terms and relations discovered by our TALENT [2] text mining tools. In this initial modest-sized collection, we used a Microsoft Access database and wrote a Java RMI server to provide information to a Java applet client [3]. In a follow-on project, we extended this design further to include major sentences in each document, which could be used to construct a variable length document summary [4].