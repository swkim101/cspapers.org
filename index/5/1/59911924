Software quality can be ensured by making use of reusable, predefined software components when building systems. Four main advantages result from such an approach: increases in productivity; greater control over subsystem component quality; subsystem uniformity and standardisation eases maintenance; and making use of previously proven routines instead of new unproven software. The authors discuss a framework for a software reuse librarian system which is the subject of ongoing research work. This work is based upon the strengths of the application of formal methods of software specification; developing standard ML algebraic specifications into Ada workpackage components. >