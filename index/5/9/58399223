Die hohe Varianz und damit verbundene Komplexitat eingebetteter Software erschwert deren Wartbarkeit und Erweiterbarkeit und somit Wiederverwendbarkeit. Zur Reduktion des Aufwands zur Fehlererkennung und funktionalen Erweiterung wahrend des Softwarelebenszyklus ist eine geeignete Software-Architektur, charakterisiert durch Softwareteile und deren Interaktionen untereinander, unerlasslich. Insbesondere fur systemnahe imperative Programmiersprachen, z.B. Embedded C, sind das Zusammenwirken und Abhangigkeiten zwischen Softwareteilen oftmals jedoch schwer zu erfassen. Zur Adressierung dieser Herausforderungen wird ein Ansatz zur Visualisierung von Software eingebetteter Systeme unter Berucksichtigung der Sichten auf die Interaktionen zwischen Softwareteilen vorgestellt. Verbesserungspotentiale bezuglich der Modularitat von Software – und somit deren Wiederverwendung, Wartbarkeit und Erweiterbarkeit – konnen somit lokalisiert und das Refactoring der Software-Architektur unterstutzt werden.