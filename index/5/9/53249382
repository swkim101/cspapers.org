Easy as the task may seem, many compilers generate rather inefficient code. Some of the difficulty of generating good code may arise from the lack of realistic models for programming language and machine semantics. In this paper we show that the computational complexity of generating efficient code in realistic situations may also be a major cause of difficulty in the design of good compilers. We consider the problem of generating optimal code for a set of expressions. If the set of expressions has no common sub-expressions, then a number of efficient optimal code generation algorithms are known for wide classes of machines [SU, AJ, BL].