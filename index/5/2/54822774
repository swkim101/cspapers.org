With the increasing attention of software safety, how to improve software safety has already become a more important concerned issue, especially for the safety-critical systems. Currently, the influence of architecture in assurance of software safety is being increasingly recognized. Safety design at architecture level can effectively improve software or system safety. This paper focus on how to consider safety in software architecture design phase and proposed a safety-oriented software architecture design approach. Through the system hazard analysis, this design approach uses the selected combination of safety tactics to effectively improve the software or system safety, providing a new way of thinking for software safety architecture design. Introduction Safety Critical System (SCS) refers to the system which has potentially destructive power. Once such a system produced a failure, many serious consequences may be caused, such as casualties, property loss and environmental damage etc. In recent years, software application in SCS is more and more extensive, and the scale also increasingly grows. From railway transit field to the aerospace field and from the power system to the medical system, this type of software plays a key role in command and control aspect for software safety. The core research in SCS safety is how to reduce the probability of unsafe system conditions that various SCS elements lead to, or weaken the SCS’s consequences that failures produce, through using a variety of management, organization, technical measures [1]. This is also the focus of this paper. Since software architecture (SA) was proposed, it has been favored by many researchers and practitioners, and become an important research field of software engineering. SA determines a system’s main structure, macroscopic properties, its basic functions and characteristics. SA is the basis and the key to success of the whole software design. Currently, SA design methods mostly focus on system’s non-functional requirements (NFR), for instance safety or reliability, into consideration. SA design combining with SA analysis method, researchers hope to find the potential risk in early software life cycle [2]. The research on safe SA not only can ensure the safety of SA-based software development components, but also can ensure the safety of the final software product. Software safety and reliability have different characteristics. The former pay more attention to software defect that lead to enter the unsafe state and how to reduce the risk of system failure which can led to the catastrophic accidents. So far, however, the work combined safety and SA design is very scarce. So, there is little guidance on how to address safety concerns in shaping a safe SA and how to improve SA by using basic safety tactics. In order to improve this situation, this paper proposed a safety-oriented software architecture design approach. Related Works Currently, many studies have showed that through explicitly presenting SA and its elements, such as components and connector, SA can handle high abstract level’s design problems, such as International Conference on Information Science and Computer Applications (ISCA 2013) © 2013. The authors Published by Atlantis Press 153 the global organization and control structures, functions allocated to the calculating unit, high-level interactions between calculating units or other design problems [3]. According to safety standards of software elements under design, IEC 61508 provide some general guidelines on the selection of these techniques [4]. However, this guidance fails to illustrate further how to utilize these techniques to maximize the protection against failures. Reference [5] classifies the existing conventional SA design methods into five categories, which are Artifact-Driven, User-Case-Driven, Pattern-Driven, Domain-Driven and Requirement-Driven, and respectively describes each kind of design method’s design process, design advantages and defects. For SCS architecture design, its safety assurance needs to be satisfied as well as its functional requirements. The five categories design methods are too general because of lack of practicability and concreteness. Reference [7] tells us how to combine the SA with safety model so as to improve the consistency between safety analysis and software development. By using UML modeling tools for SA design, it elaborates how to convert software architecture model into safety analysis model through using FTA (Fault Tree Analysis) and FMECA (Failure Mode Effects and Criticality Analysis) methods, which are two well-known safety analysis methods with tool support. Therefore, on one hand, it is feasible to take safety into account in the SA design phase. On the other hand, the reuse and traceability of safety analysis is very important for both architects and safety engineers. Reference [8] defines an analytic safety-attribute model. The focus of this model is the relationship between the safety attribute and SA with respect to failures. There are four key elements which need identifying in this model: failure classification, failure cause, failure behavior and failure property. The contribution is to propose a description of safety tactics framework and summarize the existing safety tactics, as shown in Fig. 1. Safety Tactics Failure Avoidance