classes Account, Transaction, Attribute Way objects interact: Transaction -> Account Transaction can post itself to set of Accounts Account -> Transaction Account sorts Transactions that are posted to it Account -> Attribute Account retrieves the value of an attribute at a particular time by delegating to the Attribute object Attribute -> Transaction Attribute knows how to fetch value from Transaction Notes for OOPSLA '93 23 How to Design Frameworks -Copyright 1993 by Ralph E. Johnson How to use Accounts Define Transactions and Accounts. • define the Accounts to which a Transaction is posted Define fields on Transactions. Define Attributes on Accounts. • define way Attribute is computed (+,*, mtd, ytd) by selecting appropriate subclass of Attribute • for each Transaction posting to an Account, define how the Attribute gets a value 24 How to Design Frameworks -Copyright 1993 by Ralph E. Johnson Examples Good examples are crucial: • for finding framework • for teaching framework Examples define scope of the framework. Concrete examples abstract framework Notes for OOPSLA '93 25 How to Design Frameworks -Copyright 1993 by Ralph E. Johnson Finding Examples Start with similar examples. • should illustrate features that framework must support • provides a base for generalization Eventually examples should cover wide range. • minimize number of examples Look for examples that will break the framework. • perhaps they will define limits of framework • perhaps they will lead to generalization • avoid lots of special cases 26 How to Design Frameworks -Copyright 1993 by Ralph E. Johnson What Examples for Accounts? We've worked most on: • store • investment We have thought about: • payroll • personal finance • banking • budgeting We should consider: • insurance • manufacturing inventory Once Accounts can handle several small examples well, scale up. Notes for OOPSLA '93 27 How to Design Frameworks -Copyright 1993 by Ralph E. Johnson Process of Framework Design Framework is generalization of implementation of several problems. • study solution domain as well as problem domain • need to look at real programs • need a wide range of carefully chosen examples • generalization is the same process that occurs in all object-oriented design find common abstractions figure how to decompose problem into standard components parameterize There are common patterns of interaction that experts look for. Example-driven: the examples you choose determine your framework 28 How to Design Frameworks -Copyright 1993 by Ralph E. Johnson Scheduling Development Software is not reusable until it has been reused. Reusing software that is not reusable will point out reusability defects. 1) Domain analysis, collect examples (small group) 2) Make preliminary design (small group) 3) Implement examples (many groups) In addition to the framework design group, there probably needs to be a group for each example, unless the examples are small. 4) Fix framework and examples (many unhappy groups) As usual, every order of magnitude increase in the number of users will illustrate some (reusability) defects that you haven't detected before. Notes for OOPSLA '93 29 How to Design Frameworks -Copyright 1993 by Ralph E. Johnson Design Patterns Classes in framework can have many relationships between them. Designers look for design patterns to increase reusability. Superclass/subclass Part/whole (component/container) Builder/product Delegator/delegatee Double-dispatching 30 How to Design Frameworks -Copyright 1993 by Ralph E. Johnson Composition vs. Inheritance Two ways of reusing behavior • inheritance • composition Inheritance • easy to override inherited methods • static (easier to reason about) Composition • less programming • change behavior at run-time One relationship can often be changed to the other. Notes for OOPSLA '93 31 How to Design Frameworks -Copyright 1993 by Ralph E. Johnson Another Look at Accounts and Transactions Inventory (IJ) Journal Accounts Payable Journal (APJ) SalesTransaction