Transactional memory (TM) [1] is a promising mechanism for improving both of productivity and performance of parallel processing programs on shared-memory systems such as multi-core processors. It can be complementary and/or alternative to traditional lock-based mechanisms that are awkward and intractable for programmers. Hardware transactional memories (HTMs), hardware implementations of TM, are now widely installed to the several latest processors, such as IBM zEC12, Power8, and Intel Haswell. Programmers define critical sections as transactions, and the transactions can be speculatively executed in parallel by HTMs, while traditional lock-based systems completely serialize them. HTMs dynamically detect access conflicts on shared variables between transactions and cancel speculative execution of transactions. Because the canceled execution comes to nothing and causes some performance overhead for rolling back the transaction execution, how to avoid and reduce access conflicts is very important for the performance of HTMs. Many studies [2, 5, 8â€“11] have been conducted on improving HTM performance, but some type of programs still suffer many access conflicts and large performance overhead, and they should be relieved. Transactions must guarantee several properties including Atomicity and Isolation, and access requests that may violate them are generally denied by HTMs. However, we found that some of the requests can be granted without violating Isolation, and this can improve the HTM performance. On HTM, execution of a transaction is naturally speculative, and our proposal boosts its speculativeness by speculatively permitting some accesses that are judged as conflicting accesses. In this presentation, we aim to make the following contributions: