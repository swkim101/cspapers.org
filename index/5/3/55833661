Software testing is an indispensable part of the software development process. Mutation analysis is regarded as an effective software testing method. By adopting mutation operators on the original program, mutation analysis generates mutants to simulate possible bugs, and then it creates a test case suite working on both mutants and the original program to analyze the difference in the results and find these bugs. Mutation analysis improves the test case suite until it is strong enough to find all possible bugs. If the result of running a mutant is different from the result of running the original program for at least one test case in the input test case suite, the seeded fault denoted by the mutant is detected. However, in the process of seeding into the fault, there is the equivalent mutant that has exactly the same behavior as the original program generated. These equivalent mutants obstruct the precise assessment of the quality of the test case suite. Therefore, it is necessary to remove them. In this article, we improve a previously proposed novel approach to equivalent mutant detection that uses symbolic computation. When we apply symbolic computation to a statement with loop description, the path explosion problem occurs. To overcome this path explosion problem, this article proposes a method that restricts the number of iterations to improve the detection ratio of equivalent mutants.