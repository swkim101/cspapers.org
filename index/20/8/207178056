For a variety of reasons there has been a renewed interest in non-major level computer science courses. One reason for this is that non-major courses are seen as potentially increasing both interest and enrollment in computer science courses. Another reason is the rising popularity of “computational thinking.” Furthermore, as computation becomes the cornerstone of research methodologies, if not professional practice, in the natural, physical and social sciences, including, as well, a growing influence in the humanities, the demand from external departments/programs for non-major level service courses has began to rise, albeit slowly. This raises some interesting questions to the CSE community. Given that one offers a single non-major level course, what should be the topics covered as distinct from the technologies used to convey those topics? What learning outcomes are most desired? Finally, the competency, or at least serious introduction of which technological skills, if any, should be considered mandatory (e.g. programming). In short, what should a non-major/minor student who takes one course in computer science come away with knowing and being able to do? Possibly orthogonal to this is the question: What should any liberally (college) educated person know about computation at this point in time? This panel will outline four different perspectives on this important question in addition to engaging the audience in a discussion regarding the answers to the questions raised.