Given the increasing ubiquity of online embedded devices, analyzing their ﬁrmware is important to security, privacy, and safety. The tight coupling between hardware and ﬁrmware and the diversity found in embedded systems makes it hard to perform dynamic analysis on ﬁrmware. However, ﬁrmware developers regularly develop code using abstractions, such as Hardware Abstraction Layers (HALs), to simplify their job. We leverage such abstractions as the basis for the re-hosting and analysis of ﬁrmware. By providing high-level replacements for HAL functions (a process termed High-Level Emulation – HLE ), we decouple the hardware from the ﬁrmware. This approach works by ﬁrst locating the library functions in a ﬁrmware sample, through binary analysis, and then providing generic implementations of these functions in a full-system emulator. Wepresent these ideas in a prototype system, HALucinator, able to re-host ﬁrmware, and allow the virtual device to be used normally. First, we introduce extensions to existing library matching techniques that are needed to identify library functions in binary ﬁrmware, to reduce collisions, and for inferring additional function names. Next, we demonstrate the re-hosting process, through the use of simpliﬁed handlers and peripheral models , which make the process fast, ﬂexible, and portable between ﬁrmware samples