As embedded devices are becoming more pervasive in our everyday lives, they turn into an attractive target for adver-saries. Despite their high value and large attack surface, ap-plying automated testing techniques such as fuzzing is not straightforward for such devices. As fuzz testing ﬁrmware on constrained embedded devices is inefﬁcient, state-of-the-art approaches instead opt to run the ﬁrmware in an emulator (through a process called re-hosting ). However, existing approaches either use coarse-grained static models of hardware behavior or require manual effort to re-host the ﬁrmware. We propose a novel combination of lightweight program analysis, re-hosting, and fuzz testing to tackle these challenges. We present the design and implementation of F UZZWARE , a software-only system to fuzz test unmodiﬁed monolithic ﬁrmware in a scalable way. By determining how hardware-generated values are actually used by the ﬁrmware logic, F UZZWARE can automatically generate models that help fo-cusing the fuzzing process on mutating the inputs that matter, which drastically improves its effectiveness. We evaluate our approach on synthetic and real-world targets comprising a total of 19 hardware platforms and 77 ﬁrmware images. Compared to state-of-the-art work, F UZZ WARE achieves up to 3.25 times the code coverage and our modeling approach reduces the size of the input space by up to 95.5%. The synthetic samples contain 66 unit tests for various hardware interactions, and we ﬁnd that our approach is the ﬁrst generic re-hosting solution to automatically pass all of them. F UZZWARE discovered 15 completely new bugs including bugs in targets which were previously analyzed by other works;