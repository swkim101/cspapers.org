—Fuzzing is popular for bug detection and vulner- ability discovery nowadays. To adopt fuzzing for concurrency problems like data races, several recent concurrency fuzzing ap- proaches consider concurrency information of program execution, and explore thread interleavings by affecting thread scheduling at runtime. However, these approaches are still limited in data-race detection. On the one hand, they fail to consider the execution contexts of thread interleavings, which can miss real data races in speciﬁc runtime contexts. On the other hand, they perform random thread-interleaving exploration, which frequently repeats already covered thread interleavings and misses many infrequent thread interleavings. In this paper, we develop a novel concurrency fuzzing frame- work named C ONZZER , to effectively explore thread interleavings and detect hard-to-ﬁnd data races. The core of C ONZZER is a context-sensitive and directional concurrency fuzzing approach for thread-interleaving exploration, with two new techniques. First, to ensure context sensitivity, we propose a new concurrency-coverage metric, concurrent call pair , to describe thread inter- leavings with runtime calling contexts. Second, to directionally explore thread interleavings, we propose an adjacency-directed mutation to generate new possible thread interleavings with already covered thread interleavings and then use a breakpoint- control method to attempt to actually cover them at runtime. With these two techniques, this concurrency fuzzing approach can effectively cover infrequent thread interleavings with concrete context information, to help discover hard-to-ﬁnd data races. We have evaluated C ONZZER on 8 user-level applications and 4 kernel-level ﬁlesystems, and found 95 real data races. We identify 75 of these data races to be harmful and send them to related developers, and 44 have been conﬁrmed. We also compare C ONZZER to existing fuzzing tools, and C ONZZER continuously explores more thread interleavings and ﬁnds many