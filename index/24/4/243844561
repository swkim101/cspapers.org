Node.js is a popular non-browser JavaScript platform that provides useful but sometimes also vulnerable packages. On one hand, prior works have proposed many program analysis-based approaches to detect Node.js vulnerabilities, such as command injection and prototype pollution, but they are spe-ciﬁc to individual vulnerability and do not generalize to a wide range of vulnerabilities on Node.js. On the other hand, prior works on C/C++ and PHP have proposed graph query-based approaches, such as Code Property Graph (CPG), to efﬁciently mine vulnerabilities, but they are not directly applicable to JavaScript due to the language’s extensive use of dynamic features. In the paper, we propose ﬂow-and context-sensitive static analysis with hybrid branch-sensitivity and points-to information to generate a novel graph structure, called Object De-pendence Graph (ODG), using abstract interpretation. ODG represents JavaScript objects as nodes and their relations with Abstract Syntax Tree (AST) as edges, and accepts graph queries—especially on object lookups and deﬁnitions—for detecting Node.js vulnerabilities. We implemented an open-source prototype system, called ODG EN , to generate ODG for Node.js programs via abstract interpretation and detect vulnerabilities. Our evaluation of recent Node.js vulnerabilities shows that ODG together with AST and Control Flow Graph (CFG) is capable of modeling 13 out of 16 vulnerability types. We applied ODG EN to detect six types of vulnerabilities using graph queries: ODG EN correctly reported 180 zero-day vulnerabilities, among which we have received 70 Common Vulnerabilities and Exposures (CVE) identiﬁers so far.