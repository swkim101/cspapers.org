Computing culture and its artifacts tend to oust marginalized students. Therefore alongside our push to broaden participation in computing (BPC), we must create new methods of critiquing and changing computing culture and its artifacts. Many marginalized students have experienced what Dr. Ruha Benjamin calls "glitches": a breakdown of computing artifacts regarding the intersection of identities and computing that expose systemic biases. As many egregious "glitches" border on parody or satire, we investigated the potential of satirical programming in BPC programs to critique computing artifacts. We designed and conducted a one-hour session for three high school BPC programs in the American Midwest. Sessions used culturally responsive pedagogy to discuss how programming encodes bias. We taught elements of Python to scaffold the creation of a short Python script. We showed an example of a satirical Python script and encouraged students to satirize a "glitch" they experienced in a computing artifact or concept. Our findings show that many marginalized students were well aware of "glitches" in their own experiences with software. They enjoyed translating the "glitches" into satirical Python scripts that demonstrated their understanding of how systemic biases manifest in software development. In this poster, we share the results of a post-session survey, student examples of satirical scripts, and recommendations for instructors looking to include creative methods of discussing systemic biases in software.