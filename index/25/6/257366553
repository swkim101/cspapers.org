Computer science (CS) students' curricula is heavily focused on technical skills, and CS ethics, usability, equity, and people/society considerations are not well-integrated into the CS curriculum. If these topics are introduced, they are disconnected from the core courses. As a result, students do not learn to incorporate inclusive practices into their software designs. Thus, students create software through the perspective of a computer scientist - when the important perspective is that of the intended users. As a result, students entering the workforce are inclined to design software that is non-inclusive. We propose the integration of inclusive design in the undergraduate curriculum will result in students creating inclusive software. This research, based on the foundations of inclusive design methods, investigates a new approach to teaching CS. Inclusive software design is embedded into computing courses for all four years of the undergraduate CS curriculum. This new approach is "minimally invasive", occupying very little classroom time, instead it is integrated into the course work that is already assigned. With this work, we hope to answer the following questions: (1) Will this new approach improve students' ability to design inclusive software? (2) Will this approach create an inclusive climate among peers? (3) Will it affect student's success or lack thereof? (4) How and to what extent is this embedded inclusive design curriculum feasible to use?