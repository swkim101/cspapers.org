To test a program, one could benefit from an effective approach to enumerate traces using a symbolic representation of the program. Similar to other approaches to automated reasoning about software, test case generation could then follow a paradigm of delegating complex symbolic reasoning to constraint solvers. Intermediate languages, such as the ones based on constrained Horn clauses (CHC) offer a high degree of flexibility for the designers of various toolchains, and in particular, designers of test case generators. Having a test-case generator developed for CHC, it only remains to develop a CHC encoder for a programming language of choice, or to use an existing one. Horntinuum is the first tool that uses CHC for test-case generation. For maximizing a branch coverage, Horntinuum aims to enumerate test cases, such that the programs if executed under these tests visit as many branches as possible. Branches in the code are commonly attributed to the conditional statements or loops. For testing a loop-free program, possible test cases for all the branches can be identified by symbolic execution. If a conditional is placed inside or after a loop, test-case generation immediately becomes challenging and boils down to finding a proper unrolling of the loop. Horntinuum takes a set of symbolic constraints as input that could be produced by encoding a desired program in a programming language (potentially any, and currently C and in parts Solidity) that has a proper encoding to CHCs. Formally, a CHC is a logic formula involving uninterpreted predicates. In our application, each CHC encodes a straight-line block of code, and uninterpreted predicates encode points of control-flow divergence or convergence. Valid interpretations for these predicates, if found, represent reachability information (are known as invariants) and are useful in pruning the search space explored by test-case generators. If an invariant shows that a branch can never be taken, then it is guaranteed that no test can ever reach the branch, and thus a test-case generator can safely proceed to discovery of the next test case.