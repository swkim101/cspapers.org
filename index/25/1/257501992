—Code reuse is widespread in software development. It brings a heavy spread of vulnerabilities, threatening software security. Unfortunately, with the development and deployment of the Internet of Things (IoT), the harms of code reuse are magniﬁed. Binary code search is a viable way to ﬁnd these hidden vulnerabilities. Facing IoT ﬁrmware images compiled by different compilers with different optimization levels from different architectures, the existing methods are hard to ﬁt these complex scenarios. In this paper, we propose a novel intermediate representation function model, which is an architecture-agnostic model for cross-architecture binary code search. It lifts binary code into microcode and preserves the main semantics of binary functions via complementing implicit operands and pruning redundant instructions. Then, we use natural language processing techniques and graph convolutional networks to generate function embeddings. We call the combination of a compiler, architecture, and optimization level as a ﬁle environment , and take a divide-and-conquer strategy to divide a similarity calculation problem of C 2 N cross-ﬁle-environment scenarios into N − 1 embedding transferring sub-problems. We propose an entropy-based adapter to transfer function embeddings from different ﬁle environments into the same ﬁle environment to alleviate the differences caused by various ﬁle environments. To precisely identify vulnerable functions, we propose a progressive search strategy to supplement function embeddings with ﬁne-grained features to reduce false positives caused by patched functions. We implement a prototype named VulHawk and conduct experiments under seven different tasks to evaluate its performance and robustness. The experiments show VulHawk outperforms Asm2Vec, Asteria, BinDiff, GMN, PalmTree, SAFE, and Trex.