In this paper, we present a new framework that exploits combinatorial optimization for efficiently generating a large variety of combinatorial objects based on graphs, matroids, posets and polytopes. Our method relies on a simple and versatile algorithm for computing a Hamilton path on the skeleton of any 0/1-polytope $\operatorname{conv}(X)$, where $X \subseteq\{0,1\}^{n}$. The algorithm uses as a black box any algorithm that solves a variant of the classical linear optimization problem $\min \{w \cdot x \mid x \in X\}$, and the resulting delay, i.e., the running time per visited vertex on the Hamilton path, is only by a factor of $\log n$ larger than the running time of the optimization algorithm. When X encodes a particular class of combinatorial objects, then traversing the skeleton of the polytope $\operatorname{conv}(X)$ along a Hamilton path corresponds to listing the combinatorial objects by local change operations, i.e., we obtain Gray code listings. As concrete results of our general framework, we obtain efficient algorithms for generating all (c-optimal) bases and independent sets in a matroid; (c-optimal) spanning trees, forests, matchings, maximum matchings, and c-optimal matchings in a general graph; vertex covers, minimum vertex covers, c-optimal vertex covers, stable sets, maximum stable sets and c-optimal stable sets in a bipartite graph; as well as antichains, maximum antichains, c-optimal antichains, and c-optimal ideals of a poset. Specifically, the delay and space required by these algorithms are polynomial in the size of the matroid ground set, graph, or poset, respectively. Furthermore, all of these listings correspond to Hamilton paths on the corresponding combinatorial polytopes, namely the base polytope, matching polytope, vertex cover polytope, stable set polytope, chain polytope and order polytope, respectively. As another corollary from our framework, we obtain an $\mathcal{O}\left(t_{\text{LP}} \log n\right)$ delay algorithm for the vertex enumeration problem on 0/1-polytopes $\left\{x \in \mathbb{R}^{n} \mid A x \leq b\right\}$, where $A \in \mathbb{R}^{m \times n}$ and $b \in \mathbb{R}^{m}$, and $t_{\text{LP}}$ is the time needed to solve the linear program $\min \{w \cdot x \mid A x \leq b\}$. This improves upon the 25-year old $\mathcal{O}\left(t_{\text{LP}} n\right)$ delay algorithm due to Bussieck and LÃ¼bbecke.