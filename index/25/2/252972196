Memory-safety issues in operating systems and popular applications are still top security threats. As one widely exploited vulnerability, Use After Free (UAF) resulted in hundreds of new incidents every year. Existing bug diagnosis techniques report the locations that allocate or deallocate the vulnerable object, but cannot provide sufﬁcient information for developers to reason about a bug or synthesize a correct patch. In this work, we identiﬁed incorrect reference counting as one common root cause of UAF bugs: if the developer forgets to increase the counter for a newly created reference, the program may prematurely free the actively used object, rendering other references dangling pointers. We call this problem reference miscounting . By proposing an omission-aware counting model, we developed an automatic method, F REE W ILL , to diagnose UAF bugs. F REE W ILL ﬁrst reproduces a UAF bug and collects related execution trace. Then, it identiﬁes the UAF object and related references. Finally, F REE W ILL compares reference operations with our model to detect reference miscounting. We evaluated F REE W ILL on 76 real-world UAF bugs and it successfully conﬁrmed reference miscounting as root causes for 48 bugs and dangling usage for 18 bugs. F REE W ILL also identiﬁed ﬁve null-pointer deref-erence bugs and failed to analyze ﬁve bugs. F REE W ILL can complete its analysis within 15 minutes on average, showing its practicality for diagnosing UAF bugs.