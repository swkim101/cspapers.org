Kernel fuzzing is a dynamic testing technique that has successfully found numerous kernel vulnerabilities. However, existing kernel fuzzers, such as Syzkaller, depend on system call speciﬁcations to generate test cases. Writing such speciﬁ-cations requires an immense amount of domain knowledge while being extremely laborious. Meanwhile, automated generation of the speciﬁcation is still an open problem due to the complexity of the kernel, including entry function extraction and input type identiﬁcation. As a result, the current amount of system call information is insufﬁcient to test the entire kernel code base thoroughly. Syzkaller covers an average of 38% of Linux kernel code with current Syzlang speciﬁcations for a prolonged time of fuzzing. In this paper, we propose KSG to generate system call speciﬁcations for kernel fuzzers automatically. First, it utilizes probe-based tracing to extract entry functions accurately. Then, it uses path-sensitive analysis to collect precise input types and range constraints in each execution path of entry functions. Based on the aforementioned information, KSG generates speciﬁcations in the domain language Sy-zlang, which is used by most kernel fuzzers. We evaluated KSG on several versions of the Linux kernel. It automatically generated 2433 unique speciﬁcations. Leveraging the newly generated speciﬁcations, Syzkaller and Moonshine achieved coverage improvements of 22% and 23% respectively. Furthermore, our approach assisted fuzzers to discover 26 previously unknown bugs, where 13 and 6 bugs were ﬁxed and assigned with CVEs, respectively.