—With users becoming increasingly privacy-aware and browser vendors incorporating anti-tracking mechanisms, browser ﬁngerprinting has garnered signiﬁcant attention. Accord-ingly, prior work has proposed techniques for identifying browser extensions and using them as part of a device’s ﬁngerprint. While previous studies have demonstrated how extensions can be detected through their web accessible resources, there exists a signiﬁcant gap regarding techniques that indirectly detect extensions through behavioral artifacts. In fact, no prior study has demonstrated that this can be done in an automated fashion. In this paper, we bridge this gap by presenting the ﬁrst fully automated creation and detection of behavior-based extension ﬁngerprints. We also introduce two novel ﬁngerprinting techniques that monitor extensions’ communication patterns, namely outgoing HTTP requests and intra-browser message exchanges. These techniques comprise the core of Carnus, a modular system for the static and dynamic analysis of extensions, which we use to create the largest set of extension ﬁngerprints to date. We leverage our dataset of 29,428 detectable extensions to conduct a comprehensive investigation of extension ﬁngerprinting in realistic settings and demonstrate the practicality of our attack. Our in-depth analysis conﬁrms the robustness of our techniques, as 83.6% - 87.92% of our behavior-based ﬁngerprints remain effective against a state-of-the-art countermeasure. Subsequently, we aim to explore the true extent of the privacy threat that extension ﬁngerprinting poses to users, and present a novel study on the feasibility of inference attacks that reveal private and sensitive user information based on the functionality and nature of their extensions. We ﬁrst collect over 1.44 million public user reviews of our detectable extensions, which provide a unique macroscopic view of the browser extension ecosystem and enable a more precise evaluation of the discriminatory power of extensions as well as a new deanonymization vector. We also automatically categorize extensions based on the developers’ descriptions and identify those that can lead to