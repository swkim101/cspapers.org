As the enrollment in computer science courses increases, faculty face the challenge of maintaining a standard of academic integrity in out of class programming assignments. One strategy to combat academic misconduct, is to incorporate more frequent in-class assessment. Traditional in-class assessment is often perceived as passive and taking away from valuable class time. Also, more in-class assessment could mean increasing the amount of test anxiety. Therefore, this paper presents results from a study that investigated the effectiveness of active, in-class programming assessment. The study was conducted in an introductory programming course with 93 undergraduate students at a mid-size, public university in the western United States. Three different assessment types were tested: collaborative, cooperative, and individual type assessments. A collaborative assessment is equivalent to pair programming. Cooperative assessments are partner quizzes where students must write their own code and are assessed individually, but may collaborative as much or as little as they like with their partner. Student performance was measured under multiple conditions including type of assessment and partner's active learning preference and factors like GPA, time in the semester, and section were controlled for. The results show that students perform better on both collaborative and cooperative type assessment than they do on individual type assessments. Also, the results show that students perform similarly on collaborative and cooperative assessments, which provides a nice alternative to pair programming for educators. Lastly, results show that most students prefer collaborative assessments over cooperative or individual. The majority of students prefer partner assessment to individual assessment.