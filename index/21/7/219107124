With distinct privacy protection advantages, federated recommendation is becoming increasingly feasible to store data locally in devices and federally train recommender models. However, previous work on federated recommender systems does not take full account of the limitations of storage, RAM, energy and communication bandwidth in the mobile environment. Their model scales are too big to run easily in mobile devices. Moreover, existing federated recommenders need to fine-tune recommendation models in each device, which makes them hard to effectively exploit collaborative filtering (CF) information among users/devices. Our goal in this paper is to design a novel federated learning framework to rating prediction (RP) for this environment that operates on par with state-of-the-art fully centralized RP methods. To this end, we introduce a novel federated matrix factorization (MF) framework, named meta matrix factorization (MetaMF), that is able to generate private item embeddings and RP models with a meta network. Given a user, we first obtain a collaborative vector by collecting useful information with a collaborative memory (CM) module. Then, we employ a meta recommender (MR) module to generate private item embeddings and a RP model based on the collaborative vector in the server. To address the challenge of generating a large number of high-dimensional item embeddings, we devise a rise-dimensional generation (RG) strategy that first generates a low-dimensional item embedding matrix and a rise-dimensional matrix, and then multiply them to obtain high-dimensional embeddings. Finally, we use the generated model to produce private RPs for the given user in her device. MetaMF shows a high capacity even with a small RP model, which can adapt to those limitations in the mobile environment. We conduct extensive experiments on four benchmark datasets to compare MetaMF with existing MF methods and find MetaMF can achieve competitive performance. Moreover, we find MetaMF achieves higher RP performance over existing federated methods by better exploiting CF among users/devices.