Weakly-hard real-time requirements for software tasks or network tasks are an adequate choice, if the system functionality is robust enough to tolerate a few deadline misses in transient overload phases. Weakly-hard real-time requirements can be formulated as (m, k)-constraints, i.e., no more than m deadline misses are allowed in a consecutive sequence of k jobs of a task. Existing formal analysis methods for weakly-hard real-time systems are so far limited to the scope of a single service-providing resource, only the recently published compositional analysis framework TypicalCPA addresses systems with multiple resources and partitioned scheduling. This paper substantially extends and improves TypicalCPA by addressing major open issues. Firstly, our improved version of TypicalCPA considers not only extra activation events of tasks as potential causes of transient overload but also long execution times of tasks which may exceptionally occur. Secondly, extra events and long execution times are now automatically and no longer manually identified as such. Finally, event propagation between components is also improved. We evaluate our proposed method in the context of an industrial case study.