The concurrent logic programming language “Vienna Parallel Logic” (VPL) [2], developed at our department, is expressly designed to integrate local systems (in particular, local database systems). Designed for the multidatabase arena, it aims to make the interoperation of legacy systems possible, providing at the same time high level programming and the declarative style associated with Prolog. Influenced by the Flex Transaction Model [1], the VPL system provides transactions on worldwide shared objects, termed communication variables, at the language level. These special variables can be written only once (rigorous single assignment property) by transactions so that all effects become visible at once, or none, This atomic-write mechanism allows simple implementation of global commitment protocols in heterogeneous systems, like MDBSS [3]. Indeterministic transaction specification, like in the Flex Model, is possible. If a task cannot be fulfilled by a local server, it can be replaced by executing it somewhere else (function replication). Subtransactions can be compensatable or non-compensatable. The first type can commit before the global transaction has terminated, thus releasing locks earlier and intermediate results can become visible. If the global transaction finally fails, or this subtransaction is not needed, it is automatically compensated, using VPLS backtracking mechanism. By allowing for programmed backtracking, non-2PC systems can be incorporated. Success and failure dependencies between sub-transactions can be expressly modeled with VPLS concurrency operators. By default, i.e., if no dependencies exist, VPLS parallel operators can be used to obtain maximal execution parallelism. VPL can serve as the query language and the transaction control language, A query given in terms of VPL is a runnable transaction and can be executed by our VPL runtime system,