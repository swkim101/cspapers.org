Automated assembly operations have traditionally been carried out using “hard automation”, where all parts to be handled during the operation are located at known positions with very high accuracy. Such automation solutions are often mechanically very expensive to implement and also the programming time can be substantial. Hence, hard automation is only suitable for large batch sizes. However, with the upcoming programming paradigms based on joining preprogrammed subtasks (skills) to a complete solution, the programming time can be shortened significantly. Skills are subtasks with well defined interfaces in terms of pre- and postconditions. However, skills still rely on high accuracy as there is no methodology for handling the propagation of inaccuracies when combining the skills. Therefore, skills are typically only useful for hard automation situations. In cases with smaller batch sizes, the high accuracy property will have to be loosened to lower the costs on the hardware side. In this paper, we extend the skill interfaces with a unified formalism for how the skill propagates inaccuracies. The formalism includes how the inaccuracy propagation for a skill can be learned and how the learned propagations can be used to join the skills while also predicting how inaccuracies will propagate through the entire skill chain. We also briefly discuss the perspectives using the formalism to offline search for the most robust combinations of skills for the entire task.