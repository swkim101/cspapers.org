Design of programs to run on computers with vector processing capability requires redevelopment of many longestablished programming techniques. These vector oriented solutions are not limited to those few computers with special vector hardware. Current experiments indicate that the performance of a “scalar” computer with a high speed instruction cache and overlap, such as the CDC 7600, can be significantly improved when a program consists of a series of vector-like loops. (1) In the programming languages area, work in IIvectorizingll problems has included incorporation of vector extensions into languages and also the recognition of FORTRAN DO-loops which can be collapsed into vector instructions. Another area for attention is vector izing the compiler itself. This project was undertaken in 1972 by the language group at Lawrence Livermore Laboratory. The APL-$ TAR (2) compiLer project must actually be considered experimental in several different, but related, aspects. This paper will concentrate on the compilation of a program using vector instructions, but the other aspects of the project also enter into the discussion, and deserve a brief introduction. The high level of the CDC-STAR (3) instruction set poses a real challenge of providing a high level language which can offer a competitive alternative to programming directly in machine language. The similarity of APL (4) and the STAR instruction set made APL a natural candidate. However, the dynamic nature of APL, requiring a great deal of run-time overhead, was considered unacceptable. Instead of designing a new language, the choice was made to eliminate those aspects of APL which required the run-time overhead. This required limiting the domain of the operations to vector and scalar operands and adding a set of declarations to bind the scope, type, and maximum size of the variables in a program. There are really two problems: first to compile any language with the STAR as a target machine, and second to compile an APL subset, regardless of the target machine. Care was taken in selecting the APL subset to ensure that the resulting language was compatible with the APL-7600 interpreter (5, 6) so that the interpreter could be used to develop APLSTAR programs. Since the compiler was intended to run on the STAR, the next question to be answered was what language to use to develop the compiler. Again, APL seemed like the best choice, because of the availability of the interpreter. The APL-STAR compiler is written in APL-STAR so that an eventual bootstrap to the STAR would be possible. The choice of APL posed yet another question which was explored as the project progressed: is APL a suitable language for a large non-numeric problem such as compiler writing?