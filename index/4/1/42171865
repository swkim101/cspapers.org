The history of programming languages shows a continuous search for new composition mechanisms to find better ways for structuring increasingly complex software systems into modules that can be developed and reused independently. Composition mechanisms can address various types of dependencies among modules, e.g., inheritance, delegation, aggregation, design patterns, contracts, explicit protocols, or domain-specific compositions.
 However, most languages adopt a fixed set of composition mechanisms, usually with explicit notation and predefined semantics. In case a language does not provide any mechanisms with the desired compositional behavior, programmers may need to write workarounds or introduce the new composition mechanism through macros, libraries, frameworks or language extensions.
 This workshop intends to stimulate research in programming languages and software development by exploring the notion that today's languages with their limited set of composition mechanisms is insufficient. Instead we should allow compositions that support more flexibility, adopt a wide variety of compositions, domain-specific and tailored compositions, or programmable compositions of various program artifacts.