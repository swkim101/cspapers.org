An interactive command language, with its underlying data, defines a command environment. In general a command environment supports a number of commands which once issued perform non-interactively, and which when finished leave the old command environment in control. It also supports some special commands which move to other command environments, after which commands are interpreted according to a different set of rules.
 The usefulness of a command environment can be extended by programming it, i.e. by dynamically constructing and conditionally executing sequences of its commands; but, unlike a programming language, a command language does not usually contain any general-purpose variables or means for conditional execution. These facilities can however be provided by a command control language, which makes it possible to construct sequences or commands to be issued to the currently active command environment from a program.
 A command control language is described, and the usefulness, limitations and repercussions of command language programming are discussed.