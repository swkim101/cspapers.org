XSB is a logic-based programming system that can serve as an efficient immemory Deductive Database (DDB) engine. XSB fundamentally extends the standard functionality of Prolog to include implementations of SLG resolution (tabling or memoing), and of HiLog. Perhaps the most significant difference between the XSB implementation and conventional DDB implementations lies in XSB’S use of SLG to extend tuple-ata-time evaluation with bottom-up declarativity. This strategy can give XSB an advantage over other DDBs in object-oriented applications, where information can be kept in complex terms in addition to being distributed across many relations. SLG resolution is useful for recursive query evaluation, allowing programs to terminate correctly in many cases where Prolog’s SLD resolution does not. In particular, SLG computes all Datalog programs finitely with polynomial data complexity. SLG also provides a solution to the practical problem of Prolog’s tendency to redundantly recompute subcomputations. For these reasons, users interested in memory-resident DDBs, Parsing, and Program Analysis applications may benefit from XSB. XSB’S SLG implementation: