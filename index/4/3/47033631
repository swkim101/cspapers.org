Suppose that each member of a set <i>A</i> of applicants ranks a subset of a set <i>P</i> of posts in an order of preference, possibly involving ties. A <i>matching</i> is a set of (applicant, post) pairs such that each applicant and each post appears in at most one pair. A <i>greedy</i> matching is one in which the maximum possible number of applicants are matched to their first choice post, and subject to that condition, the maximum possible number are matched to their second choice post, and so on. This is a relevant concept in any practical matching situation and it was first studied by Irving [8].We define the bipartite graph <i>G</i> = (<i>A U P,ε</i>), where ε consists of all pairs (<i>a, p</i>) such that post <i>p</i> appears in the preference list of applicant <i>a.</i> Each edge (<i>a, p</i>) has a rank <i>i</i>, which means that post <i>p</i> is an <i>i</i>th choice for applicant <i>a.</i> The traditional solution of computing a greedy matching in <i>G</i> would be to use the Hungarian algorithm to compute a maximum weight matching by assigning a suitably steeply decreasing sequence of weights to the edges. This would result in an algorithm with worst case running time <i>rn</i>(<i>m</i> + <i>n</i> log <i>n</i>) and the space requirement Θ(<i>rm</i>), where <i>n</i> is the number of vertices, <i>m</i> is the number of edges and <i>r</i> is the largest rank of an edge.Here, we describe two algorithms to compute a greedy matching that improve upon this algorithm. We give a combinatorial algorithm with running time <i>O</i>(min(<i>n</i> + <i>C,C</i>√<i>n</i>)<i>m</i>), where <i>C</i> ≤ <i>r</i> is the maximal rank of an edge used in a greedy matching. This algorithm works in phases and uses the maximum cardinality matching algorithm. We also give an <i>O</i>(<i>Cnm</i>) algorithm that tackles the problem of large edge weights introduced by the Hungarian algorithm. This algorithm uses scaling and works in phases. The space requirement of both these algorithms is <i>O</i>(<i>m</i>).