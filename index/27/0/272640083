Context-free language reachability (CFL-reachability) is a fundamental formulation for program analysis with many applications. CFL-reachability analysis is computationally expensive, with a slightly subcubic time complexity concerning the number of nodes in the input graph. This paper proposes staged solving: a new perspective on solving CFL-reachability. Our key observation is that the context-free grammar (CFG) of a CFL-based program analysis can be decomposed into (1) a smaller CFG, L , for matching parentheses, such as procedure calls/returns, field stores/loads, and (2) a regular grammar, R , capturing control/data flows. Instead of solving these two parts monolithically (as in standard algorithms), staged solving solves L -reachability and R -reachability in two distinct stages. In practice, L -reachability, though still context-free, involves only a small subset of edges, while R -reachability can be computed efficiently with close to quadratic complexity relative to the node size of the input graph. We implement our staged CFL-reachability solver, S tg , and evaluate it using two clients: context-sensitive value-flow analysis and field-sensitive alias analysis. The empirical results demonstrate that Stg achieves speedups of 861.59x and 4.1x for value-flow analysis and alias analysis on average, respectively, over the standard subcubic algorithm. Moreover, we also showcase that staged solving can help to significantly improve the performance of two state-of-the-art solvers, Pocr and Pearl , by 74.82x (1.78x) and 37.66x (1.7x) for value-flow (alias