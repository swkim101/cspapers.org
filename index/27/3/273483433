Retry—the re-execution of a task on failure—is a common mechanism to enable resilient software systems. Yet, despite its commonality and long history, retry remains difficult to implement and test. Guided by our study of real-world retry issues, we propose a novel suite of static and dynamic techniques to detect retry problems in software. We find that the ad-hoc nature of retry implementation in software systems poses challenges for traditional program analysis but can be well handled by large language models; we also find that careful repurposing existing unit tests can, along with fault injection, expose various types of retry problems.