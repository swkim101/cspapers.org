Users who have worked with just one or two pieces of application software on a computer system are often faced with the need to use a new piece of software on the same system. Consistency between program interfaces is intended to make the new program easier to learn in this situation, but how “consistency” should be defined is not always clear. We present a model of analogical reasoning that describes how users rely on interface consistency to induce correct actions in a new situation. Versions of the model are implemented in ACT-R and Soar. The model yields a clearer and more principled understanding of design guidelines that recommend interface consistency.