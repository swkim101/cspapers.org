Introduction Software development involves creating various arti-facts at different levels of abstraction and establishing relationships between them is essential. Traceability link recovery (TLR) automates this process, enhancing software quality by aiding tasks like maintenance and evolution. However, automating TLR is challenging due to semantic gaps resulting from different levels of abstraction. While automated TLR approaches exist for requirements and code, architecture documentation lacks tailored solutions, hindering the preservation of architecture knowledge and design decisions. Methods This paper presents our approach TransArC for TLR between architecture documentation and code, using component-based architecture models as intermediate artifacts to bridge the semantic gap. We create transitive trace links by combining the existing approach ArDoCo for linking architecture documentation to models with our novel approach ArCoTL for linking architecture models to code. Results We evaluate our approaches with five open-source projects, comparing our results to baseline approaches. The model-to-code TLR approach achieves an average $\mathrm{F}_{1}$ -score of 0.98, while the documentation-to-code TLR approach achieves a promising average $\mathrm{F}_{1}$-score of 0.82, significantly outperforming baselines. Conclusion Combining two specialized approaches with an interme-diate artifact shows promise for bridging the semantic gap. In future research, we will explore further possibilities for such transitive approaches.