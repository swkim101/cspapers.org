Recent shell-script parallelization systems enjoy mostly automated speedups by parallelizing scripts ahead-of-time. Unfor-tunately, such static parallelization is hampered by dynamic behavior pervasive in shell scripts— e.g. , variable expansion and command substitution—which often requires reasoning about the current state of the shell and ﬁlesystem. We present a just-in-time (JIT) shell-script compiler, P A S H JIT, that intermixes evaluation and parallelization during a script’s run-time execution. JIT parallelization collects runtime information about the system’s state, but must not alter the behavior of the original script and must maintain minimal overhead. P A S H -JIT addresses these challenges by (1) using a dynamic interposition framework, guided by a static preprocessing pass, (2) developing runtime support for transparently pausing and resuming shell execution; and (3) operating as a stateful server, communicating with the current shell by passing messages—all without requiring modiﬁcations to the system’s underlying shell interpreter. When run on a wide variety of benchmarks, including the POSIX shell test suite, P A S H -JIT (1) does not break scripts, even in cases that are likely to break shells in widespread use; and (2) offers signiﬁcant speedups, whenever parallelization is possible. These results show that P A S H -JIT can be used as a drop-in replacement for any non-interactive shell use, providing signiﬁcant speedups without any risk of breakage.