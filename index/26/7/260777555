Shufﬂes are used in electronic voting in much the same way physical ballot boxes are used in paper systems: (encrypted) ballots are input into the shufﬂe and (encrypted) ballots are output in a random order, thereby breaking the link between voter identities and ballots. To guarantee that no ballots are added, omitted or altered, zero-knowledge proofs, called proofs of shufﬂe, are used to provide publicly veriﬁable transcripts that prove that the outputs are a re-encrypted per-mutation of the inputs. The most prominent proofs of shufﬂe, in practice, are those due to Terelius and Wikström (TW), and Bayer and Groth (BG). TW is simpler whereas BG is more efﬁcient, both in terms of bandwidth and computation. Security for the simpler (TW) proof of shufﬂe has already been machine-checked but several prominent vendors insist on using the more complicated BG proof of shufﬂe. Here, we machine-check the security of the Bayer-Groth proof of shufﬂe via the Coq proof-assistant. We then extract the veri-ﬁer (software) required to check the transcripts produced by Bayer-Groth implementations and use it to check transcripts from the Swiss Post evoting system under development for national elections in Switzerland.