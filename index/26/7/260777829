A recent trend for assessing the security of an embedded systemâ€™s firmware is rehosting , the art of running the firmware in a virtualized environment, rather than on the original hardware platform. One significant use case for firmware rehosting is fuzzing to dynamically uncover security vulnerabilities. However, state-of-the-art implementations suffer from high emulator-induced overhead, leading to less-than-optimal execution speeds. Instead of emulation, we propose near-native rehosting: running embedded firmware as a Linux userspace process on a high-performance system that shares the instruction set family with the targeted device. We implement this approach with S AFIRE F UZZ , a throughput-optimized rehost-ing and fuzzing framework for ARM Cortex-M firmware. S AFIRE F UZZ takes monolithic binary-only firmware images and uses high-level emulation (HLE) and dynamic binary rewriting to run them on far more powerful hardware with low overhead. By replicating experiments of HALucinator, the state-of-the-art HLE-based rehosting system for binary firmware, we show that S AFIRE F UZZ can provide a 690x throughput increase on average during 24-hour fuzzing cam-paigns while covering up to 30% more basic blocks.