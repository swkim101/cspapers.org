Modern multi-threaded software systems commonly leverage locks to prevent concurrency bugs. Neverthe-less, due to the complexity of writing the correct concurrent code, using locks itself is often error-prone. In this work, we investigate a general variety of lock mis-uses. Our characteristic study of existing CVE IDs reveals that lock misuses can inﬂict concurrency errors and even severe security issues, such as denial-of-service and memory corruption. To alleviate the threats, we present a practical static analysis framework, namely L OCK - PICK , which consists of two core stages to effectively detect misused locks. More speciﬁcally, L OCKPICK ﬁrst conducts path-sensitive typestate analysis, tracking lock-state transitions and interactions to identify sequential typestate violations. Guided by the preceding results, L OCKPICK then performs concurrency-aware detection to pinpoint various lock misuse errors, effectively reasoning about the thread interleavings of interest. The results are encouraging — we have used L OCKPICK to uncover 203 unique and conﬁrmed lock misuses across a broad spectrum of impactful open-source systems, such as OpenSSL, the Linux kernel, PostgreSQL, MariaDB, FFmpeg, Apache HTTPd, and FreeBSD. Three exciting results are that those conﬁrmed lock misuses are long-latent, hiding for 7.4 years on average; in total, 16 CVE IDs have been assigned for the severe errors uncovered; and L OCKPICK can ﬂag many real bugs missed by the previous tools with signiﬁcantly fewer false positives.