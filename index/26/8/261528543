Onward! focuses on everything to do with programming and software: including processes, methods, languages, communities, and applications. Onward! is more radical, more visionary, and more open than other conferences to not yet well-proven but well-argued ideas. Onward! welcomes different ways of thinking about, approaching, and reporting on programming language and software engineering research. 
 
Onward! is looking for grand visions and new paradigms that could make a big difference in how we will build software in the future. But Onward! is not looking for research-as-usual papers -- conferences like OOPSLA are the place for that. Those conferences require rigorous validation such as theorems or empirical experiments, which are necessary for scientific progress, but which typically preclude discussion of early-stage ideas. Onward! papers must of course also supply some degree of validation, because mere speculation is not a good basis for progress. But Onward! accepts compelling arguments, exploratory implementations, and substantial examples. The use of worked-out examples to support new ideas is strongly encouraged. 
 
We accepted 16 out of 35 research paper submissions and 6 out of 11 essays submissions by following a two-phase process with shepherding. This process allowed the program committees to offer help to the authors of papers deemed potentially acceptable by requesting them to improve specific aspects of the papers in keeping with the assessment criteria and the nature of Onward!. For example, the following represent some core improvement suggestions: Clarity of presentation and overall writing improvements to make the work more accessible, making the presentation of the technical ideas crisper or more concrete, making the argument sharper and more compelling, or expanding or refining the ideas based on new input from the reviewers. Authors were given about two months to perform revisions, after which a second submission occurred. Six research papers and two essays were subjected to shepherding. All of them reflected the revision requests of the program committees and so were accepted. 
 
Our keynote speaker is Peter Norvig. A distinguished researcher and author of books and software as well as a trenchant commentator, Peter helped launch the MOOC revolution. In his talk he will explore the use of machine learning throughout the software space.