Knox is a new framework that enables developers to build hardware security modules (HSMs) with high assurance through formal veriﬁcation. The goal is to rule out all hardware bugs, software bugs, and timing side channels. Knox’s approach is to relate an implementation’s wire-level behavior to a functional speciﬁcation stated in terms of method calls and return values with a new deﬁnition called information-preserving reﬁnement (IPR) . This deﬁnition captures the notion that the HSM implements its functional speciﬁcation, and that it leaks no additional information through its wire-level behavior. The Knox framework provides support for writing speciﬁcations, importing HSM implementations written in Verilog and C code, and proving IPR using a combination of lightweight annotations and interactive proofs. To evaluate the IPR deﬁnition and the Knox framework, we veriﬁed three simple HSMs, including an RFC 6238-compliant TOTP token. The TOTP token is written in 2950 lines of Verilog and 360 lines of C and assembly. Its behavior is captured in a succinct speciﬁcation: aside from the deﬁnition of the TOTP algorithm, the spec is only 10 lines of code. In all three case studies, veriﬁcation covers entire hardware and software stacks and rules out hardware/software bugs and timing side channels.