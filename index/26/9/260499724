Graphs are general data structures that can represent information from a variety of domains (social, biomedical, online transactions, and many more). Graph Neural Networks (GNNs) are quickly becoming the de-facto Machine Learning models for learning from Graph data and hereby infer missing information, such as, predicting labels of nodes or imputing missing edges. In this tutorial we'll cover essential applications of Graph Machine Learning using TensorFlow GNN1[12], a Python framework that extends TensorFlow [1] with Graph Neural Networks (GNNs): models that leverage graph-structured data. TF-GNN is motivated and informed by years of applying graph representation learning to practical problems at Google [2-8, 10, 11, 13-19, 22-29]. In particular, TF-GNN focuses on the representation of heterogeneous graph data and supports the explicit modeling of an arbitrary number of relationship (edge) types between an arbitrary number of entity (node) types. These relationships can be used in combination with other TensorFlow components, e.g., a TF-GNN model might connect representations from a language model to those of a vision model and fine-tune these features for a node classification task. Many teams at Google run TF-GNN models in production. We believe this to be a direct consequence of TF-GNN's multi-layered API which is designed for accessibility to developers (regardless of their prior experience with machine learning).