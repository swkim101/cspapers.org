We define and design succinct indexes for several abstract data types (ADTs). The concept is to design auxiliary data structures that occupy asymptotically less space than the information-theoretic lower bound on the space required to encode the given data, and support an extended set of operations using the basic operators defined in the ADT. As opposed to succinct (integrated data/index) encodings, the main advantage of succinct indexes is that we make assumptions only on the ADT through which the main data is accessed, rather than the way in which the data is encoded. This allows more freedom in the encoding of the main data. In this paper, we present succinct indexes for various data types, namely strings, binary relations and multi-labeled trees. Given the support for the interface of the ADTs of these data Types, we can support various useful operations efficiently by constructing succinct indexes for them. When the operators in the ADTs are supported in constant time, our results are comparable to previous results, while allowing more flexibility in the encoding of the given data.
 Using our techniques, we design a succinct encoding that represents a string of length <i>n</i> over an alphabet of size σ using <i>nH<inf>k</inf></i> + <i>o</i>(<i>n</i> lg σ) bits<sup>1</sup> to support access/rank/select operations in <i>o</i>((lg lg σ)<sup>3</sup>) time. We also design a succinct text index using <i>nH<inf>k</inf></i> + <i>o</i>(<i>n</i> lg σ) bits that supports pattern matching queries in <i>O</i>(<i>m</i> lg lg σ + occ lg<sup>1+ε</sup> <i>n</i>lg lg σ) time, for a given pattern of length <i>m</i>. Previous results on these two problems either have a lg σ factor instead of lg lg σ in terms of running time, or are not compressible.