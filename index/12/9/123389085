When several transactions (processes) read and write items in a database, the question of con­ sistency of the database arises. Consistency is maintained if transactions are serial: all actions of a tran­ saction execute completely before the actions of the next transaction begin. A particular history of interleaved actions belonging to several transactions is correct if it is equivalent to a serial history. We provide a natural framework for studying serializability that encompasses models that have ~en con­ sidered in the literature. A history is represented by a dag in which there is a vertex for each instantaneous value taken by an item in the database. The main tool for determining serializability are "exclusionrules" which determine implied orderings between vertices. For example, a vertex that uses a value must be serial­ ized before the value is overwritten. An exclusion closure ---.; the result of applying the rules as long as possible - can be constructed in time cubic in the number of vertices. Since determining serializability is NP-complete, exclusion closures cannot always decide serializability, but useful sufficient conditions can be proven. Exclusion closures allow the largest known classes of polynomially serializable histories to be properly extended. When studying serializability it is not necessary to work solely with thedag containing instan­ taneous values of all items. Three abstractions of the dag are presented which correspond to models of transactions and to "version graphs" in the literature. Since serializability of histories is known to be NP-complete, subclasses of serializable histories have been· studied. One such class consists of histories serializable in a strict sense: transactions that are already in serial in a history must remain in the same relative order. When there are no useless actions in a history, strict serializability can be determined in polynomial time. If useless actions are permitted then strict serializability becomes NP-complete. The above results apply to two step transac­ tions in which there is a ·read step followed by a write step. Each step involves some subset of the items in the database. With multistep transactions strict serializability is NP-complete even if there are no useless actions.