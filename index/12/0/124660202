We consider the Traveling Salesman Problem with Neighborhoods (TSPN) in doubling metrics. The goal is to find the shortest tour that visits each of a given collection of subsets (regions or neighborhoods) in the underlying metric space. We give a randomized polynomial-time approximation scheme (PTAS) when the regions are fat weakly disjoint. This notion of regions was first defined when a QPTAS was given for the problem in SODA 2010 (Chan and Elbassioni 2010). The regions are partitioned into a constant number of groups, where in each group, regions should have a common upper bound on their diameters and each region designates one point within it such that these points are far away from one another. We combine the techniques in the previous work, together with the recent PTAS for TSP (STOC 2012: Bartal, Gottlieb, and Krauthgamer 2012) to achieve a PTAS for TSPN. However, several nontrivial technical hurdles need to be overcome for applying the PTAS framework to TSPN: (1) Heuristic to detect sparse instances. In the STOC 2012 paper, a minimum spanning tree heuristic is used to estimate the portion of an optimal tour within some ball. However, for TSPN, it is not known if an optimal tour would use points inside the ball to visit regions that intersect the ball. (2) Partially cut regions in the recursion. After a sparse ball is identified by the heuristic, the PTAS framework for TSP uses dynamic programming to solve the instance restricted to the sparse ball and recurse on the remaining instance. However, for TSPN, it is an important issue to decide whether each region partially intersecting the sparse ball should be solved in the sparse instance or considered in the remaining instance. Surprisingly, we show that both issues can be resolved by conservatively making the ball in question responsible for all intersecting regions. In particular, a sophisticated charging argument is needed to bound the cost of combining tours in the recursion. Moreover, more refined procedures are used to improve the dependence of the running time on the doubling dimension k from the previous exp[(O(1))k2] (even for just TSP) to exp[2O(k log k)].