Because of the increasing complexity of the role of the design engineer, in the design of digital systems, the need has arisen for a behavioral modeling technique which can be accurately controlled by the designer, with minimal effort, while remaining relatively error free. Explored here will be a technique for behavioral modeling of digital system designs which is in variance with the more traditional approaches.
 It will be shown how the design engineer will be basically responsible for the construction of a model, by use of a design language, and yet be relatively unencumbered by the myriad of programming restrictions and conventions normally imposed on those who generate simulation models. With this technique it becomes possible for the design engineer to be reasonably familiar with the construction of a model while, at the same time, the need for highly skilled programmers is greatly reduced. The more intimately familiar the design engineer is with a model, the more gainful can be the use of that model for testing the algorithms of the design.
 There will be discussion on the specification of models by use of flowcharts, enabling the design engineer to maintain a current pictorial representation of his design. The problems of documenting ones design, and how this method helps to provide accurate documentation, will be discussed.
 Fragmentation of an algorithm within a model will be discussed and it will be shown how portions of an algorithm can be modified without concern of adversely affecting any other portions of the algorithm.
 Cyclic aspects of simulators will be discussed and correspondence will be made between simulator time intervals and actual hardware time intervals.
 A technique will be discussed for achieving the effect of parallelism in logic execution while at the same time eliminating the concern of the sequential nature of programs. The problem of signal ordering will be discussed along with a method for insuring proper signal ordering.
 The various types of facilities available will be described and their correspondence to actual logic functions will be discussed.