lNTRODUCTfON Our department of computer science has been wrestling with a difficult problem-how to graduate students who are ready to develop software in today's complex and sophisticated programming environments. The department has always prided itself on covering the fundamentals of computer science while preparing students who shine in their fwst programming job. However, in recent years our curriculum did not keep pace with changes in computing-changes from time-shared centralized systems to distributed desktop computers and from character based to graphical user interfaces. The chief factors contributing to this problem were a lack of up-to-date hardware, wide differences in philosophy within the department, lack of interest in teaching certain courses, and an already crowded curriculum. After our most recent accreditation review, we could no longer ignore our shortcomings. While praising the qualifications of our faculty and the fundamental strength of our curriculum, the review lamented the antiquated state of our hardware. For the most part faculty offices and student labs were equipped with dumb terminals and IBM XTs, and the manner in which we imparted the skills of software development reflected this fact. The industry member of the review committee told us informally that he would be reluctant to hire any of our graduates. They lacked software development expertise that he deemed essential. Clearly, we had been neglecting our responsibility to the students. Since then the university has upgraded our hardware. We now have the facilities to teach prevailing software development methods and have reaffirmed our commitment to doing so. With this in mind we have made several minor changes to our curriculum. For instance, students now use X-Windows in a graphics class and Microsoft Access as a prototyping tool in an information systems class. We have also made a major change. We have added a year long sequence on software engineering for juniors and seniors. This paper describes the sequence. Hopefully, others will Permission to co y wfthout fee all or part of this material is t! granted provided t at the copies are not made or distributed for direct commercial advantage, the ACM copyright notice and the title of the publication and Its date appear, and notice is given that copying is by permission of the Association of Computing Machtnery. To copy otherwise, or to republish, requires a fQe andors ecific permission. benefit from our experience. (For a discussion of the overall place and importance of software engineering in â€¦