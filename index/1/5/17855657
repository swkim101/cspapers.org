The current thrust in undergraduate computer science education is to emphasize the laboratory nature of the discipline, but little has been done to introduce laboratories at the graduate level. Teaching techniques for the formal semantics of programming languages still rely on pencil and paper activities. For the last two years at New Mexico State University we have tried to enliven this approach by introducing some laboratory activities. We still cover the same topics: attribute grammars, two level grammars, denotational semantics, axiomatic semantics, and programming languages as metalanguages. The laborato~ activities are based on logic programming in Prolog, including definite clause grammars, the Synthesizer Generator development system, and functional programming in Lisp. Two mini-languages, Pam and Eva, are used for most lab activities; these languages come from the course text: Formal Specification of Programming Languages: A Panoramic Primer by Frank Pagan [1981]. The lab activities can be adapted to other mini-languages or to subsets of real languages. Most students reacted positively to practical applications of theoretical concepts; however, a minority of students did not like lab activities in a graduate class. Students performed as well on written exams covering theoretical concepts as previous classes that spent their time studying only the theory. A Course on the Formal Semantics of Programming Languages Our first graduate level course in programming language concepts deals with techniques for formally Permission to copy without fee all or part of this material is granted provided that the copies are not made or distributed for direct commercial advantage, the ACM copyright notice and the title of the publication and ite date appear, and notice is given that copying ie by permission of the Association for Computing Machinery. To copy otherwiee, or to republish, requires a fee and/or specific permission. 01991 ACM 0-89791 -377 -919110002-0162 . ..S1 .50 specifying programming language semantics. It assumes a senior level programming language structure course as a prerequisite. Representative texts for this prerequisite course would be Sethi [1989] or Watt [1990]. The major topics covered in the formal semantics course are programming languages as metalanguages, attribute grammars, two level (or W) grammars, denotational semantics, and axiomatic semantics. Some instructors include the Vienna Definition Language (VDL), but it was not involved in the study reported here. The text is Forma/ Specification of Programming Languages: A Panoramic Primer by Frank Pagan [1981]. The material on denotational semantics is supplemented from other sources, such as Schmidt’s text [1986], as is the material on axiomatic semantics, using references such as Gumb’s text [1989]. Other graduate courses in programming languages include a compiler course and a “Topics in Programming Languages” seminar. In the past the formal semantics class had been a paper and pencil course. Student grades were based on written homework, a presentation from the current literature, and examinations. The homework often involved the tedious drawing of elaborate parse trees where the learning experience quickly turned to drudgery. Although the materials are theoretically important, students failed to see any practical applications of the concepts presented. There was also little connection to the graduate level course on compiler design. These deficiencies motivated the introduction of a laboratory component for the formal semantics class. The theory can guide the laboratory activities, but the lab activities may not directly help students learn the theoretical formalisms. Therefore, it is important to insure the lab activities do not interfer with learning the theory. Of course, the labs contribute to the student’s total learning experience in many ways: the labs expose them to the