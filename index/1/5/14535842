Traditionally, instruction sets have included separate instructions for manipulating different data types, such as integers and real numbers. A long-discussed but seldomimplemented alternative has been tagging, where the type information is stored adjacent to the data itself, rather than being inferred from the instructions. Over the years, several advantages have been claimed for tagging, including improving program reliability, saving memory, and facilitating a high-level language architecture. For computers that are not specifically oriented toward dynamically typed languages, we show that tagging fails to achieve these advantages completely, and that most of ' them can be better achieved by extensions of other mechanisms. I. I n t r o d u c t i o n One of the several innovative features of the Burroughs B5000 system announced in 1961 [1] was the introduction of " tags" at the architectural level. In that system tags served two basic functions, as a means of typing the contents of memory locations and as a protection device. Iliffe, who contributed much to the original Burroughs design, proposed tagging for his Basic Language Machine [2] and his Pointer Number Machine [3] . The Rice Research Computer [4] was built with tagging. Myers's Sward design [5] was also tagged, as were proposals by one of us [61-[8], Luniewski [9], and Dennis [10 I. However, it was not until the IBM System 38 [11] and the Symbolics 3600 [12], a machine designed explicitly for Lisp, that tagging was again employed by a commercial computer