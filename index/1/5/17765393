On the basis of its optimal asymptotic time complexity, AC-4 is often considered the best algorithm for establishing arc consistency in constraint satisfaction problems (CSPs). In the present work, AC3 was found to be much more efficient than AC-4, for CSPs with a variety of features. (Variable pairs were in lexical order, and in AC-3 they were added to the end of the list of pairs.) This is supported by arguments for the superiority of AC-3 over most of the range of constraint satisfiabilities and for the unlikelihood of conditions leading to worst-case performance. The efficiency of AC-4 is affected by the order of variable testing in Phase 1 ('setting up' phase); performance in this phase can thus be enhanced, and this establishes initial conditions for Phase 2 that improve its performance. But, since AC-3 is improved by the same orderings, it still outperforms AC-4 in most cases. 1 I n t r oduc t i on Local consistency techniques can be used with search to improve the efficiency of algorithms that solve constraint satisfaction problems (CSPs). They have also proven useful in standalone implementations, because they can yield solution sets or highly reduced problems [DeVille and Van Hentenryck, 1991]. The most common techniques establish arc consistency, i.e., pairwise consistency for all variables in the problem or for a selected subset. This paper is concerned with algorithms that establish arc consistency for the entire problem. AC-3 was introduced by Mackworth [1977] as a generalization and simplification of the earlier "filtering" algorithm of Ullman [1966] and Waltz [1975], now known as AC-2. Mackworth and Freuder [1985] showed that this algorithm has a worst case complexity bound that is significantly better than that of the simple strategy of scanning all pairs until no inconsistencies are found. Subsequently, Mohr and Henderson [1986] introduced AC-4 and showed that it has an even better worst case complexity, that is optimal in the general case. This historical development has led to the impression that at each stage an algorithm was derived that was generally superior to previous algorithms in terms of efficiency [e.g., Perlin, 1991]. But since the main results are in terms of worst case asymptotic behavior, it is not clear that AC-4, the best algorithm in this sense, is actually better for a T h i s material is based on work supported by the National Science Foundation under Grant No. IRI-9207633. given problem or even better on average. It is possible that, for classes of problems, either AC-3 or AC-4 is superior. This is suggested by Van Hentenryck's [1989] remark that AC-4 is better for some problems, AC-3 for others. A related problem concerns the order in which variable domains are checked for consistency. It has been found that certain ordering heuristics can yield marked improvement in the performance of AC-3 [Wallace and Freuder, 1992]. For some problems, this might tip the scales in favor of this algorithm. On the other hand, it has been claimed (in personid communications) that AC-4 is "order-independent". If this were true, and if AC-4 was better than AC-3 for a given problem, it would not be necessary in this case to consider such ordering at all. Here it is shown that both AC3 and AC-4 provide opportunities for ordering to be effective, so these heuristics are important regardless of the algorithm chosen. Section 2 describes the algorithms AC-3 and AC-4. Section 3 discusses average case performance under certain probabilistic assumptions. Section 4 gives results of tests of these algorithms on problems that differ with respect to key problem parameters, including random problems and reduced queens problems. Large problems with parameter values that yield very difficult problems were also tested. Section 5 considers problems that result in worst case performance by AC-3 from a theoretical and empirical standpoint. Section 6 discusses effects of ordering the Phase 1 list of variable pairs in AC-4, and presents empirical results for the problems of Section 4. Section 7 discusses problem classes in which the worst case complexity of arc consistency is less than O(ed). Section 8 presents conclusions. 2 Description of the Algorithms A binary constraint satisfaction problem involves a set of n variables, vi, each with a domain of values, di, that it can assume. In addition, the problem is subject to some number of binary constraints, Cij. each a subset of the Cartesian product of two domains, di X dj.. A binary constraint specifies which pairs of values can be simultaneously assumed by the pair of variables. A CSP is associated with a constraint graph, where nodes represent variables and arcs or edges represent constraints. AC-3 involves a series of tests between pairs of constrained variables, vi and v.. Specifically, values in di are checked against the constraint between vi and vj to see if they are consistent with at least one value in dj; unsupported values are deleted. The AC-3 algorithm is shown in Figure 1. Al l ordered pairs of constrained variables