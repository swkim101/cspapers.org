Technical debt is an unavoidable part of software development in today's fast-paced market, but it is ignored by many of the people who should care about it most. In large systems, a portion of the accumulating technical debt is just "sloppy design" caused by schedule pressure and other project forces. But the most important part of technical debt is directly related to project size and data complexity. How much technical debt is about large development teams and geographical distribution? How do current "big data" techniques (Hadoop, NoSQL, parallel algorithms, MapReduce) relate to technical debt issues? This workshop explored strategies for understanding the impact of technical debt. If we believe that technical debt is an important issue in long-term software product development, do we have ways to keep the technical debt from causing development gridlock?