the information in the two components is duplicated In fact, he can omit the generative component entirely and put everything in the cognitive component, though at some cost in resource consumption At run time, no f i rm commitment is made by the cognitive component to a particular choice of surface structure of an ambiguous sentence, allowing the generative component to pick and choose when the cognitive component has not had enough information to decide At present L I N C O L users are encouraged to try to make their cognitive component intelligent enough to make the right decision, and so far no L I N C O L programs have attempted disambiguation in the generative component. One would expect this to change as people attempt more sophisticated programs. A L I N C O L program is a set of rules each having three components: a context-free rule, a cognitive function and a generative function Their respective roles are as follows The CF rule specifies a general English construction, the cognitive component (or "critic") supplies the expertise about that construction and the generative component supplies the information about the target language that may be relevant to this English construction. (Our tacit assumption of English as the source language reflects L I N G O L ' s applications to date) It is fashionable these days to want to avoid alt reference to context-free grammars beyond warning students of computational linguistics that they are unfit for computer consumption as far as computational linguistics is concerned In L I N C O L , as in ATN's [Woods 1969], their role is dif ferent from that in, say, the Harvard Predictive Analyzer [Kuno 1965]. Instead of being used to encode all information about English, they form the basis of a pattern-directed non-deterministic programming language. Th i s strategy has several advantages (i) It allows the programmer to structure his program as a set of relatively self-contained modules, thereby decreasing the number of things he has to keep in his head at once when looking at a particular part of his program. ( i i ) It eliminates much of the testing-for-cases control structure the programmer would need in a non-pattern-driven