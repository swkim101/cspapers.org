Most object-oriented languages are strong on reusability or on strong-typing, but weak on concurrency. In response to this gap, we are developing <italic>Hybrid</italic>, an object-oriented language in which objects are the active entities. Objects in Hybrid are organized into <italic>domains</italic>, and concurrent executions into <italic>activities</italic>. All object communications are based on remote procedure-calls. Unstructured <italic>sends</italic> and <italic>accepts</italic> are forbidden. To this the mechanisms of <italic>delegation</italic> and <italic>delay queues</italic> are added to enable switching and triggering of activities. Concurrent subactivities and atomic actions provided for compactness and simplicity. We show how solutions to many important concurrent problems, such a pipelining, constraint management and “administration” can be compactly expressed using these mechanisms.