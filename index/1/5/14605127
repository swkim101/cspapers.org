Dataflow synchronous languages have attracted considerable interest in domains such as real-time control and hardware design. The potential benefits are promising: Discrete-time semantics and deterministic concurrency reduce the state-space of parallel designs, and the engineer's intuition of uniformly progressing physical time is clearly reflected. However, for deriving implementations, use of synchronous programs is currently limited to hardware synthesis, generation of non-distributed software, or deployment on time-triggered architectures.In this paper, it is shown how synchronous dataflow designs can be used for synthesizing distributed applications based on target architectures that do not provide a global time base by default. We propose a distribution method called "synchronization cascade" where the nodes' local clocks depend on each other in a tree-like manner. For evaluation of the method, we characterize some requirements for firm real-time applications, and evaluate our approach with respect to the postulated requirements.