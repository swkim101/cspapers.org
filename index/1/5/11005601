Previous approaches to supporting hypothetical queries have been “eager”: some representation of the hypothetical state (or the corresponding delta) is materialized, and query evaluation is filtered through that representation. This paper develops a framework for evaluating hypothetical queries using a “lazy” approach, or using a hybrid of eager and lazy approaches.
We focus on queries having the form “<italic>Q</italic> when {{<italic>U</italic>}}” where <italic>Q</italic> is a relational algebra query and <italic>U</italic> is an update expression. The value assigned to this query in state <italic>DB</italic> is the value that <italic>Q</italic> would return in the state resulting from executing <italic>U</italic> on <italic>DB</italic>. Nesting of the keyword when is permitted, and <italic>U</italic> may involve a sequence of several atomic updates.
We present an equational theory for queries involving when that can be used as a basis for optimization. This theory is very different from traditional rules for the relational algebra, because the semantics of when is unlike the semantics of the algebra operators. Our theory is based on the observation that hypothetical states can be represented as substitutions, similar to those arising in functional and logic programming. Furthermore, hypothetical queries of the form <italic>Q</italic> when {{<italic>U</italic>}} can be thought of as representing the <italic>suspended</italic> application of a substitution. Using the equational theory we develop an approach to optimizing the evaluation of hypothetical queries that uses deltas in the sense of Heraclitus, and permits a range of evaluation strategies from lazy to eager.