By-name subtyping (or user-defined subtyping) and structural subtyping each have their own strengths and weaknesses. By-name subtyping allows programmers to explicitly express design intent, and, when types are associated with run time tags, enables run-time "type" tests and external/multimethod dispatch. On the other hand, structural subtyping is flexible and compositional, allowing unanticipated reuse. To date, nearly all object-oriented languages fully support only one subtyping paradigm or the other.
 I propose a language that combines the key aspects of by-name and structural subtyping in a unified framework. The goal is to provide the flexibility of structural subtyping while still allowing static typechecking of external methods. The work offers a clean foundation for the designof future languages that enjoy the benefits of both by-name and structural subtyping.
 I also propose a language extension to Java that combines by-name and structural subtyping, and includes parametric polymorphism. The practical utility of this language will be illustrated through case studies that show that code written in the new language is more flexible and easier to modify than the original code.