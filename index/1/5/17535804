It is shown that Ketan Mulmuley * The University of Chicago feasibility of linear programming and network flow problems (rein-cost flow, max flow) cannot be decided efficiently in parallel, in a deterministic or randomized fashion, using finite-precision arithmetic (+, –, x ), comparison, indirect referencing and branching operations, but no bit manipulations. The lower bounds that are proved are robust in the sense that they provide some information about the difficulty of the problem in the vicinity of almost every input instance. The results suggest that geometric methods may be useful in the study of lower bound questions in the finite-precision setting, such as P ~ NC and P ~ RNC conjectures. We prove algebraic analogues and implications of these latter two conjectures. It is also proved that the analogues of the {NCi} and {RNCi} hierarchies in the finite-precision algebraic setting do not collapse. A robust lower bound is also shown for deciding solvability of homogeneous quadratic systems. 1 Definitions and results Linear programming and network problems, max-flow, are P-complete, and hence are not such as believed to be in NC. In this paper, we shall prove lower bounds for these problems in the algebraic model of computation [25]. It is a finite-precision model, unlike, say, the algebraic-computation-t ree model [1, 31, 33, 38]. This means the issue of bit lengths is not ignored. The model is a restricted form of the standard PRAM model (RAM model in the sequential setting), in which no operations for bit manipulations are provided. The model provides *Supported by Packard Fellowship. Permission to copy without fee all or part of this material is granted provided that the copies are not made or distributed for direct commercial advantage, the ACM copyright notice and the title of the publication and Its date appear, and notice is given that copying is by permission of the Association of Computing Machinery. To copy otherwise, or to republish, requires a fee ancilor specific permission. STOC 845/94 Montreal, Quebec, Canada (3 1994 ACM 0-89791 -663-8/94/0005..$3.50 the usual arithmetic (+, –, x), comparison (=, ~, <<), store, indirect referencing and branching operations. Processors communicate as in the PRAM model. Ea,ch memory location can hold an integer. A rational is represented in terms of its numerator and denominator, each of which can be accessed separately bv a rmocessor. (If we were to forbid separate access to tie ~umerator and denominator, the model would be far weaker.) Ftational operations, including division, can be simulated in terms of the available integer operations. The model does not provide integer division with rounding. Nevert heless, small roundings, in which the rounded quotient is guaranteed to have a small, say polylogarithmic, bit size, can be efficiently simulated using the available operations. Such roundings are used quite often, as in Tardos’ algorithm [35]. One can also simulate in the algebraic model operations for extracting approximate roots of polynomials using the existing fast parallel algorithms [2, 28] that lie in the algebraic model. Though no operation for bit extraction is provided in the algebraic model, it is possible to extract all bits of an l-bit operand using O(1) available operations and estimate the bit-length, within a factor of two, using O(log 1) operations. The model defined in [25] was nonuniform. A uniform version is obtained by imposing the standimd log-space uniformity requirement. We shall prove our lower bounds in the conservative unit cost model, in which each instruction is assigned unit cost regardless of the bit sizes of the operands. Since the actual cost of any instruction is Q(l), such 1Thk operation is actually missing in [25]. But it can be added without affecting anything in the paper, provided the memory pointer does not depend on the numeric data in the input. This is a realistic and natural restriction. For example, in the max-flow problem, using capacity of an edge as a memory pointer would be unnatural. The classification n of the input parameters into numeric and nonnumeric parameters is supposed to be a part of the input specification. ‘The only effect thk has in the algebraic model is that numeric parameters, or quantities dependent on them, cannot be used as memory pointers. A machine can easily enforce and check validity of memory pointers by maintaining valid-pointer and invalid-pointer tags (data types) with all operands that arise during the computation.