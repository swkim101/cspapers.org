Abstract We introduce the subtree max gap problem. Consider a rooted tree T with n leaves whose internal nodes have at least two children. Each leaf is associated with a real number. For each internal node v, let Av be the set of numbers associated with the leaves in the subtree rooted at v which are regarded as points on the x-axis. The subtree max gap problem is to compute the maximum distance (gap) between any two consecutive points of Av for every internal node v of T. Our algorithm for the subtree max gap problem follows a series of reductions to other combinatorial problems which are interesting on their own merit. The algorithm runs in O(log n) time using n processors on the concurrent-read exclusive-write parallel random access machine. The subtree max gap problem plays a central role in the parallel solution of the string covering problem. Recently, lliopoulos, et al. (1993, in "Proc. 26th Symposium in Theory of Computing," pp. 290-299) gave an O(n log n) time sequential algorithm for the string covering problem. Neither parallelizing the above sequential algorithm nor using known techniques from algorithms on strings seems to yield an efficient parallel algorithm for string covering. Our parallel algorithm thus follows a new approach, suing suffix trees and reducing the string covering problem to the subtree max gap problem. The algorithm runs in O(log n) time using n processors on the concurrent-read concurrent-write parallel random access machine, thereby matching the number of operations in lliopoulos, et al.