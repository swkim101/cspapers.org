This paper describes the basic principles and the architecture of a general host machine based upon lists processing. Current works in this field are dealing with conventional direct execution schemes which use lineary structured Directly Executable Languages: prefixed languages with varying formats for operators and operands. If these languages are convenient for interpretation and provide an efficient execution scheme, on the other hand, they are very hard to generate. 
 Therefore, we propose here a new direct execution model based upon the definition of a class of Directly Executable Languages with a list oriented structure using LISP as model. The first part of the scheme is held by an editor which translates the high level source-text into the internal tree-structured form. The second part is held by an interpreter which executes this form on an appropriate machine. 
 In this paper we pursue the design of the list-structured intermediate form and we give the reasons of our choice. Once we have brought out the concepts and the functions required for the implementation of non-numerical processing and particularly for list-structured forms, we discuss the architecture of the lists-directed machine.