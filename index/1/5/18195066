Active database systems have rules (usually called triggers), consisting of an event that causes a condition to be evaluated, and if true, results in the execution of a predefined action. However, existing trigger languages have a few drawbacks. First, the proposed semantics do not take advantage of well understood and accepted formalisms developed for rule-based systems, and thereby do not capitalize on existing rule-based technology. Second, trigger languages are low-level languages. These languages require that the user provides all triggering conditions associated with rules. This makes difficult the specification of triggers and their maintenance. In this paper, we present an extension of a deductive database language, namely RDLl, towards active rules. By active, we mean rules that react to external events. Rules are expressed at a high level so that triggering conditions are derived from rules by the system. The semantics of our rule language is formally described by means of a partial fixpoint operator which encompasses the deductive database and active database paradigms. We also present an architecture in which the system responsible for detecting events issued by application programs and triggering rules, is front-ended to a relational DBMS. Permission to copy without fee all or part of this material is granted provided that the copies are not made or distributed for direct commercial advantage, the VLDB copyright notice and the tit& of the publication and its date appear, and notice is given that copying is by permission of the Very large Data Base Endowment. To copy otherwise, or to republish, requires a fee and/or special permission from the endowment. Proceedings of the 18th VLDB Conference Vancouver, British Columbia, Canada 1992