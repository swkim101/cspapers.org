The concept of a non-computable function has been valuable in showing absolute limits to our power to compute. But it is problematically oxymoronic, particular in computer science classes, since functions are generally understood algorithmically, as objects which can be computed. This paper presents an alternative explanation for functions usually regarded as non-computable, based on a more careful examination of the data types of domain and range. The limits of computation are still revealed, and additional algorithmic consequences are found. But the confusion inherent in the self-contradictory phrase “non-computable function” is avoided. 1. Background Let N denote the set of positive integers (which we shall simply call integers). For concreteness we shall work mainly with functions from N to N, and denote the set of all such functions by NN. Unless modified by “partial” the term function denotes a total function (defined for all n E N), and unless modified by “noncomputable” it refers to something given by an algorithm. We use the simple and intuitive temw decidable and enumerable instead of the more traditional “recursive” and “recursively enumerable.” A set of integers is decidable if there is an algorithm for deciding membership, and enumerable if there is an algorithm for listing its members. Permission to copy without fee all or part of this material is granted provided that the copies are not made or distributed for direct commercial advantage, the ACM copyright notice and the title of the publication and its date appear, and notice is given that copying is by permission of the Association for Computing Machinery. To copy otherwise, or to republish, requires a fee and/or specific permission.