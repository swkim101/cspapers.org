Most UI toolkits and UIMSs make use of widgets, e.g., buttons, text fields, sliders, menus. Designers construct user interfaces by choosing and laying out widgets, then connectimg them to application semantics. This approach has four problems. First, most widgets are too low-level; constructing interfaces from them takes too much work. Second, working with widgets focuses attention on appearance and layout issues, rather than on more important semantic design issues. Third, designers can easily make poor widget choices, yielding poor interfaces. Fourth, widgets do not mesh well with application semantics; they know nothing about the variables they control. We are developing an application construction environment in which designers and implementers work with semantic-based controls called Selectors rather than with widgets. Selectors are classified according to their interface semantics (e.g., mutually-exclusive choice), rather than their appearance. Each type of Selector can be presented in a variety of ways; this may be chosen semi-automatically. Selectors mesh well with application semantics: their values are application data-types and their views determine how to present valid values automatically.