While budding linguists have always had the freedom to tinker, the Web has revolutionized linguistic experiments in two key ways. First, the language-neutrality of network abstractions have made it possible for Web-deployed applications to be written in any language at all, allowing new languages to show off their capabilities. Second, the Web has greatly facilitated the dissemination of these experimental languages. As a result, new languages crop up almost daily, lovingly tended by their designers and user communities and vigorously debated on popular forums. This is a far cry from the programming languages world of just over a decade ago. Most of these languages are not designed and developed in formal settings. As a result, they lack many of the tools that this conferenceâ€™s audience takes for granted: static analyses, type systems, verification engines, and so on. As we know, these tools not only improve usability, their construction serves as a design check: odd spots in the language design usually manifest themselves as difficulties in building or proving properties about the tool. This leads to a virtuous co-development cycle, or at least forces the language designer to justify the inclusion of such difficult elements. A cynic might question why every language experiment deserves these tools. Because many of these languages will never see widespread adoption, they may not be worth a significant investment of formal effort. To this, there are three counter-arguments: