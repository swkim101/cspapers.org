We study the following database design problem. Given a universal relation scheme 〈U, <i>F</i>〉 where <i>F</i> is a set of functional dependencies, find an in some way normalized database schema <i>D</i> = {〈X<inf>1</inf>, <i>F</i><inf>1</inf>〉,..., 〈X<inf>n</inf>, <i>F</i><inf>n</inf>〉} where X<inf>i</inf> ⊂ U and <i>F</i><inf>i</inf> is inherited from <i>F</i>, such that <i>D</i> is an independent representation of the universal scheme 〈U, <i>F</i>〉. This means that <i>D</i> has both the lossless join property and the faithful closure property, (***** <i>F</i><inf>i</inf>)<sup>+</sup> = <i>F</i><sup>+</sup>, where <sup>+</sup> denotes the closure of a set of functional dependencies. We show that this goal can easily be achieved by an extension of the well-known synthetic approach of Bernstein and others to database design. We merely have to check whether the usual synthesis procedure has produced a key component 〈X<inf>i</inf>, <i>F</i><inf>i</inf>〉 such that X<inf>i</inf> → U ε <i>F</i><sup>+</sup>; in case this is true the output of the synthesis procedure is actually an independent (and not only faithful) representation, otherwise we only have to add one further component, namely just a key. These claims are proved by a careful inspection of the Aho/Beeri/Ullman algorithm to test for losslessness. Finally, we show how to use our method to synthesize minimal independent third normal form schemas.