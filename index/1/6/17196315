pointcut TimeRedundantMethod(); Object around() : TimeRedundantMethod(){ RecoveryCache.establish(); Object r1 = proceed(); RecoveryCache.restore(); Object r2 = proceed(); if(!r1.equals(r2)) throw new TransientFaultException; RecoveryCache.discard(); return r1; } } Figure 4: Time-redundant execution implementation The figure 4 code implements a general Time-redundancy aspect that can be applied to any method. The implementation makes use of the recovery cache to set up a checkpoint and return to the previous state before each run. It is very simple to apply this aspect to a target program since it is only a matter of declaring which method(s) should be executed in a time-redundant manner. This is done by instantiating the abstract pointcut as shown in figure 5. public privileged aspect aTRE extends TimeRedundantExecution{ pointcut TimeRedundantMethod():