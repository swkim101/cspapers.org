Domain-specific languages (DSLs) assist an end-user programmer in writing programs using idioms that are closer to the abstractions found in a specific problem domain. Language testing tool support for DSLs is lacking when compared to the capabilities provided in standard general purpose languages (e.g., Java and C++). For example, support for debugging a program written in a DSL is often nonexistent. This research abstract describes a grammar-driven technique to build a testing tool generation framework through automated transformation of existing DSL grammars. The modified grammars generate the hooks needed to interface with a supporting infrastructure written for an Integrated Development Environment that assists in debugging, testing, and profiling a DSL program.