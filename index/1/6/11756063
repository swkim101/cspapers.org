Abstract : Traditional programming language design has focused on efficiency and expressiveness, with minimal attention to the ease with which a programmer can translate task requirements into statements in the language, a characteristic the authors call "facility." The programming walkthrough is a method for assessing the facility of a language design before implementation. In this paper, the authors summarize the results of a programming walkthrough that evaluated the facility of "ChemTrains," a graphical programming language that is intended to allow nonprogrammers to create animated simulations. They then describe empirical testing in which subjects were asked to write their first program in ChemTrain. They compared the predictions of the walkthrough to the subjects' behavior in the tests, and concluded that the walkthrough successfully predicted much of the required knowledge. They also found, however, that programmers' metacognitive strategies sometimes demand more knowledge than a pure knowledge-level analysis would suggest. The authors conclude that the walkthrough is a valuable aid at the design stage, but it is not infallible. They also suggest that it may not be enough for programmers to know how to solve a problem; they must also understand why the solution will succeed.