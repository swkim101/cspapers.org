The range of control structures available in a higher-level programming language directly governs the set of algorithms conveniently programmable therein. This fact has been well-demonstrated by the salutary effect the ideas of structured programming have had on traditional control structures (sequential, iterative, and procedural). This paper seeks to demonstrate this same fact for more advanced control structures through the use of top-down parsing as a case study. A series of increasingly more satisfactory top-down parsers are presented, using (i) iterative, (ii) recursive, (iii) coroutine, and (iv) nondeterministic control forms. A fifth solution, using a new control form termed “non-forgetful backtracking”, is sketched. This study indicates that the development of new control forms, as well as more thorough understanding and application of existing ones, are worthy pursuits for software engineering. A few directions for continuing work in this spirit are offered in the concluding section.