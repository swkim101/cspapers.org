A majority of parallel applications achieve parallelism by 
partitioning data over multiple processors. Accessing distributed data structures such as arrays from files often requires each processor to make a large number of small noncontiguous data requests. This problem can be addressed 
by replacing small non-contiguous requests by large collective requests. This approach, known as collective I/O, has been found to work extremely well in practice. This paper describes implementation and evaluation of a collective I/O prototype in the Parallel File System (PFS) of the Intel Paragon Operating System (Paragon OS). We evaluate the collective I/O performance using its comparison with the PFS MRECORD and KUNIX I/O modes. It is observed that collective I/O provides significant performance improvement over accesses in the H-UNIX mode. However, in many cases, various implementation overheads cause collective I/O to provide lower performance than the H-RECORD I/O mode.