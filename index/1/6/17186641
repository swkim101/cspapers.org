Parallel programming is a challenging job in distributed community and depends upon the availability of suitable software tools and environment. And consequently, software developers have to face constraints such as nondeterminism, communication, synchronization, data partitioning and distribution, load balancing, fault-tolerance, heterogeneity, shared or distributed memory, deadlocks, and race conditions. In this communication, a comparative study of parallelization paradigms is presented which facilitates the parallel programmer to choose the appropriate and suitable paradigms in different scenarios.