1 Introduction and motivation External 2-dimensional range searching is a fundamental problem with many applications in relational, object-oriented, spatial, and temporal databases. For example, interval intersection can be reduced to 2-sided, 2-dimensional searching and indexing class hierarchies of objects to 3-sided, 2-dimensional searching. In this paper we introduce a new data structure called the p-range tree for performing 2-dimensional range searching in secondary memory. Given n points on the plane and a disk with block size B, the p-range tree uses O(s) disk blocks of storage and answers 2-and 3-sided queries in O(logB n + t/B + ZC*(B)) disk I/O's' Here t is the number of points in the query. We also give a secondary memory data structure for answering general 2-dimensional queries with the same I/O bound. The successful realization of any data model in a large-scale database requires supporting its language features with efficient secondary storage manipulation. Consider the relational data model of [8]. While the declarative programming features (relational calculus and algebra) of the model are important, it is crucial to support these features with data structures for searching and updating that make optimal use of secondary storage. B-trees and their variants B+-trees [1,9] are examples of such data structures. They have been an unqualified success in supporting external dynamic l-dimensional range searching in relational database systems. Using P-range trees we also give data structures for range searching in main memory. For orthogo nal range searching in d-dimension the data structure occupies O(n logdS1 n) space and answers queries in O(ZL*(n) logdS2 n + t) time. The time-space product of this data structure is better than that of previously known data structures [5,25]. The general data structure problem underlying efficient secondary storage manipulation for many data models is external d-dimensional range searching. In particular, 2-dimensional range searching (in various forms) is crucial in the implementation of object-oriented, hierarchical, temporal, spatial, and constraint databases [18,19,27,35]. B-trees, that perform l-dimensional range searching well, are inefficient at handling more general problems like two and higher dimensional range searching. We also give a lower bound for range-searching in secondary memory that shows that 2-dimensional range searching is inherently harder in secondary storage than in main memory. We show that in order to be able to answer any 2-dimensional query in O(Iogi n + t/B) disk I/O's (where c is an arbitrary positive constant), a data structure must occupy sZ($(log g)/ log â€¦