The choices made in the design of a compiler’s Intermediate Language (abbreviated in this paper by IL) strongly affect that compiler’s simplicity, robustness, and flexibility. In this paper, we briefly discuss how an IL bridges the gap between a high-level source language (abbreviated SL) to a low-level target language (abbreviated TL) by a process called lowering, which is the simple process of translation apart from any optimization. We then observe that lowering is particularly reliable and simple if mediated by a type system that provides for the construction of abstract data types.