The problem of polynomial interpolation is to reconstruct a polynomial based on its valuations on a set of inputs <i>I</i>. We consider the problem over <i>Z</i><inf>m</inf> when <i>m</i> is composite. We ask the question: Given I âŠ† <i>Z</i><inf>m</inf>, how many evaluations of a polynomial at points in I are required to compute its value at every point in I? Surprisingly for composite <i>m</i>, this number can vary exponentially between log[<i>I</i>] and [<i>I</i>] in contrast to the prime case where [<i>I</i>] evaluations are necessary. While this minimization problem is NP-complete, we give an efficient algorithm of query complexity within a factor <i>t</i> of the optimum where <i>t</i> is the number of prime factors of <i>m</i>. We use our interpolation algorithm to design algorithms for zero-testing and distributional learning of polynomials over <i>Z</i><inf>m</inf>. In some cases, we get an exponential improvement over known algorithms in query complexity and running time. Our main technical contribution is the notion of an interpolating set for <i>I</i> which is a subset <i>S</i> of <i>I</i> such that a polynomial which is <i>0</i> over <i>S</i> must be 0 at every point in <i>I</i>. Any interpolation algorithm needs to query an interpolating set for <i>I</i>. Our query-efficient algorithms are obtained by constructing interpolating sets whose size is close to optimal.