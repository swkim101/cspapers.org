B-trees are a commonly used data structure for indexed access to files and databases. Among the desirable properties of B-trees is the fact that they are dynamically rebalanced after each insertion and deletion operation and therefore need not be reorganized as other static access structures e.g., ISAM. Despite the fact that B-trees are dynamically balanced we demonstrate that operational conditions exist under which it pays off to explicitly reorganize B-trees. The rationale being that by explicit reorganization we defer the event of root splitting and hence reduce the cost of subsequent retrieval requests which are the dominant operations. We present a reorganization algorithm that allows control over storage utilization and discuss the circumstances under which it should be applied. We present simulation results that support our contention that reorganization is indeed economically feasible and we conclude with some suggestions for further work in this area.