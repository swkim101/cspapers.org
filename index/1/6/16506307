We present an overview of the many control constructs and heuristics used by PROLOG systems with extra control facilities. Two features of computations rules are used to evaluate and classify them. They are detecting failure quickly (where it is unavoidable) and avoiding failures. By examining current systems in this light, we reach conclusions concerning deficiencies in performance, and how they may be overcome. We propose an idealized computation rule which uses a hierarchy of goals and a breadth first component.