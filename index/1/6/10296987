1. THE HEALTHOS SYSTEM Recently, an increasing number of pervasive healthcare applications have been developed as a way to overcome the shortcomings of the traditional clinical infrastructure. However, the nature of these applications, both closed and vertically-integrated, hinders integration with the existing infrastructure, increases the development cost, and fails to provide a unified management interface. In response to these challenges, we propose HealthOS, a platform designed to develop pervasive healthcare applications. Figure 1 illustrates the target environment for HealthOS. As the figure suggests, HealthOS users can carry multiple healthcare-related devices in their living environments, each using their proprietary communication protocols and data formats. HealthOS collects, encrypts, and stores the data on either a local machine or in a secure cloud service. Upon request, HealthOS can translate the data into requested formats that different healthcare applications may require. From the perspective of an application developer, the attractiveness of the HealthOS platform lies in the need to implement only the analysis and representation logic of the application. We also envision the use of a HealthStore (similar to the Apple AppStore), in which pre-developed applications can be shared and reused. The various applications are handled using the unified management console in HealthOS. Furthermore, HealthOS can be adapted to mobile platforms. Achieving our vision of HealthOS, requires implementing several modules for each device. First, a module is necessary to communicate with each device and translate the custom data that it produces. We call this module a HealthOS driver. Secondly, the formats used to present the data to different stakeholders (e.g., family members, healthcare professionals, etc.) may differ. Thus, HealthOS uses a translator module used for converting a deviceâ€™s proprietary data format to match well-defined, standardized medical data presentation formats used by major electronic medical record (EMR) systems [2, 6]. Both drivers and translators follow a component-based design in the sense that they provide and require well-defined interfaces for inter-module interaction and reuse. Given that data can successfully be collected and interpreted using HealthOS, application developers can focus solely on properly