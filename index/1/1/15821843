We extend LDL to allow programs to call external procedures and vice versa. This extension allows the modularization of LDL, since external predicates are equivalent to external procedures written in LDL. External predicates are viewed as infinite relations so that the traditional semantics of logic programs remain applicable. To avoid computing infinite relations, wellformedness conditions for programs in extended LDL are given. The traditional optimization framework can still be used; it is only necessary to define a new set of cost functions capable of handling the infinite relations. The problem of interfacing LDL programs with external procedures—exchanging complex objects and returning multiple solutions—is discussed. Thus, we provide a general framework to allow logic programs to interact with external procedures without sacrificing amenities such as optimization, safety, etc. This approach forms the basis for the implementation of externals and modules in the LDL compiler and optimizer at MCC.