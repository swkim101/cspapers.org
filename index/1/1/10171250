One promising approach to teaching parallel programming is to use high-level parallel programming languages, which handle some of the more mundane details of parallel programming and allow both instructors and students to focus on the main ideas. How does one go about selecting the language to use? We present short descriptions of a variety of languages (Chapel, Cilk, CUDA, Habanero Java, Hadoop, OpenACC, OpenMP and Scala), including our assessment of their strengths and weaknesses, plus some general considerations to keep in mind when teaching parallel programming.