We describe our rationale for developing a new introductory computer science course at Furman University and summarize our experience with it. The pilot offerings were made possible in part by an grant from the National Science Foundation that provided important facilities for the laboratory components of the course. While the course does not abandon the traditional programming content found in CS 1, the course does attempt to place programming in the context of a larger framework of computer science stressing virtual machine and object oriented paradigms. It introduces problem solving at several levels of abstraction-including fourth generation, third-generation, and real-time operating system virtual machine language levels. It serves both as an entry level course to the computer science major and a rigorous service course for students in other (primarily scientific) disciplines. Introduction The evolution of computer science as a discipline has been nearly as rapid as that of the technology in the computer industry itself. The debate over the nature of the discipline and its model curriculum has been lively and continuous [l-9]. The recent report by the ACM Task Force on the Core of Computing [8] represents still another step in this evolution--an attempt to separate the discipline from the image of the “inventor and purveyor of computing technology” [S]. In the view of the Task Force, technology dominates current core courses while the science is relegated to electives. This is viewed as especially true for introductory courses where the assumption that “computer science equals programming” dominates. While we concur with the general aim of the Task Force report--that is, to establish the experimental and theoretical areas of the discipline as more integral to the core curriculum--we are not yet convinced that its proposed introductory course sequence is practical or desirable at liberal arts institutions like ours. It is nonetheless in consideration of many of the issues put forth in the Task Force as well as our view of the paradigm that a computer scientist must adopt that has led us to develop our new introductory major course. We hope that some of the issues we express here and our experiences learned from preliminary offerings of our course can contribute to this important and ongoing debate. Permission to copy without fee all or part of this material is granted provided that the copies are not made or distributed for direct commercia1 advantage, the ACM copyright notice and the title of the publication and its date appear, and notice is given that copying is by permission of the Association for Computing Machinery. To copy otherwise, or to republish, requires a fee and/or specific permission.