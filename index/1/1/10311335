We study the Relaxed List Update Problem (RLUP), in which access requests are made to items stored in a list. The cost to access the jth item xj is cj, where ci 5 ci+i for all i. After the access, xj can be repeatedly swapped, at no cost, with any item that precedes it in the list. This problem was introduced by Aggarwal et al [l] as a model for the management of hierarchical memory that consists of a number of caches of increasing size and access time. They also proved that a version of LRU is C-competitive, for some C, for a restricted class of cost functions. (1) We give an efficient offline algorithm that computes the optimal strategy for RLUP. We also show an elegant characterization of work functions for RLUP. (2) We prove that Move-to-Front (MTF) is optimally competitive for RLUP with any cost function. An interesting feature of the proof is that it does not involve any estimates on the competitive ratio. (3) W e ive a lower bound on the gâ€™ competitive ratio of online algorithms for RLUP.