An on-going problem with many courses across the CS curriculum is finding time to incorporate programming activities that are necessary for other critical aspects of the course. For example, in UI design the practice and evaluation of good design principles typically depends on the creation of at-least a semi-functional software prototype. However, having to include software implementation in courses whose main focus lies elsewhere can distract from core concepts, and oftentimes there are pedagogical reasons to separate out implementation. By co-linking upper-division courses in our CS program, we attempted to solve this problem by leveraging concepts of software design and implementation across two courses. In this experience report, we describe how the co-linked courses were structured, what we encountered, what worked well and what still needs improvement. Other CS educators might capitalize on our successes, and learn from our mistakes, in similar set-ups within their own curriculums.