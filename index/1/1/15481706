We extend the model of [SJG94b] to express strong time-outs (and pre-emption): if an event <italic>A</italic> does not happen through time <italic>t</italic>, cause event <italic>B</italic> to happen at time <italic>t</italic>. Such constructs arise naturally in practice (e.g. in modeling transistors) and are supported in languages such as ESTEREL (through instantaneous watchdogs) and LUSTRE (through the “current” operator).
The fundamental conceptual difficulty posed by these operators is that they are non-monotonic. We provide a simple compositional semantics to the non-monotonic version of concurrent constraint programming (CCP) obtained by changing the underlying logic from intuitionist logic to Reiter's default logic. This allows us to use the same  construction (uniform extension through time) to develop Default Timed CCP (<bold>Default tcc</bold>) as we had used to develop Timed CCP (<bold>tcc</bold>) from CCP. Indeed the smooth embedding of CCP processes into <bold>Default cc</bold> processes lifts to a smooth embedding of <bold>tcc</bold> processes into <bold>Default tcc</bold> processes. Interesting <bold>tcc</bold> properties such as determinacy, multiform time, a uniform pre-emption construct (“clock”), full-abstraction, and compositional compilation into automata are preserved.
<bold>Default tcc</bold> thus provides a simple and natural (denotational) model capable of representing the full range of pre-emption constructs supported in ESTEREL, LUSTRE and other synchronous programming languages.