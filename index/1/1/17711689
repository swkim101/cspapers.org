When an update to a view is requested by a user, there may be no unique way of up dating the stored relations in the database to realize the requested update. Chosing one of the alternatives for updating stored relations may not reflect the change that has actually taken place in the real world; in the presence of other derived views, the database may actually present a very wrong model of the world to the user. The problem is even more severe in the case of deductive databases. For avoiding this problem, we introduce a new notion of view updates, called cumulative updates. The key idea behind cumulative updates is that update mechanisms should wait for further update requests to resolve ambiguities. Equivalently, current update requests must also take into account previous requests made to the knowledge base. Cumulative updates, therefore, subsume conventional updates in which only the current update request is considered. In this paper, we motivate the need for cumulative updates and formally define the notion of such updates as well as the different classes therein. We then give methods for computing one particular class of cumulative updates. Permiraion to copy without fee all or part of this material is granted provided that the copier an not made or distributed for direct commercial advantage, the VLDB copyright notice and the title of the publication and its date appear, and notice ir given that copying ia by permiraion of the Very Large Data Bare Endowment. To copy other-wire, or to npublirh, requires a fee and/or rpecial permission from the Endowment. Proceedings of the 20th VLDB Conference Santiago, Chile, 1994 When a view update is requested by a user, there may be no unique way of updating the stored relations in the database to realize the requested update. However, chasing one of the alternatives for updating base relations may not reflect the change that has actually taken place in the real world. For example, consider two stored relations empdept and deptMgr that record the department in which each employee works and the manager for each department respectively. Assume that a view empMgr has been defined on this rels tional schema which is obtained by joining the two base relations: empMgr(X, Y) t empdept(X, Z),