The programming of efficient parallel software typically requires extensive experimentation with program prototypes. A programming system that supports rapid prototyping of parallel programs should provide high-level primitives with which programs can be explicitly, statically or dynamically tuned with respect to performance and reliability. When using such primitives, programmers should not need to interact explicitly or even be aware of the software tools involved in program construction and tuning, such as compilers, linkers, and loaders. In addition, programmers should be provided with the information about the executing program and the parallel hardware required for tuning. Such information may include monitoring data about the current or previous program or even hints regarding appropriate tuning decisions.
A programming system that includes primitives and tools for program tuning is presented in this paper. The system has been implemented, and has been tested with a variety of parallel applications on a network of Unix workstations.