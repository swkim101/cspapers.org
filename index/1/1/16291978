In this paper we study the amortized complexity of two well-known algorithms used in system software, These are the "move-to-front" rule for maintaining an unsorted linear list representing a set, and the "least-recently-used" replacement rule for reducing page faults in a two-level paged memory. These algorithms have been subjected to much analysis, most of it average case. By studying the amortized complexity of these algorithms we are able to gain additional insight into their behavior.