Consecutively bounded depth-first search involves repeatedly performing exhaustive depth-first search with increasing depth bounds of 1, 2, 3, and so on. The effect is similar to that of breadth-first search, but, instead of retaining the results at level n-1 for use in computing level n, earlier results are recom-puted. Consecutively bounded depth-first search is useful whenever a complete search strategy is needed and either it is desirable to minimize memory requirements or depth-first search can be implemented particularly efficiently. It is notably applicable to automated deduction, especially in logic-programming systems, such as PROLOG and EQLOG, and their extensions. Consecutively bounded depth-first search, unlike unbounded breadth-first search, can perform cutoffs by using heuristic estimates of the minimum number of steps remaining on a solution path. Even if the possibility of such cutoffs is disregarded, an analysis shows that, in general, consecutively bounded depth-first search requires only b/b-1 times as many operations as breadth-first search, where 6 is the branching factor. 1 1 Introduction In this paper, we investigate the properties of consecutively bounded depth-first search. In this method, exhaustive depth-first search is repeatedly performed with increasing depth bounds of 1, 2, 3, and so on. The effect is similar to that of breadth-first search, but, instead of retaining the results at level n — 1 for use in computing level n, earlier results are recomputed. 2 Although this may appear to be a naive and costly search method, it is not necessarily so. It is sometimes advantageous to perform consecutively bounded depth-first search instead of the breadth-first search it imitates. One reason for this is that depth-first search requires much less memory. Consecutively bounded depth-first search can also make use of heuristic information, in contrast to unbounded breadth-and depth-first search—the latter are uninformed search strategies that do not take into account heuristic estimates of the remaining distance to a solution. Informed search strategies such as the A* algorithm use such heuristic information to order the ' The vi ews and concl usi ons contained i n this document are those of the authors and shoul d not be interpreted as representative of the official policies, either expressed or implied, of the Defense Advanced Research Projects Agency or the United States government. Approved for public rel ease. Distribution unlimited. 2 We assume a basi c familiarity with standard breadth-first, depth-first, and A* search strategies (e.g., see Ni l sson [4]). search space. …