Logic programming originated in the field of artificial intelligence * It was artificial intelligence that provided both the theorem-proving research for its backward-reasoning execution strategy [42,47,68] and its first intended applications in natural language question-answering [14]-It also provided the controversy (see e.g« [32,81]). between the relative merita of procedural versus declarative representations of knowledge/ which helped to motivate the procedural interpretation of Horn clauses, which is the basis of logic programming, even today. In this short paper I will sketch some of the subsequent developments in logic programming, concentrating especially on extensions which have been developed to make logic programming more suitable for knowledge representat ion in artificial intelligence, 1 will focus particularly on developments in non-monotonic reasoning, abduction, and metareasoning. I will also argue that the unrestricted use of full first-order logic might not be necessary or useful for most applications. 2, THE SCOPE OP LOftTP PROGRAMMING FOPM Logic programming was originally restricted to sentences (also called rules) in Horn clause form: A i f B^ and .-. and B n with a single atomic conclusion A and zero or more atomic conditions B^, All variables/ X}, ,,. , x^, occurring in a rule are universally quantified in front of the rule: for a l l X 1#-. f Xjfl [A if Bj and , ,. and B n ] Today th« notion of logic programming also includes rules whose conditions are arbitrary formulae of first-order logic. Lloyd and Topor [51/52] showed how to reduce such more general rules to normal logic programming form r where each condition is either an atomic formula or the negation of an atomic formula. Similarly the conditions B: in queries 596 Award and Invited Papers owalski Computing Technology and Medicine 2BZ, UK ? B^ and .-. and B n to a logic program can be arbitrary formulae of first-order logic. Such queries can be reduced to a normal logic program together with a normaJ query, in which all conditions are atomic formulae or negations of atomic formulae. The basis of logic programming is the interpretation of rules as procedures: reduce problems of the form A to subproblems of the form B^*. .. , B n. The significance of this procedural interpretation is twofold: Not only can declarative sentences be executed as procedures/ but procedures in problem-reduction form can be interpreted declaratively as statements of logic-In this way logic programming reconciles declarative and procedural …