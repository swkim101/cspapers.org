We investigate the use of branching time temporal logic to reason about fair programs. Our approach is novel in viewing fairness conditions as an intrinsic part of the computations rather than as a part of the formulas specifying the computations. Our first result is that the branching time logic of fair programs is the same as the branching time logic of probabilistic programs and as the logic of fusionand suffix-closed programs defined by Abrahamson. Next we give decision procedures for the temporal logic of fair programs using a new type of automata on infinite trees. Matching upper and lower bounds for two different versions of branching time temporal logic are established 1. I n t r o d u c t i o n In concurrent programs, there is an inherent nondeterminism due to the fact that, at each moment, the B Address: 600 Mountain ave, Murray Hill, NJ 07974 tAddress: Department K55/801, 650 Harry Road, San Jose, CA 95120-6099 Permission to copy without fee all or part of this material is granted provided that the copies are not made or distributed for direct commercial advantage, the ACM copyright notice and the title of the publication and its date appear, and notice is given that copying is by permission of the Association for Computing Machinery. To copy otherwise, or to republish, requires a fee and/or specific permission. Â© 1986 A C M 0-89791-193-8/86/0500/0283 $00.75 next computation step can be done by any enabled process. It is convenient to imagine that this nondeterminism is embedded in a scheduler. This scheduler decides at each moment which process is going to perform the next step. While we want to make as few assumptions as possible about the scheduler, it is nevertheless reasonable to assume that it is not a pathological one. Indeed, almost all distributed protocols can be defeated by a sufficiently "evil" scheduler. Thus, it is usual to assume the scheduler to be fair, i.e., not to "discriminate" against any process. Equivalently, we can restrict our attention to fair computations, computations in which all processes have been scheduled in a fair manner. (Note that we are using here the term fairness generically; it has numerous formalizations (cf. [FK84, LPS81]).) The issue we address in this paper is the use of temporal logic to reason about fair programs. Temporal logic was introduced by Pnueli [Pn77] and comes in two main variants. In linear temporal logic (LTL) [GPSS80, Pn81], formulas ave interpreted over linear sequences of program states. LTL formulas are constructed using temporal connectives such as next and until. In branching temporal logic (BTL) [BMP81, EC82, EH85, LAB0], on the other hand, formulas are interpreted over tree-like structures which can represent the possible computations of a concurrent or nondeterministic program. Here, we consider the branching version of temporal logic.