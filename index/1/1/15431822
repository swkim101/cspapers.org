SIMULA language has been designed as a general-purpose programming tool and is particularly offered for describing and efficiently simulating large-scale systems. Such simulation models are usually characterized by inherent parallelism, which reflects corresponding activities of the system. This kind of natural parallelism remains unexploited by the implementation of the SIMULA language in a uniprocessor machine.
 We have critically assessed SIMULA, and we present a scheme that aims towards implementing SIMULA programs in a multiprocessor environment. This scheme establishes a parallel structure to replace the existing quasiparallel SIMULA mechanism.
 Our approach is based on the nature of SIMULA classes and the process interactions. An appropriate process interaction structure is proposed. This structure makes it possible to overcome such problems as mutual exclusion, deadlock, and synchronization. Further, an executive algorithm is outlined to guarantee the correct flow of processes in a multiprocessor environment. This work leads to a parallel SIMULA machine architecture, which is feasible within the current trends of LSI/VLSI technology.