ion. There is a strong tendency to apply these notions to any problem area that we tackle, even if they are not appropriate. Our programming notations tend to be linear in nature, there is one thread of control through the entire program. In user interfaces there are typically multiple threads of control. This is very hard to describe in a textual notation. Many claims have been made for the textual description of user interfaces. Textual notations are more powerful than the existing graphical notations (a general programming language can do anything that is computable). There are user interfaces that can be described by programs that cannot be produced by existing graphical techniques. But, do we need this generality, and will it be effectively used? The problem with using programming languages is that vast amounts of code must be written in order to produce the user interface. Thousands of lines of code may be required to produce a user interface that could be constructed in 30 minutes with a graphical tool. Recently rule based techniques have been proposed as a way of designing user interfaces. These techniques can be characterized as a textual description with a high level of abstraction. This is a very nice approach (otherwise 1 wouldn’t be using it), since it allows us to capture some of the expertise of good designers. We can develop rules for the selection of interaction techniques, details of their graphicalion. This is a very nice approach (otherwise 1 wouldn’t be using it), since it allows us to capture some of the expertise of good designers. We can develop rules for the selection of interaction techniques, details of their graphical presentation (fonts and line styles, for example), and their placement on the screen. This removes control from the user interface designer, since he or she has no control over the rules that fire in the design of the user interface. It could be argued that the designer could edit the rule base in order to have some control over the design process, but this is not a viable solution. A realistic rule base will have a large number of rules (thousands?) and there will be subtle interactions between these rules. As a result., it may be very difficult to modify the rule base without introducing undesirable side