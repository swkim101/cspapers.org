Assembling classes to form systems is a key concept in object-oriented software development. However, in order to be composed, classes have to be compatible in a certain way. In current object-oriented languages the compatibility with a specific behaviour is expressed by inheritance from a class which describes this behaviour. Unfortunately inheritance is neither intended to express compatibility nor does it enforce compatibility. This deficiency may lead to inconsistent systems. Therefore, in the Project “10–14” inheritance is restricted to express compatibility between classes. Two kinds of compatibilities are distinguished: compatibility required for the integration of subsystems (conformance) and compatibility required for reuse (imitation). A formal basis for the discipline is developed in order to get mathematically precise notions and to enable the verification of object-oriented systems. A design strategy is built on top of these compatibility notions. In actual case studies the discipline has already shown to support a clean design and to promote the reusability of class hierarchies.