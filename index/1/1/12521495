Several different undergraduate programs have been designing and class-testing alternative curricula for their f~st four courses using the 7-course “breadth-first” approach described in the ACM/IEEE-CS report Computing Curricula 1991 [1]. These courses have several major goals: 1. Broad subject matter coverage, beginning with the first course; 2. Integration of mathematics, science, and engineering points of view with the subject matter; 3. Inclusion of social issues (such as the risks and liabilities that surround software failures); and 4. Weekly coordinated laboratory activities. The goals of this approach, generally speaking, are to provide an introduction to the discipline of computing that more directly reflects its nature and breadth than does the traditional approach, especially in its fwst four courses. A complete set of teaching materials for the first four courses in the breadth-f~st curriculum has been developed and class–tested. These four courses are titled: Course I: Logic, Problem Solving, Programs, and Computers Course II: Abstraction, Data Structures, and Large Soflware Systems Course III: Levels of Architecture, Lunguages, and Machines Course A? Algorithms, Concurrency, and the Limits of Computation This panel session will focus on these four courses in the breadth-first curriculum, which have been class-tested in a variety of different institutional settings (including Bowdoin, UConn, UTEP, Allegheny, and Swarthrnore) during the 1991-92, 1992–93, and 1993–94 academic years. The panelists will present the results of class–testing these courses and address the topics summarized in the paragraphs below. There will be time for questions and discussion between presentations. 1. Course L Origination, class-testing, and revision (Bernat). Experience with Course I in the breadtl-first curriculum has led to several modifications: stronger integration of the mathematics and programming methodology, in particular to provide motivation for the introduction and development of logic; stronger integration of specifications as a design tool, in particular to motivate the need for precision in specifications; stronger emphasis on abstraction, in particular as adesigntool for handling detail. At the same time we retain the strong computer science emphasis, the understanding of societal issues, and the suitability for use as an introduction of computer science for non–majors. 2. Courses Z1 Object-orientation, data structures, and operating systems (Cupper). The goals of course II are reflected in the title of the tex~ ZWzdamenrals of Computing 11; Abstraction, Data Structures, and Large So@are Systems [2]. Object~rientation provides a natural and efllcient vehicle for accomplishment of these goals. The course begins with an overview of the principles of software design. Object~rientation is presented as an appropriate way to meet these principles of software design.