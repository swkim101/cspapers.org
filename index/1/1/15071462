To support parallel programming, languages are often extended to include constructs that allow partitioning and synchronization to be specified explicitly in the program. Unfortunately, there is no guarantee that a parallel program expressed in an extended language is free of errors. Particularly difficult to diagnose are errors that introduce nondeterminacy in the programâ€™s execution, where different runs of the program on the same input data may yield different results. Errors of nondeterminism usually arise from race conditions that have been inadvertently introduced by the programmer. A race condition exists between two statements if they can simultaneously access the same memory location, and at least one of them writes into that location. This can occur due to the absence of synchronization or synchronization that is specified incorrectly by the programmer. In this paper, we present a static analysis technique that can be used to determine if a given parallel program with synchronization is free from race conditions, and if not, to identify all potential race conditions in the program.