This paper describes the Common Lisp system that BBN is developing for its ButterflyTM multiprocessor. The BBN ButterflyTM is a shared memory multiprocessor which may contain up to 256 processor nodes. The system provides a shared heap, parallel garbage collector, and window based I/O system. The future construct is used to specify parallelism. THE BUTTERFLYTM LISP SYSTEM For several decades, driven by industrial, military and experimental demands, numeric algorithms have required increasing quantities of computational power. Symbolic algorithms were laboratory curiosities; widespread demand for symbolic computing power lagged until recently. The demand for Lisp machines is an indication of the growth of the symbolic constituency. These machines possess architectural innovations that provide some performance increases, but they are still fundamentally sequential systems. Serial computing technology is reaching the point of diminishing returns, and thus both the numeric and symbolic computing communities are turning to parallelism as the most promising means for obtaining significant increases in computational power. BBN has been working in the field of parallel computers since the early 1970’s, having first developed the Pluribus multiprocessor and more recently, the Butterfly, the machine whose programming environment we concern ourselves with in this paper. The Butterfly multiprocessor consists of a set of up to 256 nodes, each containing both a processor and memory, connected by a Butterfly switch (a type of Omega network) (see figure 1). Each node has from 1 to 4 megabytes of memory, a Motorola 68000 series processor and a special purpose Processor Node Controller (PNC). The PNC is microprogrammed to handle inward and outward Butterfly switch transactions, and to provide multiprocessing extensions to the 68000 instruction set, particularly in cases where atomicity is required.1 To date, Butterfly programs have been written exclusively in C, with most numeric applications using the Uniform System package. The Uniform System provides and manages a large shared address space and has subroutines which can be used to distribute subtasks to all of the active processors. It has been used to speed up algorithms for matrix multiplication, image processing, determining elements of the Mandelbrot set, and solving differential equations and systems of linear equations.2 3 Butterflym is a trademark of Bolt, Beranek and Newman. Under DARPA sponsorship, BBN is developing a parallel symbolic programming environment for the Butterfly, based on an extended version of the Common Lisp language. The implementation of Butterfly Lisp is derived from C Scheme, written at MIT by members of the Scheme Team.4 The simplicity and power of Scheme make it particularly suitable as a testbed for exploring the issues of parallel execution, as well as a good implementation language for Common Lisp. The MIT Multilisp work of Professor Robert Halstead and students has had a significant influence on our approach. For example, the future construct, Butterfly Lisp’s primary mechanism for obtaining concurrency, was devised and first implemented by the Multilisp group. Our experience porting MultiLisp to the Butterfly illuminated many of the problems of developing a Lisp system that runs efficiently on both small and large Butterfly configurations.5 6 In the first section, this paper describes future-based multitasking in Butterfly Lisp and how it interacts with more familiar Lisp constructs. The second section describes how Butterfly Lisp deals with the problems of task distribution and memory allocation. It contrasts our approach and the Uniform System approach. The third section describes the Butterfly Lisp parallel garbage collector and the fourth section describes the user interface. Figure 1: 16x16 Butterfly Switch 730 / ENGINEERING From: AAAI-86 Proceedings. Copyright ©1986, AAAI (www.aaai.org). All rights reserved.