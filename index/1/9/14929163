A simple technique is described to speed up optimal path planning on Euclidean-cost grids and lattices. Many robot navigation planning algorithms build approximate grid representations of the environment and use Djikstra's algorithm or A* to search the resulting embedded graph for an optimal path between given start and goal locations. However, the classical implementations of these search algorithms were designed to find optimal paths on arbitrary graphs with edges having arbitrary positive weight values. This paper explains how to exploit the structure of optimal paths on Euclidean-cost grids and lattices in order to reduce the number of neighboring nodes considered during a node expansion step. The result is a moderate reduction in the total nodes examined, which reduces the overall memory requirements and computational cost of the search. These improvements increase the efficiency of optimal robot navigation planning on 2D and 3D grids, and the technique generalizes to any other search problem that involves finding optimal paths on grids and lattices in higher dimensions whose edge costs obey the triangle inequality.