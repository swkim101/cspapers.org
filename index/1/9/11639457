Traditional path-planning involves (1) choosing start and goal points, (2) calculating a path, and (3) following that path. There are, however, many real world scenarios where an agent might need to change its goal and replan, which frequently includes expensively calculating a new path from scratch. We propose an adaptation to RRT∗ that locally rewires the RRT∗ tree as the robot moves and path costs change. Local rewiring takes advantage of information already existing in the tree and makes small adaptations that accommodate changes. Rewiring adds computational overhead during robot travel, but allows replanning in real time with approximately constant overhead. Empirical studies demonstrate that computational costs are lower than alternative replanners in 2D worlds with moderate obstacle density, and the resulting paths approach optimality as more time is allowed to replan.