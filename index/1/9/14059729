In this paper we improve upon the running time for finding a point in a convex set given a separation oracle. In particular, given a separation oracle for a convex set K ⊂ R<sup>n</sup> that is contained in a box of radius R we show how to either compute a point in K or prove that K does not contain a ball of radius ϵ using an expected O(n log(nR/ϵ)) evaluations of the oracle and additional time O(n<sup>3</sup> log<sup>O(1)</sup>(nR/ϵ)). This matches the oracle complexity and improves upon the O(n<sup>ω+1</sup> log(nR/ϵ)) additional time of the previous fastest algorithm achieved over 25 years ago by Vaidya [91] for the current value of the matrix multiplication constant w <; 2.373 [98], [36] when R/ϵ = O(poly(n)). Using a mix of standard reductions and new techniques we show how our algorithm can be used to improve the running time for solving classic problems in continuous and combinatorial optimization. In particular we provide the following running time improvements: · Submodular Function Minimization: n is the size of the ground set, M is the maximum absolute value of function values and EO is the time for function evaluation. Our weakly and strongly polynomial time algorithms have a running time of O(n<sup>2</sup> log nM · EO + n<sup>3</sup> log<sup>O(1)</sup> nM) and O(n<sup>3</sup> log<sup>2</sup> n · EO + n<sup>4</sup> log<sup>O(1)</sup> n), improving upon the previous best of O((n<sup>4</sup> · EO + n<sup>5</sup>)logM) and O(n<sup>5</sup> · EO + n<sup>6</sup>) respectively. · Submodular Flow: n = |V|, m = |E|, C is the maximum edge cost in absolute value and U is maximum edge capacity in absolute value. We obtain a faster weakly polynomial running time of O(n<sup>2</sup> log nCU · EO + n<sup>3</sup> logO(1) nCU), improving upon the previous best of O(mn<sup>5</sup> log nU · EO) and O (n<sup>4</sup>h min {log C, log U}) from 15 years ago by a factor of Õ(n<sup>4</sup>). We also achieve faster strongly polynomial time algorithms as a consequence of our result on submodular minimization. · Matroid Intersection: n is the size of the ground set, r is the maximum size of independent sets, M is the maximum absolute value of element weight, T<sub>rank</sub> and T<sub>ind</sub> are the time for each rank and independence oracle query. We obtain a running time of O((nr log<sup>2</sup> nT<sub>rank</sub>+n<sup>3</sup> log<sup>O(1)</sup> n) log nM) and O((n<sup>2</sup> log nT<sub>ind</sub>+n<sup>3</sup> log<sup>O(1)</sup> n) log nM), achieving the first quadratic bound on the query complexity for the independence and rank oracles. In the unweighted case, this is the first improvement since 1986 for independence oracle. · Semidefinite Programming: n is the number of constraints, m is the number of dimensions and S is the total number of non-zeros in the constraint matrices. We obtain a running time of O(n(n<sup>2</sup> + m<sup>ω</sup> + S)), improving upon the previous best of Õ(n(n<sup>ω</sup> + m<sup>ω</sup> + S)) for the regime S is small.