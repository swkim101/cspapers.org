An important feature of the design of human-computer interfaces is that of command languages: the vocabulary and syntax that allow a user to express commands to the system. If we look at command languages from the standpoint of natural languages, rather than formal ones, then there are three aspects to their user interface. The first is the overall structure of the user-system dialogue—its pragmatics, so to speak (e.g., [3]), which includes issues of contextual reference, presuppositions, and so on. The second aspect of command languages is their syntax (e.g., [1], [4]). The important issue here is the trade-off between consistency of the syntax and its similarity to that of natural language. The third aspect of command languages is their semantics, primarily that of their commands. Most command languages are fairly small, with simple data and control structures, and so their semantics are fairly trivial. More important is the “lexical” semantics of commands and their arguments and parameters. The crucial factor here is the names given to the entities and operations in the system by the command language: if those names are not apt, performance will be impaired just as with poorly designed syntax or dialogue structure. This paper investigates the psycholinguistic aspects of this naming problem.