In the cloud computing paradigm, clients outsource computation to professional service providers. However, service providers may be error-prone or otherwise not entirely trustworthy, and therefore oftentimes the returned results need to be thoroughly verified. As such, the problem of verifiable computation has been motivating a rapidly-growing body of research, yielding increasingly-efficient systems, which currently achieve nearly-practical verifiable computation. Most recent solutions firstly transform the computation task into an arithmetic circuit, and then based on this circuit they design a verification protocol using argument systems. In this paper we focus on the verification protocol after the circuit generation. We notice the state of the art involve a considerable cost, including the verifier's amortized cost, (i.e., the cost that needs to be amortized over a large number of work instances), and the prover's cost of proof generation. The most efficient argument systems still incur an amortized cost that is linear in the size of the circuit. In this paper, we show that verifiable computation can be made more efficient by taking advantage of computations with corresponding circuits containing repeated substructures (e.g. loops). Since loops play a pivotal role in the real world of computing (not only compute-intensive computations but also data-intensive computations such as big data applications), we take loops as a typical example, propose a new verification protocol for repeated structures and show that the circuit generated from computation with loops can indeed lead to a lower amortized cost and a lower cost of proof generation. Using the theory of arithmetic circuit complexity we prove that for most programs our design results in very significant savings. Our verification design for loops is based on Block Programs (BPs), an innovative encoding scheme for circuits with repeated structures.