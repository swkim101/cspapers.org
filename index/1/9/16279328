We present in this paper a methodology for the development (and analysis) of programs designed specifically for distributed environments where synchronization is achieved through message passing. The methodology is based on techniques and concepts which have been found to be useful for the development of sequential programsâ€”namely, stepwise refinement and abstract data types. The methodology is based on the concept of resource, generalizing the concepts of monitors, managers, proprietors, etc. We put forward the proposition that a resource is an abstract data type together with mechanisms for synchronization: firstly, for the operations of the type with each other (to gain parallelism) and, secondly, to enable the user environment to perform operation invocation. A methodology is then presented for the design of resources and their implementation.