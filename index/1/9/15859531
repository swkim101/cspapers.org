Due to its potential for a high degree of parallelism, optimistic concurrency control is expected to perform better than two-phase locking when integrated with priority-driven CPU scheduling in real-time database systems. In this paper, we examine the overall effects and the impact of the overheads involved in implementing real-time optimistic concurrency control. Using a locking mechanism to ensure the correctness of the implementation, we develop a set of optimistic concurrency control protocols and evaluate them on a testbed. Throu h experiments, we investigate, in depth, t R e effect of the locking mechanism on the performance of optimistic concurrency control protocols, and we compare the locking-based optimistic approach with a class of two-phase locking protocols. The experimental results indicate that the physical implementation schemes have a significant impact on the performance of realtime optimistic concurrency control.