This research has developed an optimizer generator that automatically produces optimizers from specifications. Code optimizations are expressed using a specification language designed for both traditional and parallelizing optimization, which require global dependence conditions. Numerous optimizers have been produced from a prototype implementation of the generator. The quality of code produced using the generated optimizers compares favorably with that produced by hand coded optimizers. The generator can be used as a phase in a compiler or as an experimental tool to determine the effects of various optimization and to tailor optimization. Experiments indicate that optimization interact in practice and that different orderings of optimization are needed for different code segments of the same program. Experiments found that the cost-benefit ratio of some optimizations is quite large and in some cases can be reduced by careful specifications of the optimizations or different implementations.