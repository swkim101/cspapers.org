Dynamic content generation has become popular at many Web sites because it enables new services such as electronic commerce, personalized information searching/presentation, and scientific computing. Because dynamic content generation normally places intensive I/O and CPU demands on a server [4, 7], it becomes critical to cluster multiple servers to remove the server bottleneck. One popular method for clustering is to use DNS rotation. The main weakness is that load imbalance may be caused by client-site IP address caching and heterogeneous workload. Also, a client site cannot be aware if a server node fails. A strategy to improve fault tolerance is to use load balancing switching products from Cisco and other companies. The previous DNS and switch based approaches normally use a flat architecture which treats all server nodes equally. Such a solution does not provide a convenient way to dynamically recruit idle resources in handling peak load. Also, switches use simple load balancing schemes which may not be sufficient for resource-intensive dynamic content. Recently, a hierarchical architecture has been proposed for general network services with better flexibility in resource management and fault tolerance [2]. This work does not provide a detailed study on performance optimization and evaluation for issues specific to Web servers. Our contribution is to develop a resource management scheme for clustering Web servers with a master/slave (M/S) architecture and provide necessary scheduling optimization which considers the characteristics of Web workloads. The proposed techniques include separation of static and dynamic content processing, low-overhead remote CGI execution, and a reservation-based scheduler which considers both I/O and CPU utilization. Our experimental results show that the proposed optimization can lead to a 68% performance improvement. A detailed report on this work can be found in [6]. In evaluating the proposed techniques, we use the stretch factor [5], which is the ratio of response time with resourcesharing among requests to that without sharing. While there are other performance measurement metrics available, stretch factor is more suited for describing Web server performance because it represents a trade-off that allows short Web requests not to be slowed down too much by large jobs. This choice can meet userâ€™s psychological expectation: in a system with highly variable task sizes, users may be willing to wait longer for large tasks to complete, but expect that small tasks should complete quickly [l].