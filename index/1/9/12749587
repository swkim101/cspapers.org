In order to survive in todayâ€™s highly dynamic marketplace, companies must show a continuous and ever-increasing ability to adapt. This reflects on the adaptability requirements for the supporting software systems. Evolving a software system not only affects the source code responsible for the core application, but also the user interface. Our knowledge concerning software engineering tasks has grown considerably during the last 20 years and code entanglement has been tackled by several techniques such as aspect-oriented software engineering and component based software engineering. However few of these techniques have been applied onto user interfaces, especially for the concern of UI behaviour. Currently we still lack a clean way to separate and couple the user interface (UI) logic and the underlying application logic. Adding application logic to a UI (e.g. the UI changes because of some business logic) results in mixing UI and application code. Adding UI logic (e.g. the UI changes because of some UI event), results in rather complex code to check the UIs state and undertake the appropriate actions. The code becomes even more complex when combining both application and UI logic. This kind of entanglement makes evolving and maintaining UIs hard.