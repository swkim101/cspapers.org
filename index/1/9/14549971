Therecent development incomputingcurricula (ACM Curriculum91) has proposed that theory should be a fundamental part of every student’s computing education, instead of being segregated into optional courses. In particular, introductory programming courses are now likely to contain some theory. Most of the available books, however, perpetuate a division between topics covering verification (such as assertions, preand post-conditions, and loop invariants) and topics covering analysis of algorithms (such as asymptotic worst-case complexity). This paper argues that this division is misguided. We propose that students learn to evaluate the correctness and performance of programs like those they are writing. In order to do this for the typical exercises in a first course (e.g. array-processing, with use of subroutines), they must learn more of the theory than is usually presented, including the use of assertions expressed in first-order logic and the methods of asymptotic analysis for code containing procedure calls. We report on our experience of a curriculum where verification and analysis of algorithms are treated together under the generaI title “Reasoning About Programs”.