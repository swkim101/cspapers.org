1. PROBLEM STATEMENT The fundamental problem in software development is that it is too hard to write large, complex software quickly. The various directions of research in computer science indicate differing beliefs about which approaches will ultimately lead to a solution. This thesis explores the active intersection between the Object-Oriented Programming (OOP) and AspectOriented Programming (AOP) styles of progrmnming. The key idea behind module systems is that by allowing the language to enforce encapsulation of implementation details behind an interface, clients of the implemented behavior are forced to remain oblivious to the details of its implementat ion--and hence immune to changes to the implementation as long as the interface is unchanged. Programs constructed from modules can thus be analyzed in these smaller pieces (the modules), rather than as monolithic structures. If a module is reused, time spent understanding it is amortized over all uses. Modules can be implemented separately, resulting in streamlined parallel development, and reused in other programs, resulting in an overall reduction in programming tasks, without affecting other modules of the program. Thus, modules allow larger programs to be constructed, and by enabling parallel development and reuse, also significantly speed up construction. However, not all behaviors fit neatly into a module. Common examples are error handling and context-sensitive behavior (the exact behavior depends on where it was invoked from). In general, such behaviors rely on, and intercede in, events that occur in other parts of the program. Code in one module may affect an invariant maintained by another module. For example, we may wish to maintain a mirror of a disk directory in memory, without having to re-write either the ~/o module or its client. The specification is compact, but the implementation touches all disk operations. The AOP manifesto can be summarized as "languages have modules, but programmers have concerns." The key insight / opinion is that a single kind of module boundary be it along class, procedure, or group of classes will not be sufficient to capture all the kinds of concerns the program-