Let R be a relational database containing relations {R<inf>1</inf>,R<inf>2</inf>,…,R<inf>n</inf>}. For each relation R<inf>i</inf>, 1 ≤ i ≤ n, let D<inf>i</inf> = {d<inf>i,1</inf>,d<inf>i,2</inf>,…} be its set of domains and let K<inf>i</inf> = {k<inf>i,1</inf>,k<inf>i,2</inf>,…} ⊆ D<inf>i</inf> be its set of primary keys. Finally, let D = {D<inf>1</inf>,D<inf>2</inf>,…,D<inf>n</inf>} and K = {K<inf>1</inf>,K<inf>2</inf>,…,K<inf>n</inf>}. Suppose that a user of database R wishes to create a new relation, R<inf>n+1</inf>, whose domains are D<inf>n+1</inf> ⊆ ? D<inf>j</inf>. In this paper, the authors describe an algorithm which, given D K, and D<inf>n+1</inf>, determines a sequence of joins to generate R<inf>n+1</inf> from R<inf>1</inf>,…,R<inf>n</inf> (if such a sequence exists). Theoretical and empirical computing times of the algorithm are discussed. A new relational database system employing the algorithm is outlined.