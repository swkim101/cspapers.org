Goal-directed programming languages present many unique challenges for compiler developers. The objective of this project was to design and implement an optimizing compiler for the goal-directed, object-oriented Unicon programming language. The resulting compiler (Uniconc) has a unique topology that is designed to facilitate code transformation experiments. Uniconc produces intermediate code at four points in the compilation process, and code transformations in Uniconc can span one or more forms of intermediate code. Code transformation experiments conducted with Uniconc have produced optimizations that increase the speed of method invocations and field references, decrease the size of class instances, and improve the quality of type inferencing information. Measurements indicate that native Unicon targets generated by Uniconc are at least four times faster than VM-hosted Unicon targets.