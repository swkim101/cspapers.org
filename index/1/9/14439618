We present an algorithm that detects cycles of garbage in reference-based distributed systems. It is derived from Hughes' algorithm, in a simplified form that makes far fewer assumptions about the system. A local garbage collector marks incoming and outgoing references with timestamps that are propagated asynchronously between spaces. A central site computes the minimum reachable timestamp, allowing stale references to be identified and deleted. The coexistence of non-participating spaces, and spaces participating in collections controlled by more than one central site, is allowed. Introduction Remote references are often represented by "proxy" objects that transparently implement remote procedure calls. A reference to a remote object points to a stub which has the same interface as the remote object. The stub forwards procedure calls to a corresponding scion (or "server stub") that invokes the procedure directly on the target object. Stubs and scions are well adapted to the support...