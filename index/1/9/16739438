Addressing a question of Fredman and Willard from STOC'90, we show that fusion trees cannot be implemented using the AC<sup>0</sup> operations available through a standard programming language such as C. However, they can be implemented using AC<sup>0</sup> operations on emerging multimedia processors such as the Pentium 4.A fusion node is a linear space representation of an integer set <i>X</i> of size <i>O</i>(√<i>W</i>), where W ≥ log <i>n</i> is the word-length. The fusion node supports searches in <i>X</i> in constant time. Here, a search for <i>y</i> in <i>X</i> returns max{<i>x</i> ε <i>X</i>|<i>x</i> ≤ <i>y</i>}. Using fusion nodes in a <i>O</i>(√<i>W</i>)-degree fusion tree gave Fredman and Willard <i>O</i>(log <i>n</i>/log <i>W</i>) searching for general <i>n</i>, beating the comparison based lower-bound. However, the search routine uses multiplication which is not an AC<sup>0</sup> operation.Fredman and Willard asked if multiplication instructions could be avoided. We show that the answer is "no" unless you have room for a multiplication table. More precisely, restricting ourselves to the AC<sup>0</sup> operations available through C, we show that constant time look-ups or searches in sets of any non-constant size require space 2<sup>Ω(<i>W</i>)</sup>. However, if we have that much space, i.e., 2<sup>ε<i>W</i></sup> for some constant ε > 0, then we can tabulate multiplication of (ε<i>W</i>/2)-bit numbers, and then we get constant time multiplication of words using additions and shifts. Previous related lowerbounds all disallowed some common AC<sup>0</sup> instructions in C such as shifts.We note that even on the weaker "Practical RAM" the above 2<sup>Ω(<i>W</i>)</sup> space lower-bound for constant look-ups was only known for sets of size Ω(<i>W</i><sup>2</sup>) (Miltersen, ICALP'96). Our Ω(1) set size is best possible since sets of constant size can be searched directly in constant time.Contrasting the above result, we show that using the AC<sup>0</sup> operations available on Intel's new Pentium 4, we can implement both fusion trees and Fredman and Willard's later atomic heaps from FOCS'90. Among the many consequences, we get linear time and space AC<sup>0</sup> implementations of minimum spanning tree and undirected single source shortest paths. Also, we get optimal Θ(log <i>n</i>/log log <i>n</i>) implementations of dynamic rank and 1½ dimensional range searching. Previous optimal solutions required either multiplication or the use of self-designed AC<sup>0</sup> instructions not available on existing processors.