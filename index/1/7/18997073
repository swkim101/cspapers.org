Researchers have focused on frameworks and specialized languages that ease the reuse of previously developed software artifacts on new platforms by using domain concepts as a programming API rather than robot specific APIs. This approach relies upon the existence of a customized device driver program that maps the specific device API to the framework-based domain concepts. While this approach works well to isolate device semantics to a generalizable domain model, a customized driver is required to match each device to each framework or language. To that end, it may be worthwhile to explore the science of interfacing devices to frameworks. In this paper, we expand the previously presented RDIS to be more generalizable by redefining RDIS in terms of the robot device and framework domains. We introduce several high-level domain concepts that describe the invariant features of devices while providing parameterization for attributes that vary. We consider relevant threading models and a decomposition that insulates the application interface or framework connection from the robot-specific primitives. In addition to efficiencies that can be gained in providing declarative device to framework connectivity, new approaches in this space could be the basis for more user friendly development environments that use a discovery mechanism for presenting available control and access mechanisms.