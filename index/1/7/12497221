Most presently available interactive computer interfaces treat their users in an unfriendly, uncooperative, and inflexible way, resulting in feelings of frustration and a conseqeuent loss of productivity for the users. These problems have led to attempts (e.g. [6, 8, 12, 13]) to make interfaces appear more friendly and cooperative through the addition of advanced interface features such as spelling correction, on-line help, personalized defaults, etc.. While common-sense suggests such features may be helpful, there is little hard evidence about how helpful they are or whether they are worth the overheads they entail. A primary reason for this lack of information is the practical difficulty of experimentation. Many of these features are time-consuming to implement, are usually implemented without adequate instrumentation, and are implemented in different and difficult to compare ways from system to system (see [10], for example). These problems in evaluation suggest the need for a test-bed interface in which various advanced features could be tried out in a consistent and adequately instrumented way with a variety of application systems. In this paper, we present a detailed rationale and a partially implemented design for a test-bed of this kind.