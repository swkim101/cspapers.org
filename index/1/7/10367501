Recent research in formalizing effects of actions on a world in the presence of constraints have mostly concentrated on non-defeasible specifications , where the effect of actions and constraints are strictly specified. In this paper we show how to incorporate defeasibility into the specifications. In our approach we consider extensions of the high level language A of Gel-fond and Lifschitz and introduce defeasible constraints and effect propositions. While direct semantics of A does not need a logical language, our semantics is defined using extended logic programming. This is due to the defeasibility of the specification. Recent research in formalizing effects of actions on a world in the presence of constraints have mostly concentrated on non-defeasible specifications, where the effect of actions and constraints are strictly specified 1. The focus of these research was more on solving the frame problem and other problems such as the qualification and the ramification problem, and it made sense to start with non-defeasible specifications. In this paper we show how to incorporate defeasibility in the specification without loosing any of the good properties of previous specification languages. It is important to consider defeasible specifications for the same reason 1 Among the various approaches, the strictness of the high level specification language of A [5] and its successors [6], and the language used by Sandewal [10] is clear. Although, Reiter [9] and his group do not use a particular specification language per se, the syntactic restriction they put on how the effect axioms and constraints can be initially specified in first-order logic, and the dependence of the compilation process that follows on the input syntax amounts to a specification language. the necessity of non-rnonotonic theories in knowled representation and common-sense reasoning. The specifications are not definite and un-modifiable and may evolve. Our language should allow easy evolution or in the words of McCarthy, they should be 'elaboration tolerant 1. We take a first step in this direction by allowing defeasible specifications. In our approach we consider 2 extensions of the high level language A of Gelfond and Lifschitz [5] and introduce defeasible constraints and effect propositions. Direct semantics of A and many of its early successors (particularly , the formalization of transition functions that map state-action pairs to states) do not use a logical language. But our formalization of the transition function is done using extended logic programming. This is due to the defeasibility of the â€¦