The intermediate representations (IR) used by most compilers have an operational semantics. The nodes in the graph (or tree, or quad-code sequence) have an interpretation as the operation codes of some abstract machine, which may or may not be closely related to the target machine. A denotational semantics for an IR graph, in which each node has a static meaning, can lead to a clean interface between the front and back ends of the compiler. The correctness of the front end can be checked against the semantics of the IR, and so can the correctness of the back end. Thii paper describes semantics-directed compilers for Pascal and C that generate registertransfer code from such an JR graph. Code generation is accomplished by a sequence of transformations on the graph. Each transformation replaces a subgraph matching a particular pattern by a (usually) smaller subgraph, and may emit a machine-instruction; at each stage the graph continues to have a static interpretation. As in a denotational semantics for a programming language, states are represented explicitly (as internal nodes in the graph), and there are no side-effects implicit in the graph. To illustrate, we might wish to generate machine code to implement the statement b := c + (a := 5). This is represented semantically as shown (open circles represent function application; dark circles are mplcs):