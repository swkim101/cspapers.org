We consider the problem of assembling a given set of DNA strings into a small set of strings. A simple version of this problem is known as the superstring problem. A superstring for a given set of strings {s,,. . . . sm} is a string which contains each s, as a substring. There is an extensive literature on the construction of shortest length superstrings. We first give a linear-time algorithm for the greedy heuristic to construct a superstring. We then generalize the problem to several DNA string assembly problems and develop greedy implementations for them. We also describe efficient algorithms to compute the suffix tree for strings over unbounded alphabets and to compute nearest common ancestors in trees. We have implemented the most general algorithm, which closely matches the real DNA string assembly problem. We report the success of our efforts in assembling both actual DNA sequence data as well as strings created by randomly sampling substrings from long strings.