Aspect oriented programming allows software developers to modularize crosscutting concerns. While the emphasis has been on program implementation, it has been argued that applying aspect orientation at the design level can also be beneficial. However, we lack a convenient---i.e., both simple and expressive---notation to represent such designs, in particular, for fast, agile developments. In this paper, we describe a UML-based design notation to model the main concepts of aspects, their behavior, and their relationships with the base system. The notation uses UML's class, sequence, and state diagrams, to which it adds few new elements to model pointcut specification, pointcut activation, and the aspects' internal behavior; pointcut specifications can be modeled at three levels of detail. The notation is being used by a company that works on short projects, with limited time for design activities.