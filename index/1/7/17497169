We study the basic problem of preemptive scheduling of an online stream of jobs on a single processor. The <i>i</i>th job arrives at time <i>r</i>(<i>i</i>) and has processing time <i>p</i>(<i>i</i>) that is known at the time of its arrival. If <i>C</i>(<i>i</i>) is the completion time of job <i>i,</i> then the flow time is <i>C</i>(<i>i</i>) - <i>r</i>(<i>i</i>) and stretch of a job is the ratio of its flow time to its processing time; that is, <i>C</i>(<i>i</i>)-<i>r</i>(<i>i</i>)/<i>p</i>(<i>i</i>). Flow time considers the time a job is in the system regardless of the service it requested; the stretch measure relies on the intuition that a job that requested long service must be prepared to wait longer than the small jobs.In this paper, we present improved algorithmic results in stretch scheduling. We first show that a simple online algorithm that takes amortized <i>O</i>(1) time per job arrival is <i>O</i>(Δ<sup>1/2</sup>)-competitive with respect to maximum stretch, where Δ is the ratio of the largest processing time to the smallest processing time. This is significantly more efficient than the best known online algorithm for this problem which takes ω(<i>n</i><sup>2</sup>) per scheduling step (<i>n</i> is the number of jobs seen thus far). We next present a polynomial time approximation scheme for average stretch scheduling. The previous best polynomial-time algorithm is the shortest remaining processing time algorithm, which achieves a 2-approximation. Finally, we consider the impact of incomplete knowledge of job sizes on the average stretch performance of scheduling algorithms. We show that a constant-factor competitive ratio for average stretch is achievable even if the processing times (or remaining processing times) of jobs are known only to within a constant factor of accuracy.