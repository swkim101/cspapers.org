Index structures in object-oriented database management systems should support selections not only with respect to physical object attributes, but also with respect to derived attributes. A simple example arises, if we assume the object types Company , Division, and Employee, with the relationships has division from Company to Division, and employs from Division to Employee. In this case the index structure should allow to support queries for companies specifying the number of employees of the company. Unfortunately, there is one main problem with index structures addressing derived attributes, namely the question: Which entries in which index structures have to be updated after a certain update in the object base? In the example above, the creation of a new employee must trigger an index update for the corresponding company. In the present paper we propose a practical solution for this problem. This solution is based on so-called index update de nitions which comprise (1) an event description for the event causing the need for the index update, (2) a reference for the a ected index structure, (3) a query determining the elements for which the respective index entries have to be updated, and (4) the corresponding update operation. Using these index update de nitions we can handle complex derived attributes de ned e.g. employing regular path expressions. The paper rst describes the environment for our considerations originating from the elds of software engineering environments and information retrieval. Thereafter the use of our approach is demonstrated by the help of a comprehensive example. Finally we sketch the implementation of our approach based on a multi-thread architecture.