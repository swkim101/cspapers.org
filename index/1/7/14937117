commonality and define multi-use assets. 3.9 Consider a 34ier architecture with well-defined APls Jn order to manage the complexity of the application logic, we wanted to build a thin Presentation layer and objects that encapsulate the business logic behind a well-defined API. This leads to a loosely coupled system that is more flexible and extendible. By emphasizing the need for isolating the business logic into the Object Services Layer, we were able to work out reasonable approaches at providing data to the user interface without pushing too much product functionality into the Presentation Layer. As APIs were developed, manual pages were written and published. Prototyping was used to validate the APIs, with much of the functionality inside the objects “stubbed out”. Early integration cycles were made possible by focusing on necessary functionality, and “stubbing out” the code which was not ready for integration. Guideline: Iu order to construct an extendible, high-value application, consider a S-tier architecture with thin presentation layer and well-defined APIs to business objects. 3.10 Use the ORB to provide standard (CORBA) external interfaces. Encapsulate use of non-standard features. We had no requirement to advertise open CORBA interfaces to our product, although this is a possible future evolution. Some vendors restrict their ORB to the features defined in the CORBA standard. But many have gone beyond the standards to provide additional capabilities believed to be useful in building systems based on an ORB. For example, Expersoft provides the non-standard features of asynchronous method invocation and transfer of objects by value. We saw obvious value in some of these additional services provided by the ORB, and decided to use them. This means that we do not define our object interfaces in IDL, but in the Extended C-H language of Expersoft. We felt that avoiding use of these facilities would simply mean we would have to develop comparable capabilities ourselves. Using the supported feature made more sense for internal interfaces. It leaves us with a step to take before we can advertise CORBA interfaces: a gateway is needed to support an lDL interface and map it to the interfaces internal to our system. But we feel this approach gives us more productivity than limiting our internal interfaces to those that conform to CORBA. In several areas we were able to encapsulate the non-standard feature behind a C-t+ interface. For example, we have classes defined that provide an interface to a notification mechanism that uses the proprietary feature called ports. Guideline: Prefer CORBA interfaces for externally published interfaces and for more loosely-coupled interfaces, but take advantage of non-standard ORB features to develop the internal application complexity. Where