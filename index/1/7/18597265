computational device with a specified instruction set capable of operating on specified objects. Thus we can define a computational model as a pair (0, 1) where 0 is the set of objects in the model and II is its instruction set. Program: This leads immediately to the concept of a program. For a given computational model, a program defines a computation in this model. Syntax and semantics of a formal language: The concept of a formal language can be motivated by considering how to write complicated programs for a given computation model. To write such programs we need to make up a formal language, by defining a syntax and a semantics – a set of mappings which map every permitted syntactic construct to its meaning, or semantic denotation. We can then introduce the Backus-Naur Form (BNF) and, as an illustration, use it to define the syntax of a simple formal language (e.g. that of arithmetic expressions). Next, the principle of denotational semantics can be explained using the same language as an example. Abstractions: To write more general programs which allow for more general computations which depend on arbitrary values (that is, functions with arguments), we need to have a means of constructing abstractions. To this end, we introduce A-expressions. Programming language: Abstractions lead naturally to programming languages. In order to apply an abstract ion repeatedly to different concrete arguments, we need to be able to create, name and remember an abstract ion. A formal language which allows the user to define (create, name and remember) and apply abstractions is called a programming language. For example, the following could be a program incorporating the definition and an application of an abstraction, ‘product’. def-prog exanrplel :=lambda(a, b)=(c) clef-fun product: =lambda(x, y) .x*y modify c: =product (a, b) endprogram Here, def_prog is a keyword denoting a program. example~ is a program identifier defined to be a function that maps the input variables a and b to the output variable c. lambda( a, b) = ( c ) defines this function, where lambda is a keyword that denotes a Xexpression. The reserved symbol : = means ‘becomes defined to be’. def -fun is a keyword denoting a function definition, and modify is a keyword that denotes the assignment command. endprogram is a bracket keyword.