This article summarizes a discussion and presented paper " Four Yards and a Cloud of Dust: Teaching Objects to Graduate Software Developers " from the 1992 OOPSLA Conference. The relative immaturity of 00 approaches makes teaching them somewhat difficult. This is particularly true when your students are accomplished software professionals and graduate students. One way to tackle this problem is to provide a synthetic philosophical and methodological foundation upon which discussions of difficult or confusing issues can be constructed. This approach is currently used in our two semester 00 development course sequence. At the University of St. Thomas we operate the largest graduate program in applied software engineering in the United States. All of our students have extensive software experience and are concurrently employed as professional developers or managers. This makes them decidedly pragmatic, skeptical, vocal and articulate, openly willing to challenge the professor, immune to hype, exceptionally perceptive, and capable of backing up any objections to course content with technical and political experience. An ideal student body. Since 1989 we have been teaching a one semester course (expanded this year to a two semester sequence) in object-oriented software development. Multi-day technical seminars and three-hour overview seminars are also offered on a regular basis. The first semester provides a survey of 00 development issues and a focus on 00 programming. In addition to readings and classroom exercises, students are expected to complete a programming project in Smalltalk (Digitalk's Smalltalk/V Windows). That project is documented with a set of analysis and design models including CRC cards, class hierarchy graph, collaboration graph, and a sample set of diagrams as advocated by Booth, Schlaer, Embly or Rumbaugh. In the second semester the focus is analysis and design, multi-developer projects, and databases. Students work in teams to complete a " real world " application using ENVY/Developer for configuration management. A number of texts have been used in the course. Coad and Yourdon-Object Oriented Analysis was very poorly received and was quickly abandoned. Wirfs-Brock, et. al.-Designing Object Oriented Software has been used since. Its general tone suits the perspective of the course and although students find several points ambiguously treated it seems to provide an accessible introduction to concepts and to the analysis process. Ivar Jacobson's Object Oriented Software Engineering will replace Wirfs-Brock in future sessions of the first semester course.