Dictionary code compression has been proposed to reduce the energy consumed in the instruction fetch path of processors or to reduce program footprint in memory. With this technique, instructions, or instruction sequences, are in the binary code replaced with short code words that in run-time are replaced with the original instructions using the dictionary inside the data-path. We present here a new method with the aim to further improve on code density as compared to previously proposed dictionary code compression techniques. It is a 2-level approach capable of handling compression of both individual instructions and code sequences of 2-16 instructions. Our proposed approach is more flexible and has better dynamic compression ratio and fetch path energy consumption as compared to previously studied 1-level approaches. The energy consumed in the instruction fetch path is reduced with up to 56% as compared to using uncompressed instructions.