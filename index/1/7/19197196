The implicit dictionary problem is that of maintaining a dynamic ordered set, <i>S</i>, under the operations search, insert and delete, so that the elements of <i>S</i> are stored in the first |<i>S</i>| locations of an array. No operations are permitted on the data other than comparisons (≤) and interchanges. The only auxiliary memory permitted is a constant number of <i>O</i>(log |<i>S</i>|) bit integers. The organization will, then, rely heavily on the permutations of the relative order of the values in which the data is stored. While such a structure can be maintained in <i>O</i>(log |<i>S</i>|) time, the most interesting lower bound on the topic is that of Borodin, Fich, Meyer auf der Heide, Upfal and Wigderson [3]. They proved a tradeoff between search and update time in implicit dictionaries: if the update cost (comparisons <i>and</i> exchanges) is <i>O</i>(1), then the search cost must be Ω(|<i>S</i>|<sup>ε</sup>), for some constant ε > 0. The authors left open the question of whether such a tradeoff would hold if only the modifications performed during an update were considered. They conjectured that any implicit dictionary performing only <i>O</i>(1) exchanges per update should very quickly become "disorganized", and so require Ω(|<i>S</i>|<sup>ε</sup>) comparisons per search. We answer this long-standing open question by <i>disproving</i> the conjecture.