Several existing cache-oblivious dynamic dictionaries achieve <i>O</i>(log<sub><i>B</i></sub> <i>N</i>) (or slightly better <i>O</i>(log<sub><i>B</i></sub> <i>N/M</i>)) memory transfers per operation, where <i>N</i> is the number of items stored, <i>M</i> is the memory size, and <i>B</i> is the block size, which matches the classic B-tree data structure. One recent structure achieves the same query bound and a sometimes-better amortized update bound of <i>O</i>(1/<i>B</i><sup>Θ(1/log log <i>B</i>)2)</sup> log<sub><i>B</i></sub> <i>N</i> + 1/<i>B</i> log<sup>2</sup> <i>N</i>) memory trans-fers. This paper presents a new data structure, the <i>xDict</i>, implementing predecessor queries in <i>O</i>(1/ε log <sub><i>B</i></sub> <i>N/M</i>) worst-case memory transfers and insertions and deletions in <i>O</i>(1/ε<i>B</i><sup>1-ε</sup> log<sub><i>B</i></sub> <i>N</i>/<i>M</i>) amortized memory transfers, for any constant ε with 0 < ε < 1. For example, the xDict achieves subconstant amortized update cost when <i>N</i> = <i>M</i> <i>B<sup>o</sup></i>(<i>B</i><sup>1-ε</sup>), whereas the B-tree's Θ(log<sub><i>B</i></sub> <i>N</i>/<i>M</i>) is subconstant only when <i>N</i> = <i>o</i>(<i>MB</i>), and the previously obtained Θ(1/<i>B</i><sup>Θ(1/(log log <i>B</i>)2)</sup> log<sub><i>B</i></sub> <i>N</i> + 1/<i>B</i> log<sup>2</sup> <i>N</i>) is subconstant only when <i>N</i> = <i>o</i>(2<sup>√<i>B</i></sup>). The xDict attains the optimal tradeoff between insertions and queries, even in the broader external-memory model, for the range where inserts cost between Ω(1/<i>B</i> lg<sup>1+ε</sup> <i>N</i>) and <i>O</i>(1/lg<sup>3</sup> <i>N</i>) memory transfers.