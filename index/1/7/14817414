Abstract Oracle first implemented multiversioning, which was called readconsistency, in Version 4 (ea. 1983) of the kernel. It supportedthe old master/new master programming paradigm for both applicationbuilders and query-processor implementors while avoiding thereader/writer serialization that results from using automatic sharelocks. The resulting transaction consistency model was arcane, notexactly serializable, but pragmatic in actual use. In this session,Mr. Bamford will cover read consistency from a number ofviewpoints. First, the model will be described and a little detailabout Oracles current implementation will be given. Next, theconsequences of having read consistency as part of the databasescore architecture will be discussed. In particular, the effects onthe designs for row locking, query processing, distributed query,distributed cache coherence, referential integrity, and set updateswill be described. This will be followed by a comparison of Oraclesread consistency model to other common concurrency models, lookingat cost and throughput under a variety of workloads, Finally, Mr.Barnford will propose how Oracle intends to carry read consistencyinto the future as support is added for complex objects,distributed computations, and long transactions.