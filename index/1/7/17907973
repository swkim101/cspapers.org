This paper describes a practical means of allowing rule-based apphcations to execute against standard relational databases concurrently with other database applications. The approach is intended for the “hard expert-system” model. We claim m this model programs do not change frequently, Consequently, we are able to describe a method that comprises static program analysis and compile-time transformation. We describe simple transactional extensions to Venus (VenusDB) a C++ based rule language that serves as the basis of our research in active database systems. Critical aspects of the approach comprise the following. Venus is unique in that it includes a declarative technique, both syntactic and semantic, for developing modular, hierarchical rule-based programs. The hierar-chlcaf composition of Venus modules is ideally suited to nested transaction models. Coupled with fixed point semantics, VenusDB provides a clean syntactic way for the programmer to control the isolation requirements of his application. A means of compiling the declared isolation policy into a correctly scoped locking behavior is described, thus optimizing the duration and extent of an application’s locks.