Introduction The problem of formal correctness proofs for programs has received a great deal of attent~ol, [MA] . Recently models have been developed for verification systems that allow the formulation of questions concerning the consistency and completeness of such systems. In this paper we present the axiomitization of a simple programming language, Lm (Meyer and Ritchies [MR] Ll with menus 1), along with interpretive model based on Presberger’s arithmetic, P We show the verification system +“ to be consistent and complete with respect to the interpretive model and develop a “relative” complexity result. The complexity result states that in a proof of P{A}Q, the size of any line of the proof is no larger than a polynomial in \Pl+lAl+l Ql assuming that we don’t count proofs lying solely in P+. Lm is the first non-trivial programming language in which a complete and consistent interpretive semantics has been given. Furthermore, our complexity result is an encouraging result for those hoping to automate parts of the verification process. Given a mathematically astute programmer (whomwe assume can decide the validity of P+ formulas), the verification of any program in Lm is computationally feasible. This is because the space necessary to write down assertions that must be checked for validity is bounded by a polynomial. Although L is not a general purpose language, it m is fairly powerful in that it computes all the ‘+ representable functions. Also, as Cooper points out [CO], a significant fraction of mathetnatics arising in proofs about programs lies in P+. Preliminarie~ We fix an assertion language, a programming language and a model for the assertion language calling them respectively LA, PA and ‘A “ Let A be a program in PA, P and Q assertions in