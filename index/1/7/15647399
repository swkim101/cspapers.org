Software artefacts at different levels of abstraction are closely inter-related. Developers require support for managing these inter-relationships as artefacts evolve during development. We describe a conceptual architecture and prototype for supporting traceability and inconsistency management between software requirements descriptions, UML-style use case models and black-box test plans. Key information models are extracted from each of these different kinds of software artefacts and elements in different models are implicitly or explicitly linked. Changes to one software artefact are detected and propagated to related artefacts in different information models and inform developers of change impacts.