The bridge algorithm adopted by the IEEE 802.1 committee for interconnecting 802 LANs requires the topology of the Extended LAN to be a Spanning Tree. A distributed algorithm to compute a spanning tree dynamically has already been published [1], and adopted by the IEEE 802.1 committee [2]. In this paper, however, we describe an alternative distributed algorithm to compute a spanning tree. This algorithm, variants of which have been implemented, initially appears simpler than the IEEE 802.1 algorithm; we show, however, that it has subtle failure modes that makes it unattractive in practice.
We also show that some failure modes of the Spanning Tree Algorithm introduced in this paper are characteristic of a broader class of distributed graph algorithms. Such algorithms potentially examine all possible path combinations between a source and destination in a graph. Thus, they suffer from exponential message overhead in topologies that have an exponential number of paths between source and destination. Attempts to fix this problem lead to extra complexity (in terms of CPU, bandwidth, memory) when compared to other algorithms. We briefly describe a second example belonging to this class, and propose that designers avoid such algorithms if restricting the topology or scale of the network is unacceptable.