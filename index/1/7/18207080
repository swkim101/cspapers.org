A knowledge structure for a software library consisting of abstract data types (ADTs) is defined. Both automatically-derived and explicitly-defined relationships are used to impose a knowledge structure on the ADTs. ADTs are defined by an ADT descriptor and one or more ADT implementations. Performance characteristics and default implementations are provided to assist users in choosing among alternatives. An explanation is given as to how the knowledge structure helps users find ADTs of interest, browse through similar ADTs to investigate alternatives, and build and customize executable software components from ADTs in the library.