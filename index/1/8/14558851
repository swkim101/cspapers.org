A directed logic variable is a two-port communication channel that can transmit at most one message, which may contain embedded ports. The ability to send both input and output ports in messages allows directed logic variables to implement other communication primitives such as streams and remote procedure calls; to realize dynamic process migration; and to support sophisticated mail and window system protocols. Hence directed logic variables can be useful as an implementation layer for concurrent languages and as an extension to sequential procedural languages. We provide an abstract, programming language independent, operational semantics for communication with directed logic variables and develop effective distributed implementations of it. Our implementation algorithms ensure that, in spite of arbitrary port migration, if a message is sent on a channel’s output port and the channel’s input port eventually stops migrating then the message will eventually reach it. In addition, our algorithms are efficient and robust: They dynamically shorten the logical routing paths caused by port migration, collect unused routing table entries, and are resilient to a certain class of network faults. We prove that the algorithms implement the operational semantics using the refinement mapping proof technique and temporal logic inference rules for weak and strong fairness, demonstrating the effectiveness of combining these two met hods. Permission to copy without fee all or part of this material is granted provided that the copies are not made or distributed for direct commercial advantage, the ACM copyright notice and the title of the publication and its date appear, and notice is given that copying is by permission of the Association for Computing Machinery. To copyotfrerwise , or to republish, requires a fee arrd/or specific permission. @ 1990 ACM 089791419-8/90/0012/0221 $1.50