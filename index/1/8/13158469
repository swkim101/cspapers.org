Optimizing and parallelizing compilers for procedural languages rely on various forms of program dependence graphs (<italic>pdgs</italic>) to express the essential control and data dependencies among atomic program operations. In this paper, we provide a semantic justification for this practice by deriving two different forms of program dependence graph — the <italic>output pdg</italic> and the <italic>def-order pdg</italic>—and their semantic definitions from <italic>non-strict</italic> generalizations of the denotational semantics of the programming language. In the process, we demonstrate that both the <italic>output pdg</italic> and the <italic>def-order pdg</italic> (with minor technical modifications) are conventional data-flow programs. In addition, we show that the semantics of the <italic>def-order pdg</italic> dominates the semantics of the <italic>output pdg</italic> and that both of these semantics dominate—rather than preserve—the semantics of sequential execution.