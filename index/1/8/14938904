We introduce a new family of error-correcting codes that have a polynomial-time encoder and a polynomial-time list-decoder, correcting a fraction of adversarial errors up to /spl tau//sub M/ = 1 - /sup M+1//spl radic/(M/sup M/R/sup M/) where R is the rate of the code and M /spl ges/ 1 is an arbitrary integer parameter. This makes it possible to decode beyond the Guruswami-Sudan radius of 1 /spl radic/R for all rates less than 1/16. Stated another way, for any /spl epsiv/ > 0, we can list-decode in polynomial time a fraction of errors up to 1 - /spl epsiv/ with a code of length n and rate /spl Omega/(/spl epsiv//log(1//spl epsiv/)), defined over an alphabet of size n/sup M/ = n/sup O(log(1//spl epsiv/))/. Notably, this error-correction is achieved in the worst-case against adversarial errors: a probabilistic model for the error distribution is neither needed nor assumed. The best results so far for polynomial-time list-decoding of adversarial errors required a rate of O(/spl epsiv//sup 2/) to achieve the correction radius of 1 - /spl epsiv/. Our codes and list-decoders are based on two key ideas. The first is the transition from bivariate polynomial interpolation, pioneered by Sudan and Guruswami-Sudan [1999], to multivariate interpolation decoding. The second idea is to part ways with Reed-Solomon codes, for which numerous prior attempts at breaking the O(/spl epsiv//sup 2/) rate barrier in the worst-case were unsuccessful. Rather than devising a better list-decoder for Reed-Solomon codes, we devise better codes. Standard Reed-Solomon encoders view a message as a polynomial f(X) over a field F/sub q/, and produce the corresponding codeword by evaluating f(X) at n distinct elements of F/sub q/. Herein, given f(X), we first compute one or more related polynomials g/sub 1/(X), g/sub 2/(X), ..., g/sub M-1/(X) and produce the corresponding codeword by evaluating all these polynomials. Correlation between f(X) and g/sub i/(X), carefully designed into our encoder, then provides the additional information we need to recover the encoded message from the output of the multivariate interpolation process.