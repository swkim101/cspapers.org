Most introductory courses in theoretical computer science (formal language theory or computability theory) start with a seemingly endless series of definitions, including what it means for a grammar or language to be regular, context-free, etc., or what it means for a function to be recursive, primitive recursive, or partial recursive. Bright students immediately ask two questions. First, what are examples of languages or functions that belong to one class but not the other? Second, is some particular language context-free, or is a particular function recursive?
 We must develop new techniques which allow us to give a negative answer to question two (and thus to answer question one as well). In this note we will discuss some of the methods that are often used in elementary proofs in formal language theory and computability theory.