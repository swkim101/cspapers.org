There is a plethora of instructional literature on Object-Oriented (OO) design. Riel’s book [17] of heuristics, for instance, presents 60 rules of thumb for structuring OO systems (e.g don’t create god classes). The Gang of Four’s Design Patterns book [7] contains 23 “patterns”, which are “elegant” solutions to recurring OO design problems (e.g. use Observer to break the dependency of an application’s model on its view). Other books [4, 19, 10] provide entire methodologies for structuring OO systems with advice ranging from naming conventions (e.g. classes should be nouns) to criteria for identifying abstractions as candidates for operations, classes and subsystems. Despite the vast amount of literature describing how OO systems should be structured, we have very little knowledge of how they are actually structured. In other words, we have very little idea the extent to which software developers in industry follow the “design principles” proposed in the literature. Casual observations made by luminaries such as Wirth [20], Parnas [16] and Foote [6] suggest that many design principles are not widely followed in the construction of “real” software systems. In this paper I explain why we would like to know with greater certainty the extent to which developers of OO software follow design principles, and how we might go about determining this.