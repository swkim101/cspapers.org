Smartcard is the most secure and cheap portable computing device today. It has been used successfully around the world in various applications involving payment and identification, making it the world’s highest-volume market for semiconductors in the year 2K. As smartcards become multi-application (by hosting a dedicated Java Virtual Machine) and more and more powerful (32 bit processor, more than 1MB of stable storage), the need for database management arises. Embedding database management (query processing, access rights, transaction control) in the card indeed simplifies and makes application code smaller and safer. A smartcard embedding a DBMS is undoubtedly the best candidate to host data in a highly-available and secure way. This makes it well-suited for ubiquitous computing, where data need be available anywhere, anytime and from any terminal without compromising privacy. Examples of applications in secure ubiquitous computing are: (i) downloadable databases storing confidential data (e.g., diplomatic, military or business information) that can be downloaded on the card, for example before traveling, (2) user environment representing an extensible card’s holder profile collecting computing environment data (PC’s configuration, passwords, cookies, bookmarks, software licenses...), an address book as well as an agenda, and (3) personal folders of different nature: scholastic, healthcare, car maintenance, loyalty. However, smartcards have severe hardware limitations (tiny RAM, little stable storage, very costly write in stable storage and lack of electrical autonomy) making traditional database techniques irrelevant. Following Moore’s law for processor and memory capacities, smartcards will get rapidly more powerful but will remain very restricted compared to other portable, less secure, devices such as Personal Digital Assistants (PDA). While small footprint versions of popular DBMS (e.g., Oracle 8i Lite, DB2 Everywhere) have been designed for portable computers and PDA, they do not address the more severe limitations of smartcards. ISOL’s SQLJava Machine DBMS [Car99] is the first attempt towards a smartcard DBMS and SCQL [ISO99], the standard for smartcard database language, emerges. While both designs are limited to single select, they exemplify the strong interest for dedicated smartcard DBMS. In a recent paper [BBP+00], we addressed the problem of scaling down database techniques for the smartcard and proposed the design of what we call a PicoDBMS. We gave an in-depth analysis of the problem by considering the smartcard hardware trends, derived design principles for a PicoDBMS and proposed a dedicated storage and query execution model. Since then, and as promised in that paper, we have implemented a full-fledged PicoDBMS prototype in JavaCard. We are porting it on Bull’s 32 bit smartcard, which we got only recently. Thus, the main objective of the demonstration is to: • Validate our design by building a complex database application (with respect to the smartcard) on our prototype and showing the benefits of the approach. • Validate our techniques by showing that they match the smartcard hardware constraints and the user’s response time expectation. The paper is organized as follows. Section 2 introduces the health card application which we will use for the demonstration. Section 3 presents the PicoDBMS design and implementation choices which are needed to understand the value of the demonstration. Section 4 presents the demonstration platform and discusses the way we validate our techniques.