LetX<subscrpt>1</subscrpt>,...,X<subscrpt><italic>n</italic></subscrpt> be pairwise independent random variables of known (but not necessarily identical) distribution; we wish to select a subset of these whose sum will be as close as possible to some known target value <italic>T</italic>. Conditions described below force the selections to be made by a primitive distributed system (similar to one considered by Papadimitriou and Yannakakis [2] in PODC '91); here we are able to obtain a surprising amount of information about optimal solutions.
The conditions are that each variable must be “programmed” in advance, joining the selected set according to its own value. Thus, for example, one variable might be programmed to join just if its value lies between α and    β, while another is told to join regardless of its value. Our object is to find a strategy, that is, a collection of programs, which minimizes the mean square error in approximating <italic>T</italic>. Typical applications involve producing a steady flow of some commodity when supply is controlled at a multiplicity of random sources.
It turns out that there is always an optimal strategy in which each <italic>X<subscrpt>i</subscrpt></italic> is programmed to join if its value is between 0 and &thgr;<subscrpt>i</subscrpt>, for appropriate choice of thresholds &thgr;<subscrpt>i</subscrpt>. When the variables are identically distributed, we examine conditions under which the &thgr;<subscrpt>i</subscrpt>'s must be equal. The case of uniform distributions on [0,1], for which  the   above conditions are <italic>not</italic> satisfied, is analyzed in detail, showing the rather bizarre behavior of the &thgr;<subscrpt>i</subscrpt>'s which may take place in general as the target value is gradually changed.
Next, we analyze the problem in which the variables are permitted to contribute any <italic>part</italic> of themselves to the sum; here it turns out that in an optimal strategy each program will be of the form “contribute the minimum of <italic>X<subscrpt>i</subscrpt></italic> and &eegr;<italic><subscrpt>i</subscrpt></italic>” with all the &eegr;i's equal in the i.i.d. case.
Finally, we show how the original target shooting problem can be generalized to a kind of load balancing, where variables are assigned to different buckets,  each  with its own target, and the penalty is a weighted sum of squared errors. The surprising result here is that when the weights are equal, an optimal solution assigns variables only according to their signs.