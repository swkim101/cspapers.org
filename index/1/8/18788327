This paper presents a general model for the representation and manipulation of module level software design information, leading to the effective reuse of software design information across different programming languages. Language independent design documents are represented as ASCII files containing tagged design information sufficient for the construction of a compilable program architecture. The resulting architecture is composed of documented module stubs which describe calling relationships, parameters, functional descriptions, and algorithms characteristic of the architecture. No executable code is included in the compilable modules. Frameworks of tagged locations in language dependent standard module templates are matched against corresponding tags in the ASCII design files, effectively blending language dependent and independent information into a compilable stub architecture. The process is reversible in that a language independent design file can be generated from am architecture in the standard tagged format, thus supporting the movement of design information across different programming languages.