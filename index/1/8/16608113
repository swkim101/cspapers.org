As software engineering moves into its fourth decade, system software suffers from many of the strengths and some of the frailties that are experienced by humans. Software engineering approaches its midlife with many accomplishments already achieved, but with significant work yet to do. Aspect-oriented models have shown to be an effective means of capturing and communicating system software design. However, there are more models than software design models: We believe that aspect oriented models work for system software development on several aspects. In this paper, we explore what we have come to understand as crucial aspects of an extensible and adaptable model for system software. We present an extensible and adaptable model in which system software is decomposed into a set of architectural abstractions. A design pattern is described that supports the separation of concerns among the components of the abstractions. The proposed model provides a formal methodology for the architectural design and specification of system software.