Object-oriented programming (OOP) encapsulates object implementations with access specifiers like public and private. Compilers can verify that code adheres to specifiers, but verification can be broken in languages like C++ by unchecked pointers. Thus, C++ programmers are taught that "private is not secure." The lack of isolation between objects frustrates memory protection in OOP code. We propose hardware and software support to confine memory accesses in fine-grained memory regions that isolate within and between objects so that C++ programs can enforce encapsulation and prevent pointer-based exploits. Such support makes private secure. Although we target C++, our approach handles generic techniques like inheritance, polymorphism, dynamic dispatch, dynamic binding, and encapsulation.