The Voronoi Diagram for a set of data points (called sites) is a subdivision of the plane into regions, one region for each site. The region belonging to a given site consists of that portion of the plane closer to it than to any of the other sites. Shamos and Hoey [SH75] gave an optimal O(n log n) algorithm for computing the Voronoi diagram and showed that it leads to optimal algorithms for a number of other problems in computer science. The diagram has been re-discovered many times for applications in geography, meteorology, biology, anthropology, archeology, astronomy, geology, physics, metallurgy, and statistics. Boots [B87] gives a summary of many of these applications, with dozens of references. The geometric dual of the Voronoi diagram is called the Delaunay diagram. It has the property that every edge is contained inside a circle with no sites (other than its endpoints) in its interior or on its boundary. If no four sites are cocircular, the Delaunay diagram is a triangulation of the sites. If not, it can be extended to a triangulation by arbitrarily triangulating regions with more than three sides. Any such triangulation is called a Delaunay triangulation. It has the property that every edge is contained in a circle with no sites in its interior. Such a circle is calledpoint-free. A number of generalizations of the Voronoi diagram have been presented. The ones relevant to this paper define the diagram for other distance measures. Hwang gives an algorithm for the Ll metric [H79]. Lee and Wong give an algorithm for the Ll and L, metrics bW80]. Lee gives an algorithm for general Lp metrics jL80]. Widmayer, Wu, and Wong give an algorithm for metrics where paths between points are limited to a fixed number of orientations [WWW87]. Chew and Drysdale give an algorithm for general distance measures that Minkowski called convex distance functions, where the “unit circle” can be defined to be any convex shape [CD85]. All of the other metrics Unfortunately, the algorithms discussed above are not easy to implement. Some do not handle special cases like cocircular points or points lying on a line parallel to a flat side of the convex shape. The data structures and algorithms to represent and manipulate bisector curves are complex. There can be problems with numerical stability. Robert Collins implemented Chew and Drysdale’s algorithm in 115 pages of very well documented Mesa code, with about three quarters of the code handling computing bisectors, * Dept. Math & CS, Dartmouth College, Hanover, NH 03755 + Supported in part by National Science Foundation Grant DMC-8704147.