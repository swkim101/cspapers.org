A close look at the literature in robotics reveals that robots are increasingly being provided with sophisticated skills. Many of these skills are coded in programs or routines freely available to researchers and engineers alike, so that they can build more sophisticated systems. However, in spite of the huge array of skills available, the creation of truly effective autonomous robotics systems still evade researchers. When faced with the task of designing a robot that solves a particular problem, a roboticist has to answer the following questions: • Which skills are needed and how to combine them. • How skills should be modified to work in cooperation with others. • Which skills are not available and need to be created. In this paper we propose to address these problems in a autonomous way and within the same framework. We rely on the assumption that many low and high level actions can be reliably performed by a robot using ad-hoc algorithms. These include for example object detection, motion planning and grasping. The role of our proposed algorithm is therefore to i) structure and organise the execution of available actions, ii) adapt these actions to solve a particular problem, iii) create new actions when necessary. This process can be carried on in a hierarchical fashion. In our proposed approach an action is performed by a Finite State Automaton (FSA, plural automata) [1], whose nodes represent skills that are externally provided to the robot (or previously created actions) and whose transitions are the outcomes of the actions. Each action can have a set of parameters. The FSA are instantiated by a an evolutionary process [2] that simultaneously evolves the topology of the FSA and the parameters of the actions. Given the particular problem that we aim to solve we have been required to devise new evolutionary operators. The proposed approach does not depend on a particular implementation of an action. Therefore if a new action is provided that performs better than an old one, the corresponding node in the evolved FSA can be replaced with the new action without impairing the functionalities of the FSA. Reuse of components thus becomes an important advantage of our proposed algorithm. We have conducted several experiments, both on a real robot and on a simulator, and we conducted extensive testing to prove that the obtained FSA can reliably drive the robot to solve the problem for which they were evolved. The code for the all the experiments is available on-line1.