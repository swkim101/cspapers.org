Denotational semantics was introduced by Strachey as a means of defining semantics of programming languages. It's mathematical foundation was justified by Scott [14] in 1969 when he introduced continuous lattices to model data types and showed how to solve reflexive domain equations. It is not the case that any solution of a given reflexive domain equation is a suitable model for studying denotational semantics. In programming languages, the constructs that we deal with can all be realizable by some machines, hence their meanings, considered as mathematical objects in a lattice, should be computable. In other words, we need a solution where we can formalize the notion of computability. Of course, this means that many continuous lattices are irrelevant to the study of denotational semantics of programming languages. It is the purpose of this paper to isolate those lattices which are relevant.