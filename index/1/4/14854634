In recent years, there has been much interest in improving computer science education [Denning 1989], [Tucker 1990], [Hartmanis 1992]. One way to improve computer science education is by teaching it in an integrative manner. Traditionally, students first learn a programming language, then advanced programming, then data structures and algorithms, then discrete mathematics, and finally advanced topics such as operating systems. There are at least three major problems with the traditional approach. First, students see the field of computer science as a quiltwork of unrelated pieces; the supporting knowledge (such as graph theory) related to a particular topic (such as computer networks) has either not yet been covered or seems irrelevant to the topic. Second, many of the topics that are most interesting to students (such as computer graphics) are not encountered until the student is a junior or senior. If retaining more first and second year students is a goal of a department, the material encountered during these initial years should be made interesting.