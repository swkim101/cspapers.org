This paper describes structures used for exception handling in multi-process implementations of the X.25 and X.29 protocols. Each protocol layer is implemented as a collection of cooperating processes. These are structured in one of two alternative ways, reflecting differences in the type of exceptional situations that may occur.
 Within each of the lower protocol layers, one process takes the form of a Finite State Machine. In these lower level protocols, where it is difficult to identify “normal” transitions, there are no special exception cases; we treat all transitions as being equally likely to occur.
 For higher level protocols such as the X.29 protocol, exceptions occur less frequently. Here, transmitting and receiving are performed by two independent processes, and exception handling is performed by an auxiliary process which is invoked as needed. This multi-process structure matches the functionality of the protocol, and results in software which is easy to program and easy to understand.