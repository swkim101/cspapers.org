Protecting commodity systems running commercial Operating Systems (OSes) without significantly degrading performance or usability still remains an open problem. To make matters worse, the overall security depends on complex applications that perform multiple inter-dependent tasks with Internet-borne code. Recent research has shown the need for context-dependent trustworthy environments that can segregate different user activities to lower risk of cross-contamination and safeguard private information. In this paper, we introduce a novel BIOS-assisted mechanism for secure instantiation and management of trusted execution environments. A key design characteristic of our system is usability: the ability to quickly and securely switch between operating environments without requiring any specialized hardware or code modifications. Our aim is to eliminate any mutable, non-BIOS code sharing while securely reusing existing hardware: even when an untrusted environment is compromised, there is no potential for exfiltration or inference attacks. To safeguard against spoofing attacks, we can force the user to physically set a hardware switch, an action that cannot be reproduced by software. In addition, we provide visible indication to the user about the current running environment leveraging one of the front panel Light Emitting Diodes (LEDs). In our prototype, the entire switching process takes approximately six seconds on average. This empowers users to frequently and seamlessly alternate between trusted and untrusted environments. ∗This work was supported in part by the U.S. Army Research Office (ARO) through contract WF911NF-11-C-0048, the U.S. Air Force Research Laboratory (AFRL) through contract FA8650-10-C-7024, NSF grant CNS-TC 0915291, and a research gift from Google Inc. Opinions, findings, conclusions and recommendations expressed in this material are those of the authors and do not necessarily reflect the views of the U.S. Government and sponsoring agencies. †Kun Sun and Jiang Wang contributed equally to this work.