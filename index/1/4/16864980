Teaching concurrency and synchronization is an important component of every computer science curriculum. With the increasing emphasis on parallel processing, knowledge concerning synchronization of concurrent processes is more necessary than ever. In order for our students to obtain a thorough understanding of concurrency, they must have practical experience writing concurrent programs with various synchronization techniques. This practical work supports the difficult theoretical concepts introduced in lectures and textbooks. Contemporary textbooks for operating system courses and concurrent programming books [1, 2, 3, 4] deal with a diverse set of concurrency issues (mutual exclusion, the critical section problem, starvation, deadlock, and classical synchronization problems), as well as a diverse set of synchronization techniques (semaphores, critical regions, monitors, shared memory communication, rendezvous, and CSP). Although these books provide extensive theoretical information on concurrency and synchronization, they can not provide the desired “hands-on” experience. To obtain this practical experience, three options exist: