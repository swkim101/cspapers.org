A non-deterministic deductive database language IDLOG that employs tuple-identifiers in DATALOG (with negation) was proposed in [She90b] to enhance the expressive power of deductive database languages. It was shown that a subset of ID LOG programs defines the class of all computable deterministic queries. In this paper, we investigate the non-deterministic part of IDLOG. As discussed in [ASV90], the use of non-deterministic database languages is motivated using both pragmatic and theoretical considerations. There are natural non-deterministic queries whose implementation using deterministic languages is unintuitive and inefficient. One typical example is sampllngqueries, i.e., queries that randomly choose certain samples from a set of tuples, such as “Find an arbitrary set of employee samples that contains exactly N employees from each department (assuming each department has at least N employees)”. Another consideration in favor of non-determinism is optimization. Intuitively, a nondeterministic program gives a certain degree of freedom in the computation of a query, which can be exploited in optimization. We show how IDLOG defines sampling queries and how it can be used to optimize DATALOG programs. Also discussed is the expressive power of non-deterministic