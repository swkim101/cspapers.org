Parnas' seminal work [2] on separation of concerns in design has led to diverse innovations in programming language design, to support modularity. However, there has been a growing sentiment in many quarters that there are some concerns that stubbornly resist tidy confinement, when using established modularization mechanisms in pro- gramming languages. A diverse set of new approaches have emerged in response: aspects [1], monads [5], mixin lay- ers [3], and multi-dimensional separation of concerns [4]. These approaches arose more or less independently of each other, and have (to varying degrees) developed technical maturity, real-world credibility and strong user bases. We are also now beginning to see strong scholarly comparisions of the intellectual foundations and practical utility of these different aproaches. This panel aims to support this trend. In this panel, we bring together leading experts (Profs. Batory, Kiczales, and Launchbury, and Dr. Tarr) in these different areas. Each represents a particular perspective on how to evolve and adapt the old idea of modularization to deal with new challenges such as security, fault-tolerance, distribution, and auditing. In addition, we also have two pioneering researchers (Profs. Balzer and Parnas) to pro- vide us with a historical perspective on the evolution (sic) of program modularization and evolution techniques. Position statements of some of the panelists follow, pre- sented in alphabetical order of their names: