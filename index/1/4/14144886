Over the years several locking protocols have been proposed for coordinating the concurrent use of a data base by multiple transactions. Of these, the non-two-phase locking (non-2PL) protocols form a large class. The Pitfall Protocol (PP) is one of the non-2PL protocols. While the rules of PP assure serializability, they do not prevent deadlocks from occurring. Resolution of a deadlock by partially/fully undoing (i.e. rolling back) the actions of one of the transactions involved in the deadlock may result in two undesirable consequences: a) cascading rollbacks -more than one transaction may have to be rolled back, b) rollback of completed transaction -a transaction that has terminated could be required to be rolled back. Thus a complex commit protocol may be necessary to determine whether a transaction may be allowed to commit. It is the goal of this paper to introduce a simple additional condition to the rules of PP that will allow very simple handling of deadlocks by partial rollbacks, without causing the above undesirable effects. approach to dealing with this problem is to define a transaction as a unit that preserves consistency (e.g., it is assumed that each transaction, when executed alone, transforms a consistent state into a new consistent state), and require that the outcome of processing a set of transactions concurrently be the same as the one produced by running these transactions oneat-a-time (i.e. serially) in some order. A system that ensures this property is said to be serializable [2]. Associated with concurrent access to data is the nroblem of deadlocks. Deadlocks arise as a result of circular wait conditions involving two or more transactions. A system which does not allow deadlocks to occur is said to be deadlock-free [l].