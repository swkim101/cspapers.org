There has been a recent emergence of many interesting and highly efficient hierarchical (multilevel) algorithms (e.g. multigrid, domain decomposition, wavelets, multilevel preconditioning, the fast multipole algorithms, etc.) for solving numerical problems in scientific computing. These algorithms derive their efficiency from using a hierarchical approach to capture the sharing of global information which is inherent in the physical processes being modelled. In addition to being computationally efficient, these algorithms also possess relatively high degrees of parallelism. I therefore argue that the architectures of parallel computers (especially massively parallel ones) should be designed to support hierarchical communication and synchronization needs of these algorithms. Hierarchical architectures are also more universal because they go beyond supporting a particular class of algorithms to supporting the underlying physical processes being modelled. Finally, I propose that algorithm designers take a critical look at traditional kernel algorithms and re-examine their cost-effectiveness in a massively parallel computing environment.