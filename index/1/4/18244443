~Ve describe ongoing computational experiments with a code for approximately solving "block-angular" linear programs. Our algorithm is based on the potential function method, as developed by Plotkin, Shmoys and Tardos [8] for producing e-approximate solutions to linear programs of this form. Our implementation integrates a new technique for strengthening Lagrangians that produces provably stronger lower bounds, a technique for accelerating convergence by "exactly" solving restricted linear programs, and a simple method for fine-tuning the potential function. On large problem instances, our implementation yields large speed-ups over commercial Linear Programming codes and competing codes. 1 Background. We consider linear programs of the form z* = rain {cTx : Ax < b, x e P = p1 x p2 x. x pM}, (LP) where each pi C_ R ~ is a polytope. For simplicity we will assume that b > 0, c >_ 0 and that LP is feasible. Given e > 0, the method in [8] (also see [4], [5], [6]) will produce, under appropriate assumptions , a vector x E P satisfying cTx <_ (1 + e)z*, Ax < (1 + e)b. To produce this result, given B > 0 [8] considers the system of inequalities FEAS(B) defined by {cTx<_B, Ax<_b, xeP} and either (a) proves FEAS(B) is infeasible, or (b) produces x E P with cTx < (1 + e.)B, Ax < (1 + e)b (an e-feasible solution). Using binary search over B to guess z* yields the final algorithm. Consider a system FEAS(B), and denote by aix < bi the i th constraint in Ax < b (1 < i < m); and write ao = c T, bo = B. To handle FEAS(B) as desired [8] constructs the (exponential) potential function ~I,(x) = ~o~e a(~-l} (where c~ > 0) and iterates through points x l, x2,-. E P. At iteration k, the method solves the linear program min {[V'I~(:rk)lTy : y e P} (GRAD), with solution yk and sets x TM = /39 k + (1-~)x k, where 0 _< ~ _< 1 is chosen so that x TM minimizes potential in the segment [x k, yk]. Under appropriate assumptions , the potential reduction algorithm finds an e-feasible solution or pTvves that FEAS(B) is infeasible, in a polynomial number of iterations. Note that we have not explained how infeasibility is proved. Also note that problem GRAD breaks up into independent linear programs over the different pi. In â€¦