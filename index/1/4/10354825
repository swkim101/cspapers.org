Efficient execution of loops is one of the most important obstacles facing high-performance computer architectures. Loop scheduling involves handling a partially ordered set of operations which are to be performed repetitively over a number of iterations.In this paper we study loop scheduling using Petri nets, due to their unique power for modeling both partial orders and cycles. The behavior of loops can be modeled by constructing, at compile time, a Petri-net behavior graph which exhibits a repetitive firing sequence known as a cyclic frustum. From a cyclic frustum, a time-optimal schedule for the corresponding loop can be derived. A polynomial time bound for such a cyclic frustum to occur has been established. Simulation results on a number of Livermore loops, both with and without loop-carried dependences, have demonstrated the feasibility of determining the cyclic frustum at compile time.