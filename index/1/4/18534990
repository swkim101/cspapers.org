We report on experiments with Prolog design descriptions and tools in CAEDE (Carleton Embedded System Design Environment), an experimental, iconic design environment for multitasking, embedded systems. The philosophy of CAEDE is to enter structural and temporal design information iconically, via a graphics interface, to serve as the basis for design analysis and skeleton code generation, and then to enter, under control of the iconic interface, program “strips” to fill in the functional gaps in the skeleton code. The iconic information is converted automatically into a Prolog design data base of facts and rules. CAEDE aims to support incremental design and to be incrementally extensible. In the current implementation of CAEDE, which runs on a SUN workstation supporting design for Ada, the iconic interface is limited to structural design. Here we describe the Prolog side of our research, covering the nature of the facts produced from the iconic input by the current implementation and their use by experimental Prolog tools for structural analysis, temporal analysis and Ada code generation. The aim is to show how Prolog is contributing to the framework of a powerful, extensible design environment.