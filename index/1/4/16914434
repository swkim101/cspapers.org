In this paper we consider two related problems: subset testing and finding maximal sets. First, consider a sequence of <italic>n</italic> operations, where each operation either creates a set, inserts (deletes) an element into (from) a set, queries whether a particular element is in a set, queries whether or not one set is a subset of another, or queries whether or not the intersection of two sets is empty. We show that for any integer <italic>k</italic>, one can implement subset and intersection testing in time <italic>O(n<supscrpt>1-(1/k)</supscrpt> log n)</italic> and all of the other operations in time <italic>O(n<supscrpt>1/k</supscrpt> log n)</italic>). It requires <italic>O(n<supscrpt>k+1)/k</supscrpt>)</italic> space. When <italic>k</italic> = 2, this yields a worst case time  complexity of <italic>O(n<supscrpt>1/2</supscrpt> log n)</italic> per operation, and uses <italic>O(n<supscrpt>3/2</supscrpt>)</italic> space. Second, consider a set of sets, where the total size of the input is <italic>O(n)</italic>. We show that one can find those sets that are maximal (a set is maximal if it is not contained in any other set) in time <italic>O(mn)</italic>, where <italic>m</italic> is the number of maximal sets.