We propose a new, simple methodology for designing distributed algorithms in asynchronous networks. Asynchronous algorithms are in many cases substantially inferior in terms of their complexity to corresponding synchronous algorithms, and their design and analysis are much more complicated. Thus, it makes sense to develop a general technique, referred to as "synchronizer", which allows the user to write his algorithm as if it is run in a synchronous network. A synchronizer can be compared to a compiler of a high-level language for a synchronous network to a lower-level language for an asynchronous network. Our main contribution is a new efficient syn-chronizer, which can be used not only to simplify the design of asynchronous algorithms, but also to reduce their complexity. For the models, considered in this paper, no synchronizer is known which achieves this goal. We demonstrate the power of our synchronizer on the distributed Ma.xirnuzr~ Ff.o'w and l~readth .Fi.rst Sec~rch (~FS) algorithms. These are very fundamental graph-theoretic problems. Both of them can be solved by fairly simple and elegant algorithms in a synchronous parallel computation model (PRAM), as shown in [SV-82] and [EC-77]. These algorithms have been easily modified in [A-83] for operation in a distributed synchronous network. The complexities of the resulting algorithms are summarized in Table i. For precise definition of complexity measures used, see Section 2. Applying our synchronizer to the algorithms of Table 1 yields new asynchronous algorithms, which improve the best existing ones both in terms of communication and time. Our improvements are summarized in Table 2. 2. The Model In this paper, we are dealing with distributed algorithms in two network models. The asynchrort~rus rtst~ork is a point-to-point (store-and-forward) communication network, described by an undirected Permission to copy without fec all or part of this material is granted provided that the copies arc not made or distributed for direct commercial advantage, the ACM copyright noticc and the titlc of the publication and its date appear, and notice is givcn that copying is by permission of the Association for Computing Machinery. To copy otherwise, or to republish, requires a fee and/or specific permission. eommurt~=tiozL graph (F,E) where the set of nodes F represents processors of the network and the set of links E represents bidirectional non-interfering communication channels operating between them. No common memory is shared by the node's processors. Each node processes messages received from its neighbors, performs local computations and sends messages â€¦