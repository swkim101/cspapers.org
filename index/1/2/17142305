A classification of all the computable functions is given in terms of subrecursive programming languages. These classes are those which also arise from the relation “primitive recursive in.” By distinguishing between honest and dishonest classes the classification is related to the computational complexity of the functions classified, and the classification has a wide degree of measure invariance. The structure of the honest and dishonest classes under inclusion is explored. It is shown that any countable partial ordering can be embedded in the honest or in the dishonest classes. The honest classes are dense in themselves, and the dishonest classes are dense in the honest classes. Every honest class is minimal over some dishonest class, but there is a dishonest class with no honest class minimal over it. Every honest class is the intersection (g.l.b.) of two incomparable honest classes, but there are incomparable pairs of honest classes with no g.l.b. It follows that the upper semi-lattice of the recursive degrees of primitive recursiveness is not a lattice. Finally, no r.e. increasing sequence of honest classes has a l.u.b.