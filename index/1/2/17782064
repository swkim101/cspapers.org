This paper begins with an examination of the nature of software reliability, noting that two facets of reliability (correctness and robustness) are often confused. A brief survey is given of current attempts to improve program correctness and develop mechanisms that provide robustness. Starting from a discussion of the distinction that should be (but often isn't) drawn between design and programming, we identify six trends in software design that can be expected to impact significantly our ability to achieve reliable software. The paper closes with a brief discussion of the impact of software design automation on reliability.