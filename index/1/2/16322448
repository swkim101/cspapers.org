Anyone who has taught a first course on Operating Systems knows the frustration of trying to come up with a good course project, one which confronts the students with basic principles without overwhelming them with complicating, extraneous details. Such a project should allow the student to see the relationships between an operating system and (i) the interrupt mechanism which drives it (at the low level) and (ii) the work which the system manages for users (at the high level), i.e., the execution of their programs. In addition, the project should give the student some insight into the relationships among the basic components of an operating system (memory and process managers and the process scheduler). Projects which have been discussed in the literature [1,6,7,8,9] have used various approaches to this problem but have fallen short of the goal. As Wadland has pointed out [8] ‘Either you start at the middle (of a system) and work up or start at the bottom (interrupt level) and don’t get very far.’ In either case the student will get an incomplete experience. The multiuser calculator project described in sections 2 and 3 of this paper has evolved over the past two years in a first course (junior level) in operating systems. The background of the students in this course is courses in machine organization, programming languages and data structures. The project requires the students to design and implement a complete multitasking system, from interrupt mechanism straight through to a translator for user programs, the execution of which will be managed by the system. Though implemented on a network of 24 Apollo Computer workstations, the discussion of the project which follows is system independent. Section 3 below contains a discussion of the project environment provided by the Apollo network as well as a discussion of the suitability of other systems as hosts. The purpose of this paper is not just to present yet another operating system project, but to point to a new source