We describe work in progress on an automatic theorem prover for recursive function theory that we intend to apply in the analysis (including verification and transformation) of useful computer programs. The mathematical theory of our theorem prover is extendible by the user and serves as a logical basis of program specification (analogous to, say, the predicate calculus). The theorem prover permits no interaction once given a goal, but many aspects of its behavior are influenced by previously proved results. Thus, its performance on difficult theorems can be radically improved by having it first prove relevant lemmas. We describe several ways that the theorem prover employs such lemmas. Among the interesting theorems proved are the correctness of a simple optimizing compiler for expressions and the correctnessof a "big number" addition algorithm.