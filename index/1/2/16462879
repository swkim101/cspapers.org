As communication between components (entire software systems) becomes increasingly important, the complexity of software connectors varies widely from primitive units of associations supported by programming languages, such as procedure calls, to sophisticated communication mechanisms, such as those supported by middleware platforms. Capturing various kinds of architectural concerns that crosscut the boundaries of individual software components and reasoning about their properties is a non-trivial task which needs to be tackled. To address these issues, researchers in the field of software architecture have advocated the concept of a software connector as a critical element in modeling software architectures. A number of architecture description languages (ADLs) and tools that support those languages have been developed [13][8] [10]. In [13], Garlan and Shaw point out that a connector, like a component, requires a specification that characterizes its properties in various ways. They extensively argue for the connector concept as a first-class modeling element that should be defined in any ADL. According to [13], connectors mediate interactions among components; that is, they establish the rules that govern component interaction and auxiliary mechanisms required. With this definition, the authors apply the principle of separation of concerns in an advanced form. They define software components and their interconnections (connectors) as two separate architectural abstractions that are orthogonal to each other. We refer to this as a way of using advanced separation of concerns [16] [17][18] in software architecture. As a result, an architect should be able to separate the identification, representation and reasoning about software concerns that can be localized on a single component; from those that crosscut the boundaries of individual components. Unfortunately, the software architecture community has not defined the exact nature of connectors [9]. Very recently, Medvidovic and his colleagues [9] have proposed a classification framework based on the above definition, which aims at providing a taxonomy of connectors. The taxonomy enriches the set of requirements defined in [13], and it shows relationships among multiple kinds of software connectors and classifies them in service categories, connector types, dimensions and values. Service categories represent the interaction roles the connector fulfills, such as facilitation, coordination, and communication. Connector types distinguish different realizations of connectors, such as, procedure call, event and data access. Dimensions capture various kinds of details related to a connector type. For instance, the event connector type can have the dimensions delivery, priority, synchronicity, etc. A dimension can be composed of other dimensions, called sub-dimensions, and the taxonomy defines several sub-dimensions for the delivery dimension, such as: best effort, exactly one, at least one, etc. Lastly, each dimension and sub-dimension can take one or more values. This taxonomy facilitates better understanding of software connectors by classifying results of many research projects in an easy to understand framework. However, it does not take into account how mechanisms of advanced separation of concerns should drive software architecture description, including connector modeling. This position paper is motivated by work on architectural modeling with UML [15] which has exposed the need for connectors that support the definition of complex transactions and that provide mechanisms for maintaining information about the state of these transactions. Also, as discussed in previous work [4], one purpose of this paper is to show, by a concrete example, how an extended UML can be used to model a complex software connector. We believe that this is important, since the standard UML [11] does not allow one to specify “simple connectors” (interconnections between two parts) as a separate model element that can stand alone without the parts it interconnects; nor does UML provide support for modularizing complex component interactions. For example, model elements such as associations, links, dependencies and communication relationships cannot exist alone in a UML model. The next section introduces the ConcernBASE1 approach [19] to connector modeling that adapts the classification framework described above. We started investigating the ConcernBASE approach two years ago with two separate objectives: (1) definition of "UML Profiles" that provide explicit support for architecture description, taking into account the multidimensional nature of software architecture; (2) development of a UML-based tool that supports concern-based modeling using an architecture-centered software develop-