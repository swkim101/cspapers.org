This paper presents a behavioral characterization methodology highlighting the effects of fine-grain par-allelism features and memory hierarchies in scalar uniprocessors. This method is illustrated on a decou-pled/access execute (DAE) architecture, the Astronau-tics ZS-1. DAE architectures are hard to analyze due to the complexity of their organization and provide an interesting target for a performance analysis study. However , our method is general and could be extended to the IBM RISC RS/6000 processor as well as othe~ su-perscalar processors. 1 Introduction and motivations Current scalar architectures rely heavily on instruction-level parallelism to achieve ever higher performance. Processors which provide independent functional units for computation, memory accesses and control, allow several operations to execute concurrently. However, to exploit this capability, parallelism must be detected in the code and matched to the fine-grain parallelism available in the machine. This requires the ability to schedule and synchronize the concurrent operations in order to maintain the semantics of the code and make efficient use of the machine resources. High-performance architectures differ in the way hardware and software cooperate in the management of fine-grain parallelism. Permission to copy without fee all or pert of this material is granted provided that the copies are not made or distributed for direct commercial advantage, the ACM copyright notice and the title of the publication and its date appear, and notice IS given that copying is by permission of the Association for Computing Machinery. To copy otherwise, or to republish, requires a fee and/or specific permission. 1 In the case of VLIW (Very Long Instruction Word) architectures, the activity of each functional unit is controlled on a cycle-by-cycle basis through a dedicated field in the instruction word. This synchronous control scheme requires advanced compiler technology to detect and schedule the concurrent activities. The code generated by the compiler needs to be free of both resource conflicts and data hazards. At the other extreme, the IBM 360/91 provides extensive , though costly, hardware support to extract instruction-level parallelism at run-time and control the asynchronous execution of the independent functional units. The Tomasulo algorithm achieves dynamic im struction scheduling by allowing instructions to execute out-of-order, thus relieving the compiler from the task of instruction scheduling. Decoupled access/execute architectures make a different trade-off and provide only a restricted run-time instruction reordering capability. DAE architectures [6, 7] consist typically of two processors, one for address gem eration and one for floating-point computations. The processors â€¦