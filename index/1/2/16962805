Among the characteristics that made the Web a success, an im-portant role is played by its simplicity and ubiquity: a commoninterface allows to access resources that are equally close to theuser (i.e. ”just a click away”).During the technical evolution of the Web, keeping intact itssimplicity has been one of the overall objectives: any added ca-pability is to be realized on top of the three existing and (rather)simple standards, such as HyperText Markup Language (HTML),HyperText Transfer Protocol (HTTP) and Uniform Resource Loca-tor (URL). Moreover, every new capability relied on the underly-ing client-server architecture, allowing (only) a remarkable varietyof places where computation took place ranging from the classi-cal fat server paradigm (in typical multi-layer architectures) to thefat-clientparadigm where the most part of the computation is per-formed on the client-side (Java applets, external plug-ins, etc.).Recently, a computational paradigm shift has affected the Webby focussing on an (until then) obscure and neglected componentof the overall architecture: the proxy.Actually, the HTTP speciﬁcations [5], already, suggested to useproxies to increase the efﬁciency of the Web by appropriate and in-telligent caching of resources. As a result, until the end of the lastcentury, proxies and caching were almost synonyms in the Web ar-chitecture. The goal was reducing the cost of connecting to the In-ternet, by allowing intermediate caching of the resources accessedvia the bandwidth-consuming World Wide Web, and reducing theuser-perceived latency.As the nature of the services delivered by the Web grew more andmore rich and heterogeneous, it became necessary to design andimplement more and more elaborate caching strategies and infras-tructures that later evolved into the “Content Delivery Networks”(CDNs) that, ﬁrst, introduced the concept of “ Edge” of the network.In fact, CDNs are based on a conceptualization of the World WideWeb in three concentric layers: the inner core is the Data/ServiceCenters that originate the content; the inner core is connected toa middle Transport layer that is, ﬁnally, connected to the AccessNetwork layer that takes care of the “last mile” delivery of the dataﬂow. The idea of CDNs is to develop caching services close to the“Edge” of this diagram, that is, as close as possible to the end-usersthat are, indeed, the ultimate judges of the quality of the service.Of course, this was not an easy task since the evolution and rich-ness of the services provided by the Web require complex systemsto make sure that the user is accessing updated content while efﬁ-ciently caching the (parts of the) HTML page on the edge.While caching proxies (and their evolution, the Content Deliv-