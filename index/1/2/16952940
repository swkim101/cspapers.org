An efficient backtracking method for LISP, used in the MLISP2 language, is described. The method is optimal in the following senses: <1) Only necessary state information is saved. The backtracking system routines are sufficiently efficient to require less than ten percent of the execution time of typical jobs. (2) Most common operations — fetching/storing the value of a variable or the property of an atom, function entry/exit — take no longer with backtracking than without it. This is achieved by not changing the way values are stored. (3) If backtracking is not used, an insignificant overhead is involved in maintaining the backtracking capability. The MLISP2 algorithm and philosophy are briefly contrasted with those of several existing backtracking systems, with historical comments on the development of the theory of backtracking.