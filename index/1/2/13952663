Th is paper presents a small vision system created to study Minsky's theory of Frame Systems It is organized around a detailed semantic hypothetical model of the scene, which is capable of being structurally altered and adjusted to f i t the visual data. Visual data is gathered through a window, whose position is controlled by suggestions which arise from uncertain parameters of the hypothetical model Introduction Minsk y's theory of Frame Systems (3) offers strong advantages for a theory of perception, and this system attempts to study it. lt does not need to see the whole scene, but only fragments of it, and occlusion is no particular problem. At all times there is a detailed semantic model of the scene which, although it may be different from the f inal model, is at least consistent The rapport between the high-level semantic model and the low-level visual data is very close, without intervening layers of computation When a hypothesis is wrong, it is not discarded but is transformed in an orderly way into a more correct hypothesis, avoiding wasted effort. One tenet of the frame theory is that one may use dozens of different models linked in this way. The space of models that our system can propose is limited to wedges, blocks, and pairs of aligned blocks because there is no intermediate level of representation between solids and vertices that the system can sense The more shapes that get added to the repertoire, the more di f f icul t it is to f ind ways to distinguish among them on the basis of vertex appearance So a lesson for the future would be to use descriptions organized around the notions of axis and section, as originated in the work of Agin and Binford. See Holterbach (2) for a thorough discussion For a detailed account of the structure and operation of the system, see the author's forthcoming dissertation. System Outline Input data, to keep the system simple, was restricted to the isolated vertices of a hand-coded line drawing. The data is examined by a program called the fovea, which reports only vertices contained within a movable diamond-shaped window. Each reported vertex consists of a point and the directions of its rays The basic operation of the system is to take vertices, one by one, and note their correspondence with points in an internal model of the scene This process is punctuated by occasional modifications to the model to accomodate the data. Blocks appear out of nowhere, shrink and grow, sometimes split in two or turn into wedges When the system can see no more vertices, it moves its window, looking for the far corners of objects whose dimensions are yet unverified. The internal model for each block or wedge is a large actor (that is, a data object together with a procedure for accessing it) containing parameters for all of its corner points, principal directions, and dimensions It thinks of itself as a complete 3-D model of the object except that the numbers stored in its points, directions, and dimensions are those of its 2-D isometric projection Each parameter has not only its value but an authority-f lag, to record whether the value is known with any certainty or is merely default Although the block contains over a dozen different parameters, it can be adjusted as a unit due to a complex system of constraint equations for adjusting default parameters The process of matching vertices to points of each object is organized around two additional kinds of actors, vertexmatching-objects and vertex-matches Each block or wedge model contains a set of vertex-matching-objects, one for each point, which can compare a vertex to that point. If it finds a comparison, it constructs a vertex-match containing a comment about the quality or meaning of the comparison, such as "agree", "stretch" meaning the object should be stretched, "wedge" meaning it should be changed into a wedge, or "cut-after* meaning it should be divided in two. Since each vertex will usually be comparable to more than one point in the scene, the best vertexmatch is chosen by sorting on the comment. The vertex-match also contains machinery to adjust or modify the model once it has been chosen If it is to make a large change in the hypothesis, it uses tabular transfer rules to guide it in setting up the parameters in the new hypothesis. It does not insist that hidden vertices or rays be invisible, and sometimes they're not, if the block is really going to be a wedge. Although space does not permit greater detail, here is an outline of the contents of each type of actor: 616 Example Perception of a Block-Pair Operation of the system in perceiving an aligned pair of blocks is portrayed in Figure I. The initial fovea placement is provided by the user Vertices are processed singly in any order. The first vertex, since there is no hypothesis to accept it, causes a new block hypothesis to be created, complete with default points, lengths, and directions The second vertex establishes its x length. At this point, the parameters for the block hypothesis are the