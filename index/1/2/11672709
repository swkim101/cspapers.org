Armadillo [1] is an automatic system for producing domainspecific Semantic Web oriented annotation on large repositories. Armadillo is adaptive: learning how to harvest information with minimal user intervention. The first step performed in the learning process is identifying seed terms for examples of information to be extracted. The seeds, provided by the user from existing data or via connection to a web service, are used to learn from different parts of the repository or in the external world (e.g. the Web). An agent spiders the available space and identifies places where such terms occur (documents, databases, etc.). Rules are induced to model the context in which these terms appear. These rules are then used to extract other examples not contained in the initial lexicon but that appear in similar contexts. All new terms must be confirmed before they are accepted and used to re-seed learning. Multiple strategies are used for confirmation, e.g. a new piece of information is accepted if found within different (linguistic or semantic) contexts. Finally all the extracted information is integrated with the existing knowledge base. The methodology relies on the inherent redundancy of large repositories, e.g. the Web or company-wide repositories. By inherent redundancy we mean the fact that information is frequently represented in different forms in distributed resources. Armadillo has similarities to SemTag [2] which automatically generates instance labels from documents on the web. SemTag’s extraction is shallow for the needs of the Semantic Web: e.g. there is no attempt to automatically discover relations among entities. SemTag can be seen as an extension of a search engine towards semantic indexing and retrieval. Armadillo improves on SemTag by integrating extracted data from numerous sources into a knowledge base (KB). Such a KB can then be used both to access information directly (e.g. via a semantic web agent) and to annotate the pages where information was identified. Armadillo’s architecture is based on Semantic Web Services, where each service is associated to parts of the ontology (e.g. a set of concepts and/or relations) and works in an independent way. Each service can use other services (in-