Robotics software require and provide a number of different functionalities, which are typically encapsulated in components that cooperate and compete in order to control the behavior of a robot. Cooperation and competition are forms of interaction among concurrent activities and so they have to be coordinated. In order to achieve a good level of reusability and flexibility the coordination and the computation (how the component provides the service) need to be managed separately. 
According to this principle we propose an innovative ap- proach based on two frameworks that are widespread in other domains such as the web services. We will show by means of a use case how we have implemented the component through the Service Component Architecture and how we have managed the coordination by means of the Abstract State Machine. In particular we will illustrate that is possible to change the coordination policy without modifying the implementation of the services provided by the component.