Branch coverage is often used to evaluate testing thoroughness. For this reason, it is useful to set a lower bound on the number of test paths needed to achieve branch coverage when estimating how much effort will be needed to test a given program. McCabeâ€™s number [1] is often (mis)used as such a bound, whereas it actually provides the number of maximal linearly independent paths in the program flowgraph; this number is not related to branch coverage. On the other hand, the theoretical minimum number of paths needed to cover all the arcs in the program flowgraph [2] is not useful in practictx for instance, if a program consists of a loop with a very complex body, one path would be sufficient tQ cover all the arcs in its flowgraph. Evidently, no tester would rely on such a bound. The real problem in branch testing is to derive an executable set of test paths. It is intuitive that the lower the number of decisions in a program path, the more likely it is that the path is feasible. This is confined statistically in [3]. Therefore, from a practical point of view, it is more effective to test many simple paths rather than a few complicated ones. Accordingly, we propose here a new, meunin@l lower bound to the number of tests needed to achieve branch coverage, called /3~ra~. In the computation of ~~rm~, we consider those control flow paths with a low number of predicates we call them meaningful paths. We use a reduced flowgraph G=(VJ?), called a aligraph We f~st ident@ the set UE of unconstrained arcs [4] in G, i.e., the minimum subset of ddgraph arcs with the property that a set of paths which exercises them covers all the arcs in G. Of course, the number of test cases needed to cover all ddgraph arcs is < IUEI. However, in general, a test path may contain more than one unconstrained arc. Depending on how unconstrained arcs are combined together into one path, different sets of test paths can be obtained, with different cardinalities. To