ABSTEACT This paper is concerned with the perfomance of matrix multiplication on array processors. More s1~ccifically, it compares the time required to perfom matrix multiplication on two different, but related, array processing architectures. One is similar to conventional array processors in that it depends on pipel ined ALU' s to improve the perfomance of vector operations. The other uses programmable functional units (PFU) capable of executing relatively complex operations containing several arithmetic operations and branching. It is shown that matrix multiplication on the PFU baaed architecture is almost three times as fast as it is on the one based on pipellned ALU's. The purpose of the research reported in this paper is to investigate ways of performing matrix multiplication on a new type of array processor. This processor, called an Interleaved Array Processor (lAP) (Yump, et al. [1984]), is characterized by its ability to use multiple programmable functional units to execute high-level vector operations. Unlike convent ional array processors, which can only execute simple arlt~etlc vector operations such as addition and multiplication, the IAP can execute complex vector operations defined by the user. These operations are specified by ~nall programs that can contain conditional branching as well as arithmetic and data movement instructions. It will be shown that by organizin I matrix multiplication algorithms to take advantage of the architecture of the IAP, a higher degree of parallelism end performance, compared to conventional array prate ssins architectures, is realized. The architecture of the IAP is best suited for use as a backend processor that would add vector proce aging capability to a general purpose computer. As with most array and vector architectures, its effectiveness depends on the ability to organize al gorltllns as vector calculations where the same operation is applied to all elements of one or more vectors. Since the operations on different components of a vector are usually independent and do not share data, they can be executed concurrently. An advantage of the IAP is that these component operations can be specified by the user as programs consisting of several data dependent arithmetic oporat ions. In order to exploit this advantage, it is necessary to organize programs for the lAP so that the time required to perform a vector operation on one component of its vector operands is large relative to the time required to transfer the operand and results between the functional units and the main vector â€¦