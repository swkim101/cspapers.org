We study the following problem: Given an array <i>A</i> storing <i>N</i> real numbers, preprocess it to allow fast reporting of the <i>K</i> smallest elements in the subarray <i>A</i>[<i>i, j</i>] in sorted order, for any triple (<i>i, j, K</i>) with 1 ≤ <i>i</i> ≤ <i>j</i> ≤ <i>N</i> and 1 ≤ <i>K</i> ≤ <i>j − i</i> + 1. We are interested in scenarios where the array <i>A</i> is large, necessitating an I/O-efficient solution.
 For a parameter <i>f</i> with 1 ≤ <i>f</i> ≤ log<sub><i>m</i></sub> <i>n</i>, we construct a data structure that uses <i>O</i>((<i>N/f</i>) log<sub><i>m</i></sub> <i>n</i>) space and achieves a query bound of <i>O</i>(log<sub><i>B</i></sub> <i>N + fK/B</i>) I/Os, where <i>B</i> is the block size, <i>M</i> is the size of the main memory, <i>n:= N/B</i>, and <i>m:= M/B</i>. Our main contribution is to show that this solution is nearly optimal. To be precise, we show that achieving a query bound of <i>O</i>(log<sup>α</sup> <i>n + fK/B</i>) I/Os, for any constant α, requires Ω(<i>N</i><i>f</i><sup>−1</sup> log<sub><i>M</i></sub> <i>n</i>/log(<i>f</i><sup>−1</sup> log<sub><i>M</i></sub> <i>n</i>)) space, assuming <i>B</i> = Ω(log <i>N</i>). For <i>M ≥ B</i><sup>1+ε</sup>, this is within a log log<sub><i>m</i></sub> <i>n</i> factor of the upper bound. The lower bound assumes indivisibility of records and holds even if we assume <i>K</i> is always set to <i>j</i> − 1 + 1.
 We also show that it is the requirement that the <i>K</i> smallest elements be reported in sorted order which makes the problem hard. If the <i>K</i> smallest elements in the query range can be reported in any order, then we can obtain a linear-size data structure with a query bound of <i>O</i>(log<sub><i>B</i></sub> <i>N + K/B</i>) I/Os.