Partial evaluation or mixed computation specitilzes a program with respect to information available or computable at compile-time. This can involve constant propagation, loop unwinding and speciaHzing procedure calls. Partial evaluation is substantially more powerful than constant propagation. For example, a file can be designated as being available at compiletime; during partial evaluation, the file would be read and the program specitilzed with respect to the contents of the file. Consider a programming language interpreter that takes as input program text and input data for the program. If the interpreter is specialized with respect to a program text P, the resulting specialized code is a compiled version of P [Fut82]. In experiments [JGB+90], researchers have obtained speed-ups of an order of magnitude in applications such aa specializing interpreters to a particular program. Most work on partial evaluation has been done for functional lan~uages, and much of the work on partial evaluation of imperative languages has addressed low level languages without scoping, local variables, procedure calls, arrays or pointers. Previous works on partial evaluation of high-level imperative programming languages have dealt awkwardly with handling of access to and modification of non-local variables that contain values known at compile-time. In this paper, we describe techniques for partial evaluation of a high-level imperative programming language. The contributions of this paper are: