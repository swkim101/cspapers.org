Most programming language survey textbooks [2][3][4][5][6] [7]discuss parameter passing at length, Historically this has been an important topic of research and a number of different parameter passing mechanisms have been employed by various languages. This paper discusses a method by which students may simulate various mechanisms using currently popular languages which do not support those mechanisms directly. Programming exercises can thus be used to further the understanding of the issues involved in parameter passing. For example, Modula-2, some enhanced versions of Pascal (e.g., Turbo Pascal and Think Pascal), and ANSI C and C++ provide the capability to simulate the “pass-by-value-result” and “pass-by-name” mechanisms. An earlier version of this paper [1] focused on simulating different mechanisms using Modula-2 and Pascal. Here we present a generalization that unifies the mechanisms into a single one. Examples are implemented in C and include an application of Jensen’s device [2] [6] [9]. Note that we shall be employing the “C subset of C++” in the following, rather than ANSI-C itself. It is assumed that the reader is already familiar with the pass-by-value and pass-by-reference mechanisms. In order to simulate the other mechanisms in C, we employ function types and function parameters. A study of available parameter passing mechanisms generates insight into several subtleties of language design. This is especially true of the effects of the interactions of language features such as the relationship between block structure and the problem of non-local names, and parameter semantics and the problems of variable access and variable aliasing. In C, aliasing of a variable may occur through using the same variable for two different formal parameters. Aliasing may also occur if a global variable is passed as an argument in a situation in which the routine called also references that same global as a non-local name. Aliasing may occur even in the case of value parameters when the types represent pointer variables. Variable access is an important issue because the state of the machine in which a variable is accessed may affect the address and/or the value of the variable to which the access refers. For example, if we make an array subscript reference,