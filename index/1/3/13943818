Protocol testing for the purpose of certifying the implementation's adherence to the protocol specification can be done with an architecture which includes a remote Tester and a local Responder processes generating specific input stimuli called test sequences. It is possible to adapt test sequence generation methods of finite state machines, namely transition tour, characterization and checking sequence methods to generate test sequences for protocols specified as incomplete finite state machines. For certain test sequences, the Tester or Responder processes are forced to consider the timing of an interaction in which they have not taken part; these test sequences are called nonsynchronizable. The three test sequence generation algorithms are modified to obtain synchronizable test sequences. Checking the protocol designs for intrinsic synchronization problems is also discussed.