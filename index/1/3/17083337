Eﬀectiveness and eﬃciency are two of the main issues in Information Retrieval (IR). IR eﬃciency is normally addressed in terms of accumulator initialisation, disk I/O, decompression, ranking and sorting. This research is about (1) identifying the bottlenecks in a search engine, (2) devising eﬃcient and eﬀective solutions to minimise or eliminate the bottle-necks and (2) adopting the solutions for distributed IR. As shown previously [4], a large portion of the performance of the search engine is dominated by (1) slow disk read of dictionary terms and the corresponding postings lists, (2) CPU-intensive decompression of postings lists, (3) complex similarity ranking functions and (4) sorting a large number of possible candidate documents. In order to speed up disk access, operating systems usually provide general-purpose buﬀer caching, prefetching and scheduling optimisation algorithms. However for special-purpose applications, it is better for application to bypass the general ones and deploy their own I/O optimisation algorithms. In Jia et al. [3], a number of application-speciﬁc I/O optimisation algorithms have been proposed and tested. A number of static pruning algorithms have been deployed to minimise the runtime overhead of processing a vast number of postings and sorting a large number of accumula-tors [4, 2, 1]. The topk algorithm uses a special version of quick sort for fast sorting of the accumulators. Instead of explicitly sorting all accumulators, the improved topk algo-rithm