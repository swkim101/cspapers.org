Object-oriented database systems (ODBs) are designed for use in applications characterized by complex data models, clean integration with the host programming language, and a need for extremely fast creation, traversal, and update of networks of objects. These applications are typically written in C or C++, and the problem of how to store the networks of objects, and update them atomically has been difficult in practice. Relational database systems (RDBs) tend to be a poor fit for these applications because they are designed for applications with different performance requirements. ODBs are designed to meet these requirements and have proven more successful in pioviding”persistence for applications such as ECAD and MCAD.’ Interest in ODBs has-spread be$ond the CAD communities, to areas such as finance and telecommunications. These applications have many similarities to CAD applications. For example, in financial applications, the data structures describing a mutual fund’s portfolio can be quite complex, applications are written in C or C++, and fast traversal of the data structures is important. These application areas often have an additional requirement the need to make use of “legacy” data stored in relational database systems (RDBs). For years, the developers of these applications have worked in non-object-oriented languages; and have had to deal with the problem of turning tuple streams into the complex data structures manipulated by their applications. Now, the developers who have started using object-oriented languages and database systems would like to continue the transition by insulating themselves from the relational model and SQL.