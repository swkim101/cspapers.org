Atomic broadcast and failure detection are powerful primitives for distributed database systems In the distributed database system LAMBDA, they are provided as network primitives In this paper, we show how atomic broadcast and failure detection simplify transaction commitment, concurrency control, and crash recovery Specifically, we give a simple two-phase non-blocking commit protocol, whereas three phases are required in a point-to-point network We also give a simplified read-one/write-all update algorithm for replicated data and an easily implemented log-based recovery algorithm providing uninterrupted transaction processingThe benefits of performing the atomic broadcast and failure detection at the network level are also discussed Performing these functions at the network level not only simplifies database protocols but also better utilizes the broadcast network fewer messages are transmitted Comparisons between LAMBDA and existing distributed database systems are also made