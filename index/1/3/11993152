This paper extends Shapiro's Model Inference System for synthesizing logic programs from examples of input/output behavior. A new refinement operator for clause generation, based upon the decomposition of Prolog programs into skeletons, basic Prolog programs with a well-understood control flow, and techniques, standard Prolog programming practices is described. Shapiro's original system is introduced, skeletons and techniques are discussed, and simple examples are provided, to familiarize the reader with the necessary terminology. The Model Inference System equipped with this new refinement operator is compared and contrasted with the original version presented by Shapiro. The strengths and weaknesses of applying skeletons and techniques to synthesizing Prolog programs is discussed.