Shasta supports a shared address space in software across a cluster of computers with physically distributed memory. A unique aspect of Shasta compared to most other software distributed shared memory systems is that shared data can be kept coherent at a fine granularity. Shasta achieves this by inserting inline code that checks the cache state of shared data before each load or store. In addition, Shasta allows the coherence granularity to be varied across different shared data structures in a single application. This approach alleviates potential inefficiences that arise from the fixed large (page-size) granularity of communication typical in most software shared memory systems. This paper focuses on the design and performance of the cache coherence protocol in Shasta. Since Shasta is implemented entirely in software, it provides tremendous flexibility in the design of the cache coherence protocol. We have implemented an efficient cache coherence protocol that incorporates a number of optimizations, some of which are common in hardware shared memory systems. The above protocol is fully functional and runs on a prototype cluster of Alpha systems connected through Digitalâ€™s Memory Channel network. To characterize the benefits of the various optimizations, we also present detailed performance results for nine SPLASH-2 applications running on this cluster.