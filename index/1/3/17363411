Computational rejection is beneficial in concurrent computing in offering a linguistic mechanism for incorporating user-specific policies. New challenges are (1) how to implement them, and (2) how to do so efficiently. We present efficient implementation schemes for object-oriented concurrent reflective languages using our language ABCL/R2 as an example. The schemes include: efficient lazy creation of metaobjects/meta-groups, partial compilation of scripts (methods), dynamic progression, self-reification, and light-weight objects, all appropriately integrated so that the user-level semantics remain consistent with the meta-circular definition so that the full power of reflection is retained, while achieving practical efficiency. ABCL/R2 exhibits two orders of magnitude speed improvement over its predecessor, ABCL/R, and in fact compares favorably to the ABCL/l compiler and also C +Sun LWP, neither supporting reflection. *Physical mail address: 7-3-l Hongo, Bunkyo-ku, Tokyo 113, Japan. Phone +81-3-3812-2111 ex. 4108. E-mail: {masuhara, matsu, yonezawa}@is.s.u-tokyo.ac.jp tcurrently with School of Information Science, Japan Advanced Institute of Science and Technology, Hokuriku, Japan. E-mail: takuo@jaist-east.ac.jp. Permission to copy without fee all or part of this material is granted provided that the copies are not made or distributed for direct commercial advantage, the ACM copyright notice and the title of the publication and its date appear, and notice is given that copying is by permission of the Association for Computing Machinery. To copy otherwise, or to republish, requires a fee and/or specific permission. @ 1992 ACM 0-89791-53%9/92/0010/0127...$1.50