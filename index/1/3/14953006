A textual database can be loosely defined to be a group of related documents, each containing an essentially unstructured string of characters and symbols, which describe some information in English or any other high-level natural language on a specific subject matter by use of a set of words, phrases and sentences that depend very much on the subject matter and the intended use of the document. Such databases cover a wide range of applications, viz. libraries, newspapers, medical diagnostics, abstracts of papers and dissertations, legal case reports, military and intelligence reports, etc. With the advent of highdensity memory technology and the availability of computerised typesetting and machine reading technology, an explosion in the growth of such databases for a variety of applications may be anticipated. This chapter is a preliminary study on an ongoing research effort devoted to the development of backend machine architecture for large textual databases or information retrieval systems. Search and retrieval operations on textual databases are complicated by the very nature of information that they contain. The text databases show a wide variation in formatting, and have a large number of oddities, redundancies, non-informational words and context-dependent as well as spelling ambiguities; the range of potential query is unrestricted. There is no data model that is applicable to develop a structured approach to search and retrieval, as is the case for conventional databases (viz. relational or hierarchical). Conventional machine architectures and software systems perform search and retrieval operations on such databases using a combination of inversion of text to produce an inverted list and sequential scan on the secondary storage media. These systems are inherently slow, because the machines do not have build-in hardware to do high-speed pattern matching, searching, sorting or retrieval operations. Furthermore, the phenomenon of a 'yon Neuman bottleneck' between the CPU and the main memory and the data transportation problem over a bandwidth-limited channel which uses complicated navigational procedures to locate data on serial-access bulk storage add to this slow performance and inefficiency. Furthermore, the inverted file system may add as much as 300 per cent storage overhead and needs rather time-