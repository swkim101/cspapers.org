Data intensive applications today usually run in either a clientserver or a middleware environment. In either case, they must efficiently handle both database queries, which process large numbers of data objects, and application logic, which involves fine-grained object accesses (e.g., method calls). Sophisticated optimization techniques speed up query processing, while caching is used to reduce the cost of the application logic. Query processing and caching decisions are typically made in isolation, though often in applications queries are used to identify those objects the application will further process. We propose a wholistic approach to speeding up such applications: we load the cache of a system with relevant objects as a byproduct of query processing. This can potentially improve the performance of the application, by eliminating the need to fault in objects. However, it can also increase the cost of queries by forcing them to handle more data, thus potentially reducing the performance of the application. In this paper, we examine both heuristic and cost-based strategies for deciding what to cache, and when to do so. We show how these strategies can be integrated into the query optimizer of an existing system, and how the caching architecture is affected. We present the results of experiments using the Garlic database middleware system; the experiments demonstrate the usefulness of loading a cache with query results and illustrate the tradeoffs between the cost-based and heuristic optimization methods.