In this paper we describe the architecture and interface of KODA, a production strength database kernel. KODA is unique in the industry in its ability to support two different data models viz. Oracle Rdb (a relational database system) and Oracle CODASYL DBMS (a CODASYL database system). Our experience in designing and implementing KODA demonstrates . the feasibility of implementing multiple data models on top of a common kernel, l the benefits of leveraging performance and feature enhancements for multiple products, . the benefits of maintainability of a common code base, . ease of migration and interoperability between the two products without customers having to re-learn common kernel utilities like backups, data file organization and analysis tools. Over the years, KODA based products have performed exceptionally well in industry standard benchmarks. This clearly demonstrates that including data model dependent functionality in the kernel is not a pre-requisite for high performance. A data model independent kernel like KODA can thus be used, without much change, as the database industry moves from CODASYL to Relational to Object-Relational data models and beyond. Permission to copy without fee all or part of this material is granted provided that the copies are not made or distributed for direct commercial advantage, the VLDB copyright notice and the title of the publication and its date appear, and notice is given that copying is by permission of the Very Large Data Base Endowment. To copy otherwise, or to republish, requires a fee and/or special permission from the Endowment. Proceedings of the 24th VLDB Conference New York, USA, 1998 1.0 Introduction KODA was consciously designed to support multiple data models in a shared disk environment. It provides a simple, powerful interface that carefully isolates the data model dependent aspects from the data model independent aspects of the functionality. This makes the kernel easier to maintain and also makes it possible for multiple clients to leverage the benefits of the functionality in the kernel. The focus of this paper is to describe the interfaces that a full function database kernel can provide and yet be data model independent. The shared disk architecture of KODA means that special care was taken in areas like message passing and buffer cache coherency algorithms (implemented using underlying distributed lock manager functionality). In addition, by encapsulating most of the operating system dependencies within KODA, it is possible to easily port the KODA client products to multiple platforms. The rest of the paper is organized as follows. We begin with a description of the common components in KODA that all clients share. In each component, we also describe the interfaces that KODA makes available to clients. This is followed by a description of the client specific portions in KODA. It is interesting to note that less than 5% (in lines of code) of KODA is client specific. 2.0 Common Components KODA follows a layered architecture with each major component being independent of the others. This makes it possible to evolve each component separately. During execution, only the components that are needed are invoked. This aspect of KODA makes it easy to extend its support to different data models. Some of the major components of KODA and their layering is shown in Figure 1.