1. MOTIVATION Flash memory is a cheap, viable storage alternative for the low power, energy constrained sensor nodes. It is still not clear however, what storage abstractions are best suited to Sensornet applications. Many authors have proposed a file-system based approach [1, 5] to storage on sensor devices. File systems, however, were originally designed to be a flexible and user-friendly naming interface to storage. In contrast, sensor applications often know their storage requirements in advance and do not have a human operator. The primary purpose of sensor networks is to sense and process readings from the environment. Given this usage model, once a sensor node acquires a reading, it could transmit out the readings to the base-station immediately, or it could log it onto a flash device for later processing. For many application scenarios, [6] shows that logging data into flash memory is much cheaper than transmitting it over the communication network. In other situations, in-network query processing performance could be enhanced by locally archiving, processing and indexing. Sensor devices thus need an efficient way to retrieve data from storage in order to satisfy queries. The peculiar read, write and erase characteristics of flash memory [2], imply that index data structures and other storage management techniques developed for disks, which often depend on in-place modification, may not be appropriate for flash. This motivates us to explore sophisticated data structures and algorithms that work around the constraints and limitations of flash memory to provide an efficient indexing mechanism.