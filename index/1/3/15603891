1 Introduction In this paper we propose a new hash-partitioned join method using a dynamic de&aging strategy for large scale databases. The traditional hash-partitioned join methods such as the Hybrid Hash Join Method assume that the size of each bucket can be controlled by selecting a split function, and the characteristics of the buckets are statically specified. For materializing this assumption, we have to collect information about distributions of the join attribute value before processing a job. In general , however, join operations are applied to relations in which some restrictions are applied, and so it is not easy to collect that information before processing. If we cannot collect the information, the tuple distributions of each bucket may differ from the estimation. An example shows that the processing time in such a case becomes 1.4 times worse than the ideal one. In this paper we propose a strategy in which the destaging buckets are selected dynamically, instead of a static decision of them during the split phase. Using this strategy, we don't have to collect information before processing and this method can be applied in many cases, which are unsuited to traditional methods. When we apply this method to that example which we mentioned, we can get the same performance as the ideal one. Permission to copy without fee d ar pIlt of this matdd is grantaipvidcdtbatrheoopiesmnol2MdCadiStYibutcdfM direct cxxnxnercisl edvmtage. the VLDB copyri&t notice md the title of the public&m and its date spar, d notice is given thatcopyingisbypmikonoftkVay~eI)ruB~ Endowment. To copy othawke, or to republish requinr a fee and/or special permission from the BlKlowmau. Eighteen years have passed since Dr. Codd suggested the relational data model in 1970. Many database systems, including commercial ones, use this data model now. In these systems, relational algebra operations , such as scfeci, project and join, are basic operations for processing tuples of databases. Especially , it is well known that join is an expensive operation and many join methods have been proposed so far [Sto'76,Kit83,DeW85]. Among these join methods, hash-partitioned join methods present good performance as shown in [Kit83,DeW84,Sha86]. In [DeW85], it is also shown that the Nest Loop Join Method is not suitable for large databases and the Hybrid Hash Join Method-one of the hash-partitioned join methods-presents the best behavior among the all of the shown algorithms in its figure 3. We may agree with that result when we have to â€¦