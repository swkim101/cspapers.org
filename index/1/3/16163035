* Multiple implementations of an abstract data type may be de qlared in a program. S e v e r a l imp lemen ta t i ons o f an a b s t r a c t d a t a t ype may be used s i m u l t a n e o u s l y in a program (one i m p l e m e n t a t i o n pe r v a r i a b l e ) . If several implementations of an abstract data type are used for different variables, t h o s e variables may i n t e r a c t . * A si__ng!e__im~.nt.a_ti.on may be written for several separaLe S/~_Â£i_ficati.ons, Automatic-Processing Goals * Static .t_ypa ..c.hecking of all variable declarations (object creations ) and procedure calls should be supported. * C_o..mp~le-time checkinq should ensure that al.l r_epXgsentation-selection decisions result in a program that can execute without run-time errors. Although many languages a r e d e s i g n e d to meet some of t h e s e g o a l s , no language known t o me can meet a l l o f theN. A f t e r a r ev i ew o f how o t h e r languages only paritally meet these goals, a description of Paragon i s g i v e n a l o n g wi th examples o f how a programmer can use Paragon t o a c h i e v e t h e s e g o a l s . The abstract data type specification goals are partially met by the object-oriented language d e s i g n s i n Simula [Dah168 ] and S m a l l t a l k [GoldbergS1, I n g a l l s 7 8 , I n g a l l s 8 l , Morgan81, Xerox81] , the T r a i t s a d d i t i o n s to Mesa [Curry82] and t h e F l a v o r s f a c i l i t y f o r L i s p [WeinrebS1] . An