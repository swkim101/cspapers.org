A distributed program consists of processes, many of which can execute concurrently on different processors in a distributed system of processors. When several processes from the same or different distributed programs have been assigned to a processor in a distributed system, the processor must select the next process to run. The following two questions are investigated: What is an appropriate method for selecting the next process to run? Under what conditions are substantial gains in performance achieved by an appropriate method of selection? Standard processor queueing disciplines, such as first-come-first-serve and round-robin-fixed-quantum, are studied. The results for four classes of queueing disciplines tested on three problems are presented. These problems were run on a testbed, consisting of a compiler and simulator used to run distributed programs on user-specified architectures.