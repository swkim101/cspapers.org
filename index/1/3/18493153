The proliferation of methodologies has prompted some to call for standards in this area. The members of this panel, all prominent methodologists, stated their positions on this topic and then answered questions from the floor. Following brief introductions by the chairman (Monarchi), each panelist made a brief position statement. ------------------------------------Grady Booth started by looking backwards at structured analysis and design in order to learn from the past. He noted that even in this older approach to software development, there were identified gaps and incomplete convergence. However, he was more optimistic for object-oriented analysis and design because, he argued, we know at least some of the things that work and some that don’t. Booth noted a subtle shift in the last 12 months in which engineering issues were being addressed to yield a simple solution. This implies a growing maturity in 00 methodologies. He stated emphatically that there should not be a methodology convergence in terms of standards. “Forcing a standard would be contradictory to our aims. We can standardize notation, but process is a little way off.” -----------------se -_--_-------------The second speaker, Brian Henderson-Sellers, started with a brief overview of what a methodology should be: it should cover the whole lifecycle; provide process support; embody a general underlying philosophy regarding the degree of iteration necessary when using OT (as well as guidelines to management); provide specific and detailed management and technical techniques including discussion of roles played within the project team; delineate deliverables (type and timing); support a hierarchy of abstraction levels (e.g. class, subsystem, pattern); embody the notions of contracting; and offer an overlay of complexity management techniques (e.g. layering, sheets, subsystems, selective visibility). A methodology should not be seen as a cookbook but as a guide or roadmap which provides the ground rules rather than the implementation details with all their potential variability. So rather than setting standards, a better approach would be to seek interoperability and to identify a meth(ldologica1 “core”. This core would not necessarily be a common denominator of today’s approaches, but instead would identify for industry and CASE vendors a minimal functionality desirable for all 00 methodologies. This will assist everyone in developing the tools to help OT grow from the current < 5% to > 50% of software development. As an added benefit, such a core would encourage the creation of new ideas in this still rapidly maturing field, rather than stifling new research. An analogy to illustrate this notion of a core involves passenger cars. Rolls-Royce and Volkswagen produce markedly different vehicles serving different markets. Yet if you know how to drive one, you know how to drive the other. There is a shared functionality, a core, yet there is also a great deal of flexibility in the implementation and extension of that core. In a similar manner, different methodologies can be the “same” yet have dramatically different realizations.