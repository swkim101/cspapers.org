Strongly-timed programming provides precise timing behaviours in logical time, which is crucial for audio programming. Yet, in the presence of time-consuming tasks, it can easily fail in coordinating the advance of logical time and the passage of real time. This can cause undesirable results, such as unexpected noise in sound output. We propose mostly-strongly-timed programming, which integrates asynchronous behaviours into strongly-timed programming so that the underlying scheduler can suspend and resume time-consuming tasks so as not to invalidate the synchrony hypothesis. Such integration can enlarge the application domain of the programming concept.