In this paper, we show that by dropping the restrictions on interpretations of arbitrary programs and requiring only that very natural deductive systems are sound, we get classes of semantics which give good representations of program behavior and are more well-suited for applications involving an axiomatic approach (for example program verification). In addition, by tying the restrictions on the behavior of arbitrary programs or specified axiom schema, we get both a powerful formal tool and properties more widely used specifications lack such as compactness and completeness. Completeness is a very desirable property. It is fairly straightforward to show given any reasonable deductive system D for a class of models A that Pr(D) @@@@ Th(A) . But given an application such as program verification, if it is not true that Th(A) @@@@ Pr(D) , we may be able to find correct programs which we cannot verify. In this paper we show that by using the “axiomatizability” of programming constructs, we can obtain a technique for showing completeness results for some of the more widely used variations of PDL. We begin with some definitions.