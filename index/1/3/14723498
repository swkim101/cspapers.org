The <italic>post office problem</italic> is the following: points in <italic>d</italic>-dimensional space, so that given an arbitrary point <italic>p</italic>, the closest points in <italic>S</italic> to <italic>p</italic> can be found quickly.
We consider the case of this problem where the Euclidean norm is the measure of distance. The previous best algorithm for this problem for <italic>d</italic>>2 requires &Ogr;(<italic>n</italic><supscrpt>2<supscrpt><italic>d</italic>+1</supscrpt></supscrpt>) preprocessing time to build a data structure allowing an &Ogr;(log <italic>n</italic> query time. We will show that a data structure can be built in expected &Ogr;(<italic>n</italic><supscrpt>(<italic>d</italic>-1)(1+<italic>k</italic>)</supscrpt>) time, for any fixed <italic>k</italic>;>&Ogr;, so that closest-point queries can be answered in &Ogr;(log <italic>n</italic>) worstcase time. (The constant factors depend on <italic>d</italic> and <italic>k</italic>.) The algorithm employs random sampling, so the expected time holds for any set of points. A variant of this algorithm (for the variant problem where only one closest point of <italic>S</italic> to the query point is desired) requires &Ogr;(<italic>n</italic>⌈<supscrpt><italic>d</italic>/2</supscrpt>⌉) &ogr;(<italic>n</italic><supscrpt>⌈<italic>d</italic>/2⌉</supscrpt>) preprocessing time for &ogr;(n<supscrpt><italic>t</italic></supscrpt>) worst-case query time, for any fixed ε>0. These results approach the &OHgr;(<italic>n</italic><supscrpt>⌈<italic>d</italic>/2⌉</supscrpt>) preprocessing time required for any algorithm constructing the Voronoi diagram of the input points. Implementation of these algorithms requires not too much more than a random sampling procedure and a procedure for constructing the Voronoi diagram of that random sample.