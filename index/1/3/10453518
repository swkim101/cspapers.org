We are developing and testing a computer model of conversation by constructing a program that engages its user in purposeful conversation to help him perform some task. Conversation is viewed as a sequence of actions performed by the participants, intentionally affecting each other's model of the world, primarily their beliefs and goals. These actions can only be performed if certain conditions hold. We show here how some of these speech acts (Searle [1969]) can be described as operators In problem-solving systems such as STRIPS (Fikes and Nilsson[1971]), and how they can be incorporated into plans with non-linguistic acts such as scheduling trips or opening doors. Language analysis and generation can thus be related to problems of plan generation, execution, and recognition. Our work so far has concentrated on the speech act generation aspect. Consider for example a REQUEST from a speaker SP to a hearer H that H should perform a certain action ACT. SP would like H to make ACT one of his goals by having him recognize that SP wants him to. Certain conditions must be satisfied before the REQUEST can be usefully performed: 1) SP believes that H can do ACT 2) SP believes H believes H can do AcT, 3) SP wants to perform the REQUEST. Condition 2) excludes requests when H may be lacking necessary information although he may be familiar with all the necessary procedures. Want preconditions like 3) will appear on all actions performed "by human agents. If one agent SP is planning for another agent H to perform ACT, SP cannot assume that ACT is a goal of H; this want precondition of ACT is precisely what a REQUEST is meant to satisfy. (In fact, we assume that H's believing that SP wants him to do ACT is the effect of the REQUEST, rather than just H's wanting to do ACT, and we postulate an intermediate act to bridge this gap.) As well as REQUEST, our system includes a speech act INFORM whose effect is that the hearer believes the speaker believes some proposition P is true. Again, a mediating act is used to produce the hearer's believing P. System Overview. Our current system uses an object-centered representation developed by Levesque [1977] , implemented using partitioned semantic networks (hendrix [1975]), a semantic network interpreter that executes programs in the net, and an interactive network definition package. The system is coded in SPITBOL â€¦