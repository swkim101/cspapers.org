Several researchers have attempted to improve locality in garbage-collected heaps by changing the traversal algorithm used by a copying garbage collector. Unfortunately, these studies met with small success. We hypothesized that the disappointing results of these previous studies were due to two flaws in the traversal algorithms tested. They failed to group data structures in a manner reflecting their hierarchical organization, and more importantly, they ignored the dkastrous grouping effects caused by reaching data structures from a linear traversal of hash tables (i.e., in pseudo-random order). To test this hypothesis, we modified the garbage collector of a Lisp system (specifically, the Scheme-48 system) to avoid both problems in reorganizing the system heap image. We implemented our “hierarchical decomposition” algorithm (a cousin of Moon’s “approximately depth-fiist” algorithm) that is quite efficient on stock hardware. We aleo changed the collector to traverse global variable bindings in the order of their creation rather than in the memory order imposed by hash tables. The effects of these changes confirm our hypothesis. Some improvement comes from the basic traversal algorithm, and a greater effect results from the special treatment of hash tables. Initial page faults are reduced significantly and repeated page faults are reduced tremendously (by roughly an order of magnitude). In addition, improved measures of static locality (such as the percentage of on-page pointers) indicate that heap data can be cheaply and effectively compressed, and this may allow more effective paging and prefetching strategies; we suggest a level of “compressed in-RAM storage”, with price and performance between those of RAM and disk. These results call for a reinterpretation of previous studies, and for further studies of static-graph traversal techniques. They reduce the attractiveness of the exotic hardware needed for dynamically reorganizing objects within pages, and show that good locality can easily be achieved by straightforward and efficient techniques on stock hardware.