As the range of models which a tutoring system can capture is extended, efficient diagnosis becomes more difficult. We have implemented a partial solution to this problem, in the form of a 'Critical Problem' generator. We argue that great diagnostic power can be obtained by generating discriminating problem examples. In general, efficient diagnosis is just not possible without such a hypothesis-testing capability. We describe a program, PG, which given a pair of production rule models and a description of the class of problems which the student must solve, generates an abstract specification of the problems which discriminate between those two hypotheses. The key to this problem lies in the realisation that we are only interested in the abstract mapping between a models inputs and outputs; from the point of view of generating a Critical Problem, the intermediate processing of the model is irrelevant.