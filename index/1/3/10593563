JeeWiz is a commercial tool for model-driven generation of enterprise-level systems. It can automate any part of the development process where repetitive work is required by meta-programming. JeeWiz is universal - being based on a meta modelling approach, it can describe and generate any software technology. It is used for both system-level generation (multi-tier J2EE,.NET, SOA systems) and design-level transformation (XMI to WSDL/XML Schema, and back). The most difficult problem we have confronted is the complexity of mapping from rich, high-level logical models to the detailed artifacts required in real-life systems. Some of the features JeeWiz provides to address this are: reusable architecture and technology layers; local flexibility and cross-tier patterns; and strategies for shielding application programmers from the complexity of infrastructures.
 In summary, we need to satisfy demanding (and sometimes conflicting) requirements, namely to:<ul><li>represent both large-scale architectures and the fine-grained detail of programs</li><li>express general-purpose patterns as well as company-specific variations</li><li>manage simultaneous changes to model, hand-written code and code-generation patterns</li><li>encapsulate technology elements -languages, frameworks, architectures - into reusable layers</li><li>express models with logical information only but generate almost-complete physical systems.</li></ul>
 These requirements make JeeWiz meta-programming particularly complex. Each major version of JeeWiz has been driven by the need to manage this complexity, and has pushed back the boundaries of what we can realistically express and generate. This process has resulted in a number of new elements - our "sub-atomic particles" of model-driven system generation. These are then used in a synergistic combination of meta-models, patterns, a framework for generation, and large-scale build techniques.
 The demonstration will show these new elements in the context of <ul><li>specifying a model based on a meta-model</li><li>building transforms for real systems</li><li>meta-program maintenance, showing interesting combinations of the elements.</li></ul>