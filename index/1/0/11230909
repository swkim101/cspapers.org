The use of one acyclic join dependency and a set of functional dependencies appears powerful enough to represent data semantics in a relational database. There are several ways to characterize the acyclic join dependency, each providing its own desirable properties. In this paper we provide a sufficient condition for a join dependency to be acyclic and an algorithm that can aid a database designer. If the join dependency the designer wishes to use is cyclic, then, based on the results of the algorithm, we give two distinct methods that the designer can use to solve this problem. The methods can be implemented syntactically; however, the choice of a solution in a given case depends on the intended semantics. We also show how a combination of the two methods might be best in some cases.