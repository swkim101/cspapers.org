The paper outlines the principles for the concurrent evaluation of applicative programs based on Berklings reduction language. The recursive style of program design supported by this language lends itself to a recursive partitioning scheme which, for suitable program expressions, generates dynamically a hierarchy of processes for the concurrent evaluation of subexpressions. This hierarchy can elegantly be mapped onto a system of cooperating reduction machines featuring a stack architecture. A special ticket mechanism enforces an upper limit on the number of processes that, at any time, may exist within the system, which does not significantly exceed the number of the available machines.