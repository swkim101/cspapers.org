A computer architecture which is centered around the transformation of expressions facilitates the generation of programs from definitions, axioms, and theorems. It is shown that some of the well known methods to construct correct programs are directly available on this novel computer. Due to its novel architecture the need for support by large software systems and entailing systems size is diminished or has disappeared. Using this novel computer employing a lambda reduction language as machine language it is demonstrated how suitably chosen invariants get transformed into an executable program which is correct by construction. The various types of information which get incorporated into the result, as well as those parts of the original expression denoting the invariant which get expelled because they are constant, are discussed. It is demonstrated why the above mentioned novel computer architecture frees the user from being concerned with inessential problems, while on the other hand the use of higher level programming languages introduces additional problems due to the semantics of these languages. They necessitate considerations alien to solving the original problem. Crossreferences to other disciplines are pointed out which employ similar concepts.