Advances in hardware capacity and application requirements for increasingly sophisticated analysis and exploitation of information resources continue to create new challenges for database management systems. DB2 Common server, Release 2, addresses the evolving hardware environment and application requirements with facilities and features that support bib performance database exploitation and extend the power of the Relational Model While there are many challenges presented by the needs of database users to more effectively exploit their information resources, we shall concentrate on only a few of the technical accomplishments and directions of DB2 Common Server, Release 2. The topics we discuss include: the new storage architecture designed to address the growing pixformance gap between the CPU and the disks, the introduction of User Defined types and functions; extensions to SQL that enhance the user’s ability to extract and manipulate information in the database: and the implementation of data integrity facilities that enhance data value. The CPU -Z-S I/O Gap: an emergingproblem The rapid increases in CPU power, coupled with the availability of SMP platforms, has outpaced the performance increases of disk systems. In order to balance CPU capacity with disk performance, parallel I/o streams are needed to keep the CPU busy. DB2 Common Server has introduced a new storage architecture which allows tables, indexes, and Large OBjects to be striped across multiple disks. Large block and parallel read-ahead is used to match CPU processing to the disk latencies. Future development will exploit DBMS knowledge of data placement o support parallel query execution driven by parallel I./O streams Born different disks. Psrmieaion to copy without fee all or part of thie malcrisl ia grtinted provided that the copies are not made or distributed for direct commsrcirl advantage. the VLDS copyright notice and the title of the publication and itdate appear, and notice ia given that copying ia by permission of the Very Large Data Bus Endowment. To COPY othorwiao, or to republish. rc~~uiree a fee and/or aoscirl Objects Meet Database: persistence isn’t just disks The importance of type-based data behavior for developing applications that model the application domain must be carefully integrated into the realm of persistent data management. Many of the object-oriented techniques suitable for (non-persistent) programming language environments are not appropriate in the domain of databases. To begin the evolution towards object-oriented, hierarchial type systems, DB2 Common Server introduces facilities to define simple DISTINCT types which are represented by values of base types. In addition, stronglytyped user-defined functions over base and DISTINCT types allow users to extend the behavior of base types and define the behavior of DISTINCT types. As we evolve towards mom comprehensive support for abstract data types, considerable care is needed to preserve the ability of applications to work with the data elements that they supply and extract from the dambase. A continuing challenge is to provide common type-based behavior for values in SQL queries and for values in the application