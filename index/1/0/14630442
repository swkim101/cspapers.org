Formal behavioral models are used in model-driven software development to analyze and reason about system behavior. While scenario-based models highlighting interprocess communication are closer to distributed system requirements, state-based models highlighting intra-process behavior are suitable for code generation. In this paper we present ‘Footprinter’, a tool which exploits the relative strengths of these two modeling styles in support of a roundtrip engineering approach from requirements, to test case generation and execution, to tracing test execution results back to requirements - enabling debugging of test execution failures at requirements level.