The majority of existing language generation systems have a pipeline architecture which offers efficient sequential execution of modules, but does not allow decisions about text content to be revised in later stages. However, as exemplified in this paper, in some cases choosing appropriate content can depend on text length and formatting, which in a pipeline architecture are determined after content planning is completed. Unlike pipelines, interleaved and revision-based architectures can deal with such dependencies but tend to be more expensive computationally. Since our system needs to generate acceptable hypertext explanations reliably and quickly, the pipeline architecture was modified instead to allow additional content to be requested in later stages of the generation process if necessary.