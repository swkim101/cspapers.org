Designing Programs to Check Their Work Professor Manuel BlurnDepartment of EECS UC Berkeley and International Computer ScienceInstitute Berkeley, California Abstract Students, engineers,programmers... are all expected to check their work. Computerprograms are not. There are several reasons for this: 1. Computerhardware almost never makes errors -- but that fails to recognizethat programmers do! 2. Programs are hard enough to write withouthaving to also write program checkers for them -- but that is theprice of increased confidence! 3. There is no clear notion whatconstitutes a good checker. Indeed, the same students andengi-neers who are cautioned to check their work are rarelyinformed what it is that makes a proce-dure good for doing so --but that is just the sort of problem that computer science shouldbe able to solve! In my view, the lack of correctness checks inprograms is an oversight. Programs have bugs that could perfectlywell be caught by such checks. This talk urges that programs bewritten to check their work, and outlines a promising and rigorousapproach to the study of this fascinating new area.