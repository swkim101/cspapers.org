Despite all the advances in programming language technology, many of today's operating systems developers and researchers are still using essentially the same languages that their predecessors were using twenty to thirty years ago. Programming language researchers have developed many new ideas during this time to increase programmer productivity and to help developers produce more reliable software. Powerful module systems and expressive type systems, for example, introduce significant software engineering benefits including more flexible construction, increased reuse, and compile-time bug detection. If these features are as good as their designers claim, why are they not attracting more interest as tools for operating systems development and prototyping?