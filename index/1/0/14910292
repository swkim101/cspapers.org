By introducing syntactic and semantic changes, the upgrade of a software component may invalidate existing applications that use one of its previous versions. Existing adaptation approaches to compensate for such changes rely on and, hence, are limited to certain change specifications. In addition to using an adaptation technology, the developer needs to be guided in the way the component should be evolved in order to enable automatic adaptation and avoid semantic inconsistencies. Based on our experience, we describe problems common to different adaptation techniques and give advice on how to control yet not restrict component evolution.