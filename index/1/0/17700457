Abstract—Consider the problem of scheduling a set of sporadictasks on a multiprocessor to meet deadlines even at highprocessor utilizations. We assume that task preemption andmigration is allowed but because of their associated overhead,their frequency of use should be kept small. Task-splitting (alsocalled semi-partitioning) is a family of algorithms that offersthese properties. An algorithm in this class assigns most tasks tojust one processor but a few tasks are assigned to two or moreprocessors, and they are dispatched in a way that ensures that atask never executes on two or more processors simultaneously.A certain type of task-splitting algorithms, called slot-basedsplit-task dispatching, is of particular interest because ofits ability to schedule tasks at high processor utilizations.Unfortunately, no slot-based tasksplitting algorithm has beenimplemented in a real operating system so far.Consider the problem of scheduling a set of sporadictasks on a multiprocessor to meet deadlines even at highprocessor utilizations. We assume that task preemption andmigration is allowed but because of their associated overhead,their frequency of use should be kept small. Task-splitting (alsocalled semi-partitioning) is a family of algorithms that offersthese properties. An algorithm in this class assigns most tasks tojust one processor but a few tasks are assigned to two or moreprocessors, and they are dispatched in a way that ensures that atask never executes on two or more processors simultaneously.A certain type of task-splitting algorithms, called slot-basedsplit-task dispatching, is of particular interest because ofits ability to schedule tasks at high processor utilizations.Unfortunately, no slot-based tasksplitting algorithm has beenimplemented in a real operating system so far. Therefore, in this paper, we discuss challenges and designprinciples for implementing slot-based task-splitting algorithmson multiprocessor systems running the Linux kernel. Challenges and Design Principles for Implementing Slot-Based Task-Splitting Multiprocessor Scheduling Paulo Baltarejo Sousa, Bjorn Andersson, and Eduardo Tovar CISTER-ISEP Research Center Polytechnic Institute of Porto 4200-072 Porto, Portugal {pbsousa,bandersson,emt}@dei.isep.ipp.pt Abstract—Consider the problem of scheduling a set of sporadic tasks on a multiprocessor to meet deadlines even at high processor utilizations. We assume that task preemption and migration is allowed but because of their associated overhead, their frequency of use should be kept small. Task-splitting (also called semi-partitioning) is a family of algorithms that offers these properties. An algorithm in this class assigns most tasks to just one processor but a few tasks are assigned to two or more processors, and they are dispatched in a way that ensures that a task never executes on two or more processors simultaneously. A certain type of task-splitting algorithms, called slot-based split-task dispatching, is of particular interest because of its ability to schedule tasks at high processor utilizations. Unfortunately, no slot-based task-splitting algorithm has been implemented in a real operating system so far. Therefore, in this paper, we discuss challenges and design principles for implementing slot-based task-splitting algorithms on multiprocessor systems running the Linux kernel.Consider the problem of scheduling a set of sporadic tasks on a multiprocessor to meet deadlines even at high processor utilizations. We assume that task preemption and migration is allowed but because of their associated overhead, their frequency of use should be kept small. Task-splitting (also called semi-partitioning) is a family of algorithms that offers these properties. An algorithm in this class assigns most tasks to just one processor but a few tasks are assigned to two or more processors, and they are dispatched in a way that ensures that a task never executes on two or more processors simultaneously. A certain type of task-splitting algorithms, called slot-based split-task dispatching, is of particular interest because of its ability to schedule tasks at high processor utilizations. Unfortunately, no slot-based task-splitting algorithm has been implemented in a real operating system so far. Therefore, in this paper, we discuss challenges and design principles for implementing slot-based task-splitting algorithms on multiprocessor systems running the Linux kernel.