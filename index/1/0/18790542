The Treaty of Orlando WHEREAS among the purported benefits of object oriented technology are flexibility and dynamicism, the vast majority of existing object oriented languages have type hierarchies which require conformance to strictly hierarchical ideals and impose penalties on innovation; WHEREAS these issues have a brief but intense history of discussion and debate: [Lieberman 861 was a reaction to these problems of traditional models, proposing an alternative object sharing mechanism based on the idea of delegation-or forwarding of messages-to replace the traditional implicit inheritance mechanisms, and suggesting that modeling shared behavior through objects representing prototypes could replace the traditional model of abstract classes; [Ungar 871 reacted to the complications engendered by traditional class and inheritance mechanisms by proposing a mechanism also based on prototypes, which model did not propose explicit delegation, but which also shared-through " dynamic inheritance "-the essential characteristics of allowing dynamic sharing patterns and attaching idiosyncratic behavior to individual objects, resulting in a drastic simplification of the Smalltalk object model, using the PARENT link to more flexibly serve for the more complex class/subclass/instance protocol; [Stein 871 attempted a rapprochement between the delegation and inheritance views by noticing that the class/subclass relationship already captured delegation, if a shift was made to a class-only representation rather than Lieberman's instance-only representation; and in unifying classes and instances, extended the class-instance relationship to allow idiosyncratic " instances, " providing individual object behavior and more dynamic sharing patterns than traditional inheritance models; WHEREAS these, our proposals, have helped to elucidate the following three independent dimensions along which this sharing mechanism-which some call delegation and others inheritance, but which is in any case fundamental to object oriented systems-can be examined, namely: FIRST, whether STATIC or DYNAMIC: When does the system require that the patterns of sharing be fixed? Static systems require determining the sharing patterns by the time an object is created, while dynamic systems permit determination of sharing patterns during runtime, when an object actually receives a message. SECOND, whether IMPLICIT or EXPLICIT: Does the system have an operation that allows a programmer to explicitly direct the patterns of sharing between objects, or does the system do this automatically and uniformly? Explicit delegation (or inheritance) allows the ability to delegate only a single method, rather than " anything that can't be handled locally. " and THIRD. whether PER OBJECT or PER GROUP: Is behavior specified for an entire group of objects at â€¦