Aspect-oriented programming (AOP) allows programmers to modularize the implementation of crosscutting concerns. AspectJ and related languages achieve this with a linguistic approach, which enables different modules of the program to have a crosscutting structural relationship.In fluid AOP the development environment temporarily shifts a program to an alternative crosscutting module structure to enable specific editing or reasoning tasks. The program text can appear to have different crosscutting modularities simultaneously, as opposed to just having modules that crosscut each other.In this demonstration we show three possible fluid AOP designs, and compare their look and feel using common examples.