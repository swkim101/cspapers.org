Summary form only given. The growing demand for computing power in automotive applications can only be satisfied by embedded multi-core processors. Significant parts of such applications include OEM-owned legacy software, which has been developed for single-core platforms. While the OEM is faced with the issues of parallelizing the software and specifying the requirements to the ECU supplier, the latter has to deal with implementing the required parallelization within the integrated system. The Logical Execution Time (LET) paradigm addresses these concerns in a clear conceptual framework. We present here initial steps for applying the LET model in this respect. This work deals with the parallelization of a legacy electric powertrain coordinator software, by exploiting its existent inherent parallelism. The application software remains unchanged, as adaptations are only made to the middleware. The LET programming model is employed to ensure that the parallelized software has a correct functional and temporal behavior, while giving room for optimizing the parallelization. The Timing Definition Language (TDL) and associated tools are employed to specify LET-based requirements, and to generate system components that ensure LET behavior. While the runtime overhead of TDL components is still under evaluation, it is shown that the required buffer overhead can be kept small by a suitable choosing of LET values. The work describes two conceptual ways for integrating TDL components in AUTOSAR, by using either a complex device driver, or OS schedule tables. Next steps include a prototypical realization of the presented concepts, which will be done in a cooperation between OEM and suppliers. As evidence is gathered on the LET programming discipline's role as a facilitator of interaction between OEM and suppliers, we plan to further pursue LET standardization efforts in AUTOSAR.