Some protection mechanisms support the implementation of abstract type objects. The “separation of privilege” and the “least privilege” principles define several requirements that must guide the design of such protection mechanisms. Some of these requirements can be used to eliminate inadequate or unnecessary mechanisms. Type protection mechanisms and some of the requirements of the least privilege principle have either practical theoretical limitations. To mitigate these limitations, a capability-based architecture must support (1) the migration of abstract type objects outside the control of their type manager, and (2) inexpensive, small segments. To meet the requiements of the “separation of privilege” and “least privilege” principles, a capability-based architecture only needs to support (1) protected procedures and (2) “explicit” mechanisms for separating access privileges to objects and to object representations.