The following algorithm solves the distance version of the all-pairs-shortest-path problem for undirected, unweighed n-vertex graphs in time O(&f(rJ) log n), where M(n) denotes the time necessary to multiply two n x n matrices of small integers (which is currently known to be o(n2376)): Input: n x n O-1 matrix A, the adjacency matrix of undirected, connected graph G’ Output: n x n integer matrix D, with dij the length of a shortest path joining vertices i and j in G function APD(A : n x n O-1 matrix) : n x n integer matrix let Z=A. A let B be an n x n O-1 matrix, where bij = 1 iff i # j and (aij = 1 or ~tj > O) if bij = 1 for all i # j then return n x n matrix D = 2B – A let T = APD(B) let X=T. A { 2tij if Zij ~ tij . degree(j) return n x n matrix D, where dij = Zt ij – 1 if Xij < tij . degree(j) We also address the problem of actually finding a shortest path between each pair of vertices and present a randomized algorithm that matches APD() in its simplicity and in its expected running time. 1. Computing All Dktances In the following let G be an undirected, unweighed, connected graph with vertex set {1, 2, ..., n} and adjacency matrix A, and let dij denote the number of edges on a shortest path joining vertices i and j in G. In this section we show that the function APD() computes all dij correctly within the claimed time bound. Claim 1 Let Z = A oA. There is a path of length 2 in G between vertices i and j iff ~ij >0. Proofi There is a length 2 path joining i and j iff there is a vertex k adjacent to both i and j, which is exactly ‘he Cme ‘f ‘ij = ~l<k~n aikakj >0❑ “Supported by NSF Presidential Young Investigator Award CCR-9058440. Email address: seidel@cs.berkeley.edu Permission to oopy without fee all or part of this material is granted providad that the copies are not made or distributed for direct commercial advantage, the ACM copyright notice and the title of the publication and its date appear, and notice ie given that copying is by permission of the Association for Computing Machinery. To copy otharwisa, or to republish, raquirae a fee and/or spacific permission. 24th ANNUAL ACM STOC 5/92/VICTORIA, B.C., CANADA @1992 ACM ()+9791-51 2.7/92/0004/074~...$J .50 Let G’ be the simple undirected n-vertex graph obtained from G by connecting every two vertices i and j by an edge iff there is a path of length 1 or 2 between i and j in G. Note that the O-1 matrix B computed in the algorithm is the adjacency matrix of G’. G’ is the complete graph iff G has diameter at most 2, and in that csse dij = 2 if aij = O and dij = 1 if aij = 1, Thus the algorithm is correct for graphs of diameter at most 2. Let tijdenote the length of a shortest path joining i and j in G’. Claim 2 For any pair i, j of vertices, dij even implies d=$J 2tij , and dij odd implies dij = 2tij – 1. Proof: Observe that if for a pair i, j of vertices dij = 2s and i = io, il, ..., i2S-l,i2S = j is a shortest path in G, then i = io, iz, iq, ..., iz~-z, izs = j is a shortest path between i and j in G’ and has length s. Similarly, if dij = 2s–1 andi= io, il, . . . . i2~-3, i28-2, i2S-1 = j is a shortest path inG, then i = io, i2, iq, . . .,izS_.4,iz*_z,iz8_l = j is a shortest path between i and j in G1 and has length s. E!l