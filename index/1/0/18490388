Reasoning plays an important role in many activities which involve intelligence, and it may be anticipated that automated reasoning will play a significant role in many applications of artificial intelligence. The importance of developing methods of automating reasoning has been recognized since the inception of research on artificial intelligence. One fruitful approach to this problem is to use the language and methods of symbolic logic. Since a great variety of problems can be expressed in symbolic logic, progress in developing general purpose reasoning tools based on symbolic logic has the potential to contribute to progress in many realms of artificial intelligence. Work on automated deduction using symbolic logic has been progressing steadily, but in recent years such work has been presented primarily at conferences on automated deduction (such as (Kirchner & Kirchner 1998; Ganzinger 1999; McAllester 2000; Voronkov 2002; Mayer & Pirri 2003; David Basin 2004)) rather than at conferences on artificial intelligence. While such work often focuses on proving theorems, it should be noted that procedures for automatically proving theorems can play crucial roles as inference mechanisms in more general automated reasoning tools. We provide a demonstration of the TPS automated Theorem Proving System. This system can be used to prove theorems of type theory, which is also known as higher-order logic and which includes first-order logic. In a practical sense type theory has greater expressive power than firstorder logic, and it is well suited to the formalization of various disciplines, including mathematics and fields which use mathematics. For example, inductive definitions can be expressed in a very simple and natural way in type theory. Also, in type theory one can quantify over functions, such as functions mapping states to states. Our demonstration includes explanations of the notations used by TPS, which are based on a formulation of type theory (the typed Î»-calculus) which was introduced by Alonzo Church (Church 1940) and is explained further in the text (Andrews 2002). TPS has been developed over several decades in collaboration with Dale Miller, Frank Pfenning, Sunil Issar, Carl Klapper, Dan Nesmith, Hongwei Xi, Matthew Bishop, and Chad E. Brown. TPS produces formal proofs (in natural de-