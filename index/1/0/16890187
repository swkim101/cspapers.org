Computing queries from derived relations, optimizing queries from a group of queries, and updating materialized views are important database problems and have attracted much attention. One thing common to these problems is their demand to quickly solve the implication problem — given two predicates &sgr;<subscrpt><italic>Q</italic></subscrpt> and &sgr;<subscrpt>τ</subscrpt>, can &sgr;<subscrpt><italic>Q</italic></subscrpt> imply &sgr;<subscrpt>τ</subscrpt> (&sgr;<subscrpt><italic>Q</italic></subscrpt>→&sgr;<subscrpt>τ</subscrpt>)? The implication problem has been solved by converting it into a satisfiability problem. Based on a graph representation, a detailed study of the general implication problem on its own is presented in this paper. We proved that the general implication problem, in which all six comparison operators: =, ≠, <, >, ≤, ≥, as well as conjunctions and disjunctions are allowed, is NP-hard. In the case when “≠” operators are not allowed in &sgr;<subscrpt><italic>Q</italic></subscrpt> and disjunctions are not allowed in &sgr;<subscrpt>τ</subscrpt>, a polynomial time algorithm is proposed to solve this restricted implication problem. The influence of the “≠” operator and disjunctions are studied. Our theoretical results show that for some special cases the polynomial complexity algorithm can solve the implication problem which allows the “≠” operator or disjunctions in the predicates. Necessary conditions for detecting when the “≠” operator and disjunctions are allowed are also given. These results are very useful in creating heuristic methods.