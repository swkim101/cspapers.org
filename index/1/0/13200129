We evaluate inductive logic programming (ILP) methods for predicting fault density in C++ classes. In this problem, each training example is a C++ class deenition, represented as a calling tree, and labeled as \pos-itive" ii faults (i.e., errors) were discovered in its implementation. We compare two ILP systems, FOIL and FLIPPER, and explore the reasons for their diiering performance, using both natural and artiicial data. We then propose two extensions to FLIPPER: a user-directed bias towards easy-to-evaluate clauses, and an extension that allows FLIP-PER to learn \counting clauses". Counting clauses augment logic programs with a variation of the \number restrictions" used in description logics, and signiicantly improve performance on this problem when prior knowledge is used.