The following problem was originally motivated by a question arising in scheduling maintenance periods for aircraft. Each maintenance period is a job, and the maintenance facilities are machines. In this context, there are very few different types of maintenances performed, so it is natural to consider the problem with only a small, fixed number C of different types of jobs. Each job type has a processing time, and each machine is available for the same length of time. A machine can handle at most one job at a time, all jobs are released at time zero, there are no due dates or precedence constraints, and preemption is not allowed. The question is whether it is possible to finish all jobs. We call this problem the Multiprocessor Scheduling Problem with C job lengths (MSPC). Scheduling problems such as MSPC where we can partition the jobs into a relatively few types such that all jobs of each type are identical are often called high-multiplicity problems. High-multiplicity problems are interesting because their input is very compact: the input to MSPC consists of only 2C + 2 numbers. For the case C = 2 we present a polynomial-time algorithm. We show that this algorithmmore » produces a schedule that uses at most three different one-machine schedules, the minimum possible number. Further, we extend this algorithm to the case of machine-dependent deadlines and to a multi-parametric case. Finally, we discuss why our approach appears not to extend to the case C > 2.« less