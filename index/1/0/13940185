A ma jo r imped iment to the development of h igh-performance knowledge-based systems arises f rom the p roh ib i t i ve ef for t i n volved in equipping these systems w i t h a suff ic ient set of problem-solv ing methods. Thus , one impo r t an t research prob lem in Machine Learn ing has been the study of techniques for inferr ing problem-solv ing methods f r om examples. A l t hough a number of techniques for learning prob lem-so lv ing methods have been described in the l i te ra ture, a l l of them assume a state-space model of problem-solv ing. In th is paper we describe a new technique for learning prob lem-reduct ion methods, Ver i f icat ion-Based Learn ing ( V B L ) , which extends the earl ier techniques to the prob lem-reduct ion fo rmu la t i on o f prob lem-so lv ing. We i l lus t ra te the V B L technique w i t h examples d rawn f r om c i rcu i t design and symbol ic in tegra t ion . I I n t r o d u c t i o n A . M o t i v a t i o n Knowledge-based systems require a large number of domain-specific problem-solv ing methods for achieving h igh levels o f performance. The V E X E D knowledge-based system for c i rcu i t design | l | , and the PECOS system for knowledge-based au tomat ic p rog ramming |2] are a few examples of systems tha t need a large set of domain-specif ic prob lem-so lv ing methods. B u i l d i n g knowledge-based problem-solvers has thus been a labor ious process, because of the ef for t needed in equ ipp ing these systems w i t h a suff ic ient set of prob lem-so lv ing methods. Ear l ier researchers in the f ie ld of Mach ine Learn ing have addressed the knowledge acquis i t ion issue by developing a number of techniques for learning prob lem-so lv ing methods f r o m examples; however, a l l these techniques assume a state-space p rob lem-so lv ing model . For example, in the p lan general isat ion component o f S T R I P S [3|, a p lann ing me thod is v iewed as a m a p p i n g , f r om an i n i t i a l state descr ipt ion i n t o a t e rm ina l s ta te descr ip t ion; new methods are constructed as macros of p r i m i t i v e p lann ing methods. W o r k on learning control knowledge for selecting preferred methods, specif ical ly (4, 6] , has also adopted a state-space mode l : the knowledge specifying when a method should be appl ied is determined by comput ing the weakest precondition of a sequence, conta in ing t ha t par t icu lar m e t h o d , wh ich maps some i n i t i a l state i n t o a specific goal state (such as a solved p rob lem, or a won state) . In order to cope w i t h the comp lex i t y o f cer ta in design planning domain-. knowledge' i>a p ^< <'lwr^ MI SUch domains, have frequently adopted a problem reduction approach to solving problems Thus we need to develop techniques for learning problem-solving methods which are appropriate to the problem-reduction formulation of problem-solving The primary contribution of this paper is to present a new technique for inferring general problem-reduction methods from training examples of decompositions of specific problems. This technique, VerificationBased Learning(VBL), can be viewed as an extension of earlier techniques, particularly that of |3, 6), to the problem-reduction formulation of problem-solving. This research arose in the context of developing LEAP, a Learning Apprentice system for circuit design |7] By a Learning Apprentice system, we mean one that is meant to act as an interactive problem-solving aid, and is specifically designed to augment its knowledge base by monitoring and analyzing the problem-solving activity of its users.** In those situations, where it is unable to provide advice, or when its advice is rejected by the user, LEAP will augment its knowledge of circuit design, by analyzing and generalizing the solution provided by the user to form a new problem-reduction method. At present we have implemented a prototype version of the LEAP system. The example of a problem-reduction method in circuit design that we describe later in this paper is one of several instances of circuit decompositions we have used to test this prototype version. B . The Prob lem-Reduc t ion Fo rmu la t i on o f Prob lem-Solv ing We now give a more precise description of the model of problem-solving that we use in this paper. The problem-reduction formulation of problem-solving has been well-studied |8, 9 ] . *** In this formulation, states describe problem instances, the initial state is the description of the problem being solved, the final state is a solution to the original problem, and a problemreduction method, which is a mapping between states, is one that decomposes a given problem into a number of simpler subproblems, such that the solution to the original problem it obtained by tome eompotition of the solutions to each of the subproblems. For the purposes of this paper, we define problem-reduction methods to be the following mapping, •This material is bawd on work supported by the Defease Advanced Research Projects Agency under Research Contract N0O014-S1.K-0394. The views and conclusions contained in tab document are those of the author and should not be interpreted as necessarily representing the official policies, either expressed or implied, of the Defease Advanced Research Projects Agency or the U.S. Government. •Thus, gaining expertise by "looking over their shoulders" ***The distinction between state space methods and problem-reduction methods is alternatively described in (6] as tbat between production-type methods and reduction-type metbods.