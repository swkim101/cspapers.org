Are there any good lessons that software people can learn 15 years after the Y2K crisis? We live in a much more software-dependent world today, and the next generation of technical innovations may have some technical risks that have worldwide consequences. The 1990s was the most recent massive effort to improve and modernize software – and we might look to the past to explore some technical and management approaches that will prepare us for the “smart technology” wave. As was the case in the 1990s, every company, every industry, and every country will need to be concerned with the potential risks in our software-driven world of the future: to better address software requirements, design, coding, and testing of our smart applications and smart support software. Are there some valuable technical and management ideas we can use again?