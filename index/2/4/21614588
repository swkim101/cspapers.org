Smalltalk, although rccognizcci as a good platform for rapid protolypirrg and software reuse, is widely regarded as ciifEcult to learn. Programming in Smalltalk invo~ves adopting the object-orielltcd, message-pmsing model of program design and execution and becoming familiar with a large set of existing object classes, methods, and their inheritance relationships. [Jnlike learning a procedural language like Pascal or C, learning Smalltaik is dominated by browsing and code comprehension, I,earners of Smalltalk typically experience a long, slow startup phase in which they becc)me familiar with the hierarchy and object-oriented model but do little meaningful work (this has been dubbed climbing the Smalltaik mountain [1]). In an industrial environment, this is particularly troublesome because of the real or perhaps perceived need to get started quickly.