The term 'what you see is what you get' has been used to refer to the editing of fully formatted documents so that every edit change causes the text to be updated immediately to show the document as it would appear when printed, thus eliminating the immediate step of (periodically) invoking a formatter explicitly. This mode of working is generally agreed to result in more and better results with less effort, both because the real-world simulation of a document is easier to use than a mixture of format command statements and unformatted text, and because many errors show up more immediately in a real-world situation than in a complicated abstraction.What happens if we extend this notion throughout the interface between the user and the computer? We enter a world of constrained objects and functional (applicative) actions. If the constraints are algebraic, the result is VISICALC-Iike. If the constraints are formats, the result is format programs which are also (unfilled) documents and can be created and edited as document images. If the constraints are actions themselves, the result is islands of action-programs in a sea of constraints.We propose, as the user interface, a general constraints language for documents. The documents are also "templates" or "forms", and have a robustness that makes them hard to injure. Anything may be represented as a document, from a memo to a database to a protein molecule. The commands for applying constraints all take no arguments other than the thing the user is pointing at when the command is given. The user's world is then like a large Tinkertoy environment, for constructing active and passive things.Examples of working in this world, in black and white and in color, will be given covering traditional text operations, the construction and use of document templates, the equivalent of programming as we know it, the equivalent of programming as we don't know it, and finally a John Milton template to test the relation between Paradise Lost and the fundamental theorem of the calculus.