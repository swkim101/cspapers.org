The MECHO p r o j e c t (see Cl]) cons is ts of w r i t ­ ing a computer program which can colve a wide va r ­ i e t y o f simple mechanics problems s ta ted in Eng l i sh . This program is being used as a veh ic le f o r s tudy­ ing methods f o r gu id ing search in a semant ica l ly r i c h domain. Our methodology is to f i n d genera l , j u s t i f i a b l e , in ference ru les which can be combined to ca r ry out the reasoning necessary to solve the mechanics problems. As is we l l known, when ru les l i k e these are run on a general in ference machine the r e s u l t is o f ten a combinator ia l exp los ion . Rules are combined in unexpected ways and the search f o r a s o l u t i o n is developed along unreason­ able paths . These f a i l u r e s are used to debug the ru les by adding to them l o c a l , domain s p e c i f i c c o n t r o l i n fo rma t i on . F i n a l l y these techniques are genera l ized and incorporated in the in ference mechanism. We hope t h a t t h i s methodology w i l l lead us to the design of a computat ional l og i c f o r na tu ra l reasoning. In t h i s paper one such t r a n s i t i o n from domain s p e c i f i c to general in ference technique w i l l be descr ibed. We w i l l use t h i s example to emphasize the importance of t h i s genera l i za t i on stage. W i th ­ out i t one might be led to s u p e r f i c i a l and fa l se conclusions about the nature of na tu ra l reasoning. Suppose we have ava i l ab le the fo l l ow ing r e ­ l a t i o n s : Ve l (Ob jec t , v, t ime) (v is the ve loc ­ i t y o f ob jec t dur ing t i m e ) ; A t (Ob jec t , p l ace , moment) (object is at place at moment); F i n a l ( p e r i o d , moment) (moment is the f i n a l moment of t ime i n t e r v a l p e r i o d ) . We may have discovered the f o l l ow ing domain s p e c i f i c i n ­ format ion enabl ing us to guide the search fo r problem so lu t i ons along successful l i n e s , ( i ) I f the program i s desperate to s a t i s f y Ve l (Ob jec t , v, t i m e ) , ob jec t and t ime being known, but a l l in ferences have ground to a h a l t , then a new in termedia te unknown v can be created and as­ ser ted to be the v e l o c i t y o f ob jec t a t t ime , ( i i ) I f the program i s asked to conf i rm t h a t A t ( o b j e c t , p l a c e l , moment), but i t a l ready knows t ha t ob jec t is at some d i f f e r e n t place (place2) at moment, then the attempt to prove A t ( o b j e c t , p l a c e l , moment) can be abandoned, be­ cause ob jec ts can on ly be in one place at a t ime , ( i i i ) I f the f i n a l moment o f pe r iod is found to be momentl, but l a t e r processing f a i l s , i t i s no use backing up to r eca l cu la te F i n a l ( p e r i o d , ?x ) , since the same answer is bound to be g iven . A t f i r s t glance i t might seem as i f these ex­ amples argued f o r the i n t e r v e n t i o n of r i c h domain s p e c i f i c in fo rmat ion a t a l l c o n t r o l po in t s and t h a t a programming language which f a c i l i t a t e d such i n t e r v e n t i o n was requ i red . But these conclusions are not j u s t i f i e d from the examples ( i ) ( i i i ) above. In f a c t ( i ) ( i i i ) represent d i f f e r e n t facets o f a general phenomenon. To see t h i s no t i ce t h a t V e l , At and F i na l are a l l r e a l l y f unc t i ons : Vel is a f unc t i on from ob jec ts and t imes to v e l o c i t i e s ; At is a f unc t i on from ob jec ts and moments to places and F i n a l is a f unc t i on from per iods to moments. What separates func t ions from other r e l a t i o n s is t ha t they are s ing le va lued, tha t i s t h e i r value is guaranteed to e x i s t and to be unique♦ ( i ) is an example of t h i s existence proper ty being used and ( i i ) and ( i i i ) d i f f e r e n t uses of the unique­ ness p roper t y . The genera l i za t ions o f ( i ) , ( i i ) and ( i i i ) are ( i ) ' I f the program is desperate to f i n d a func­ t i o n value given i t s arguments, and a l l in ferences have f a i l e d then a new e n t i t y can be created and asserted to be t ha t va lue . (Note tha t we do not want the program to create a new e n t i t y whenever it is l ega l to do so as t h i s con t r ibu tes to the com­ b i n a t o r i a l exp los ion . The no t ion of being des­ perate f o r the answer can be genera l ized (see [21). ( i i ) * I f the program is t r y i n g to conf i rm a func­ t i o n va lue , but i t a lready has a con t rad i c to ry value s tored then the conf i rmat ion attempt is to be abandoned. ( i i i ) ' I f the program has ca lcu la ted a f unc t i on value then i t should not reca lcu la te t h i s on back up. Note t h a t ( i ) ' ( i i i ) ' improve on the p red ica te ca lcu lus representa t ion of the existence and unique­ ness of func t ion va lues , by g i v i ng procedural i n ­ format ion about when t h i s in fo rmat ion is to be used. They also improve on the l o c a l domain s p e c i f i c em­ bodiment of ( i ) ( i i i ) by represent ing a large amount of such in fo rmat ion in concise form, e .g . the existence proper ty can now be used on At and F ina l and the uniqueness proper ty can be used on V e l . A l l t h a t i s necessary to share the bene f i t s o f the con t ro l i n fo rmat ion embodied in ( i ) ' ( i i i ) ' i s to spec i fy which r e l a t i o n s have func t i on va lues . For func t ions of one argument the implement­ a t i on of ( i ) ' ( i i i ) ' can be ass is ted by ma in ta in ­ ing a s ing le s l o t on the proper ty l i s t of the argu­ ment. However, something more complicated is needed f o r func t ions of more than one argument. Some r e l a t i o n s may be func t ions in more than one way, e . g . i f T imesys(per iod, ini tmom, finmom) means t h a t initmom is the i n i t i a l moment and finmom is the f i n a l moment of per iod then Timesys is a func t i on in 3 ways: (a) from per iod to Initmom (b) from per iod to finmom (c) from initmom and finmom to pe r iod