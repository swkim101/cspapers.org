A pattern language consists of a cascade or hierarchy of parts, linked closely together by patterns, which solve generically recurring problems that are associated with the parts. Each pattern has a title, and collectively the titles form a language for design [1] Pattern Languages are in life, simply a collection of interrelated patterns [2]. These interrelated patterns are combined in any way and combination to create new environments, where practitioners can solve context-specific problems. Precisely, the concept of pattern languages has invaded over into the software engineering field, to describe prior experiences and the processes that stem from them, in a very simple language, where patterns are tactfully woven as a whole, and can be combined in any manner to solve a particular and complex problem. Yet, this process is still done in an ad-hoc manner and is not straightforward enough, to ease and speed up the software development process.
 Thus, this workshop is driven forward by three main questions. First, how can we classify, develop, and utilize analysis and design patterns together towards the path of a problem resolution? Second, what is the-behind-the-language that guides the sewing of patterns together as a whole? And third, how can we overcome and face challenges, other than patterns composition problems (patterns traceability, etc.) that can hinder the development of a system of patterns?
 The inherent inability to answer these questions detrimentally impacts the understanding of how to put patterns in real practice, and will therefore make software patterns' use more complex than it should.