Undergraduate computer science students can have difficulty understanding quicksort and other divide-and-conquer sorting algorithms. It is important to understand how students think about quicksort in order to find out how to better teach the students, and also for those students to be able to write and analyze these algorithms for their own use. Data was collected from two interviews, each about an hour long, with undergraduate computer science students. The data was then qualitatively analyzed in order to draw conclusions on how the students approached the coding of the quicksort algorithm. Both interview participants were able to quickly and efficiently write quicksort using linked lists. However, both students struggled when asked to rewrite their algorithms using static arrays. From the transcripts and hand-written notes taken from the two interviews, it seems plausible that their issues stem from challenges with their treatment of the pivot in the array implementation. Additionally, the array implementation may have caused the participants to change the visualization of the algorithm to which they had grown accustomed, further accentuating their difficulties. While both students showed obvious proficiency with the linked-list algorithm, they failed to realize key intuitions when attempting to make their algorithms space-efficient by using a single array. Future work may include analysis of other divide-and-conquer algorithms, as well as a closer look into how visualizations of sorting algorithms affect student understanding.