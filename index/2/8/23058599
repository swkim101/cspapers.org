Creating programming projects that engage students has been a continual challenge in computer science. Ideally, programming projects should require student to reflect upon and apply programming concepts and help them develop creativity, problem-solving, and other skills for the workplace. The use of real-world problems is one possible solution to the issue but it comes at the cost of increased complexity, size, and burden on the instructor. One approach to reducing these costs is to design (or redesign) programs, developed as part of a research agenda, for use as student projects. Designing these programs for flexibility, adding extra, student-appropriate, feedback and identifying portions of the code that could become interesting student projects helps support both research and classroom learning at the same time. By explicitly designing with projects in mind, instructors can control the complexity and size of these real-world problems and can, potentially, create a platform that can support multiple types of student assignments. This poster describes the experience of redesigning a UML diagramming tool to implement this idea and provides examples of the design decisions made, lessons learned during the process, and other programs that could be used in a similar fashion. Future work includes evaluating the students' reaction to the projects and whether enough support is being provided.