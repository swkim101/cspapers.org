Keeping up with the significant capacity increases in VLSI processing has required continuous design productivity improvements from VLSI designers. The transition from transistor-level entry to gate-level schematic entry enabled an order-of-magnitude improvement in designer productivity. Similarly the transition from schematic entry to HDL synthesis has again enabled another order-or-magnitude improvement in designer productivity. Hardware designers have come to take such improvements for granted but such improvements are nearly unparalleled in design science. Nevertheless, processing continues to improve and fully exploiting the capability offered by mega-cell gate arrays will almost certainly require another leap in design productivity. So where will the next productivity boost come from? The panel will try to survey each of the potential answers to this question. For example, high-level synthesis has long been supposed to be the successor to logic synthesis and a great deal of research has been done in this area. However, some designers are still skeptical of the ability of high-level synthesis to deliver either higher productivity or the required circuit quality. Circuit design using pre-designed design libraries of regularly used components certainly appears to have the potential to boost productivity, but some designers doubt that pre-designed modules are flexible enough to be of much use. The failure of silicon compilers to succeed as a general design paradigm is used to support this negative assessment. Another alternative is the use of domain-specific entry mechanisms such as statecharts or dataflow diagrams. These description methods provide abstractions that are higher level than conventional HDL's and are well-tuned to their particular applications, such as control systems or signal processors. Still, some designers point to the fact that most hardware designs cross more than one domain and therefore these tools are too domain-specific to make an impact on the general problem of hardware design. A truly radical alternative is that the real productivity boost in hardware design will not come from improvements in hardware design methods at all, but rather from moving more and more hardware functionality into software running on processors. Thus the source of the required productivity boost in hardware design is not at all clear. In this panel we will debate the worth of each of the proposed productivity improvers and attempt to decide for ourselves: "Where's the next productivity boost?"