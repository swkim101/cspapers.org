Programming languages such as C and C ++ support vari-adic functions, i.e., functions that accept a variable number of arguments (e.g., printf ). While variadic functions are ﬂexible, they are inherently not type-safe. In fact, the semantics and parameters of variadic functions are deﬁned implicitly by their implementation. It is left to the programmer to ensure that the caller and callee follow this implicit speciﬁcation, without the help of a static type checker. An adversary can take advantage of a mismatch between the argument types used by the caller of a variadic function and the types expected by the callee to violate the language semantics and to tamper with memory. Format string attacks are the most popular example of such a mismatch.