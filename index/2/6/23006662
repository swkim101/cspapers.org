Ideally, we would always be able to write clear, concise programs and have them run quickly. One major impediment is the redundancy which can occur in direct recursive solutions. In some cases, this means writing a loop even if the programmer is more comfortable thinking in terms of recursion. In other cases the impact on code is even more dramatic, and in these cases most programmers choose to sacrifice clarity in exchange for improved asymptotic complexity. There exist program transformation techniques that would allow us to write idiomatic recursive programs without losing efficiency. One such transformation is the "tupling" transformation, which can and has been implemented as an automatic compiler optimization. This transformation is, however, only applicable to a narrow class of problems. We are exploring related transformations, such as tabulation, which can helpfully be applied to a wider class of recursive programs, and attempting to answer the question of when these transformation techniques are most useful to programmers aiming to balance program clarity with performance.