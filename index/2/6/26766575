1. I N T R O D U C T I O N Programming assignments play an impor tan t role in beginning programming courses. F rom programming assignments, s tudents should gain experience using a wide var ie ty of programming techniques and da t a structures. We have found tha t s tudents enjoy assignments tha t they feel have practical applications. Unfortunate ly , such programs are often fairly long and contain code not direct ly related to the goals of the assignment. This paper describes a programming project used in a da ta s t ructures course taken by second year undergraduate computer science majors. While the pr imary goal of the assignment is to give s tudents experience with generalized lists, several impor tant programming techniques and language concepts are used. The amount of "busy work" in this assignment is minimal; almost every part of the program illustrates one or more impor tan t computer science concepts. The assignment requires the s tudents to implement an in terpreter for a simple list manipula t ion language. Al though the language is similar to Lisp, no knowledge of tha t language is required. In fact , students are often not told of the similarities until after the Permission to copy without fee all or par t of this material is granted provided that the copies arc not made or distributed for direct commercial advantage, the ACM copyright notice and the title of the publication and its date appear, and notice is given that copying is by permission of the Association for Computing Machinery. To copy otherwise, or to republish, requires a fee and/or specific permission. © 1985 ACM0-89791-152-0 /85/003/0348 $00.75 assignment has been completed. An interesting feature of this assignment is tha t the software being wri t ten could be extended to a complete Lisp interpreter . The program is not a toy used only to i l lustrate a par t icular da ta s t ructure or programming technique. In the next section, we overview the project and describe how it is par t i t ioned for presentat ion to students. We then discuss the impor tant concepts tha t are i l lus t ra ted by the assignment. Final ly, we describe several var ia t ions on the project tha t increase its usefulness. The complete text of the assignment can be found in the appendix, along with test da t a and a sample solut ion to the first pa r t of the project . 2. O V E R V I E W O F T H E P R O J E C T A list expression is a generalized list (i.e., a list whose i tems may themselves be lists) tha t specifies a composit ion of functions operat ing on data. A list expression is wri t ten as a sequence of items enclosed in parentheses. The first i tem specifies a function; the remaining i tems are operands, which may also be list expressions. Fo r example, the ari thmetic expression 2*4 ÷ 7 could be represented by the list expression (PLUS (TIMES 2 4) 7). The value of a list expression is the value of the function applied to the operands. The goal of the project is to design and implement an interpreter tha t reads and evaluates list expressions. A set of primit ive functions is built into the interpreter ; one of these functions allows the user to define addit ional functions. Because the da t a on which functions opera te has the same syntax as a list expression, a QUOTE function must be provided to prevent the evaluat ion of data.