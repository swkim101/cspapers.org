1. PROBLEM AND MOTIVATION Spatial query processing has become a fundamental part of many important applications, e.g. human brains modeling [31], medical images processing [44], and urban planning [17,42]. Due to its importance, there have been numerous research efforts in the last three decades to support many spatial operations (e.g., range query [34], spatial join [24], kNN joins [45] and computational geometry [8]). Most recently, and coupled with the recent explosion of big spatial data [13], recent research efforts are dedicated to take advantage of the widely-used MapReduce platform [9] to enable spatial query processing for big spatial data (e.g. [11, 28, 36, 46–48]). Unlike the case of traditional algorithms of spatial operations where there are extensive studies on benchmarking and query optimization issues (e.g., see [2, 14, 16, 18, 22, 24, 35, 39–41]), there are no similar efforts in MapReduce-based algorithms. This work shows our efforts in optimizing the spatial join operator as a first step towards building a full-fledged MapReduce-based spatial query optimizer. Spatial join is an expensive and crucial operation that joins two spatial datasets based on a spatial predicate, e.g., overlap, cover, touch. Our objective in optimizing the spatial join operation is not to compare between existing MapReduce-based spatial join techniques, and find which is best at what settings. Instead, we come up with a very thorough taxonomy that includes the spectrum of all possible ways of executing a spatial join in MapReduce. All existing algorithms for MapReduce-based spatial join (e.g., [1,12,19,38,43,47–49]) and non-explored yet techniques can be mapped to our taxonomy as special cases. In addition, our spatial join optimizer is equipped with a cost model that estimates the costs of different spatial join options in this taxonomy while taking its decisions. Unlike traditional cost models that focus on the cost of I/O accesses and processing times, the cost model in our optimizer estimates the costs of MapReduce phases.