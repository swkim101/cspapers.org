Map matching is the procedure for determining the path of a user on a map from a sequence of location data (which we refer to as track). This process serves as a common preprocessing step for reasoning about traffic on the road network as well as for providing better location-based services [3, 5, 1]. Converting a track to a topological path on a map not only makes it easier to reason about paths, but also leads to reduced storage requirements and more efficient operations on the same. Some examples of such operations are comparison, querying and retrieval of tracks based on similarity to other tracks [1].
 Due to its importance, many methods for map matching have been previously proposed [3, 4, 5], focusing on matching a single sufficiently dense and accurate sequence of locations. In this work, we consider the multi-track map matching problem, where we are given a number of tracks generated from trips through the same path, and we wish to recover the underlying path that generates these tracks. The problem is much more challenging than the single-track problem since each track contains a small number of samples (i.e. sampling intervals are large). This captures the realistic scenario where users repeatedly travel on regular routes, and samples are sparsely collected due to restraints in energy consumption on the mobile device. Another scenario is when a service collects users' location information only when the user actively uses such service. In such a scenario, the collected location data can be very sparse. However, since users typically travel on the same (or similar) routes repeatedly, one may compensate the sparseness of the data by combining location data from different trips.
 The main challenge in multi-track map matching is that in combining data from multiple tracks, global ordering on all samples is not available, a necessary condition for applying existing single-track map matching algorithms. Instead, each track only gives us the order on a subset of locations. If we apply the map matching algorithm on each individual track, we would obtain paths with very poor quality given the low sampling rate on each path.
 We propose two methods, the iterative projection scheme and the graph Laplacian scheme, to solve the multi-track problem by using a single-track map-matching subroutine. We also propose a boosting technique which may be applied to either approach to improve the accuracy of the estimated paths. In addition, in order to deal with variable sampling rates in single-track map matching subroutine, we revisit the single-track map matching problem and propose a method based on a particular regularized cost function that can be adapted for different sampling rates and measurement errors. The adaptation is in fact done through the regularization parameter λ in the cost function which balances two types of errors in measuring the quality of a path: the data error (fidelity of the path to the data points), and the model error (measuring "niceness" of the obtained path). By analyzing a simplified modeling of the problem, we characterize the optimal choice of λ in terms of the sampling rate and the variance of the measurement errors.
 Finally, we evaluate the effectiveness of our proposed techniques for reconstructing tracks under several different configurations of sampling error and sampling rate. The evaluations are done on the dataset available in [2]. The data set contains tracks collected from real users in Seattle,WA, using commercially available consumer grade GPS device. Our results indicate that the proposed approaches lead to reasonable estimates of the route, significantly better than what would be achieved in case tracks were map matched individually.