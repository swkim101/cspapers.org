Responders: Vie Basili What are the essential problems, rather than accidental ones, on which software engineering researchers should be working? This panel has been formatted so that four " trenchees " can share with us their perceptions of some essential problems. The responders will attempt to keep them from falling into the " accidental " trap. As background for the panel session, recall Fred Brooks' use [l] of the Aristotelian definitions of essential and accidental problems: Essential problems are those that are of the essence of something (e.g., the " invisibility " of software creates an essential problem of describing its characteristics); accidental problems are those that are an accident of choices or history (e.g., efforts to make Fortran more suitable for modern computational environments are attacking an accidental problem that might not have existed had a language like Algol become the dominant one for scientific calculation). A starting point for this panel is agreement with Brooks' assertion that we should be focusing on the essential problems. It is the considered opinion of the moderator (at least) that too much current software engineering research is aimed at accidental problems. A second point to consider is the sociology of defining research agendas in our field. It is clear that many innovations in most fields come out of more or less untargeted, basic research; that is, perhaps one of the strongest reasons for supporting basic research. It is also obvious that a viable scientific or engineering discipline will internally generate many of its own problems, unrelated to any current applications; mathematics and theoretical computer science are good examples. That is as it should be and we should continue to aspire to that level of maturity in software engineering (we aren't there yet). Many efforts to date by software engineering researchers Susan Gerhart to define agendas for the field (as opposed to their own personal research paths) have been notably unsuccessful. One reason for this may be that we don't listen to the people that will ultimately benefit from our research and who understand the problems intimately-the practicing software engineer. Some argue that practitioners only want solutions to yes-terday's accidental problems. In too many cases, that is true. Yet, there are those in the trenches who see the essential problems very clearly, perhaps more clearly than most in the research world.