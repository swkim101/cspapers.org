One natural way to implement rule-based expert systems is via logic programs. The rules in such systems are usually definite clauses, or can easily be expressed as such, and the inference mechanbms used by such systems are built into the Prolog interpreter, or can be implemented in Prolog without much effort. The one component of expert systems which is not readily available in logic programs is a language for specifying certainties of rules and data, and a mechanism for computing certainties of conclusions, given certainties of the premises. Clark and McCabe [1] suggest an implementation technique for solving this problem. They augment each predicate in the rule-language wi th an additional argument, whose value is the certainty of the solution returned in this predicate, and augment the condition of each clause wi th an additional goal, whose purpose is ' to compute the certainty of the conclusion of the clause, given the certainties of solutions to the goals in the condition of the clause. In this paper we propose a different way of implementing rule-based expert systems within Prolog, in which evaluation of certainties of solutions is carried out at the meta-level, within the logic program interpreter itself. This resulting framework, called logic programs with uncertainties, has the following properties: • It is amenable to theoretical analysis. In particular, a precise semantics can be given to logic programs wi th uncertainties. • Standard logic programs are a special case of logic programs wi th uncertainties. If all certainty factors are 1, then the semantics defined and the interpreters developed degenerate to the standard semantics and the standard interpreter for logic programs.