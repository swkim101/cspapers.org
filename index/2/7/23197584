It has been nine years since Anthony Ralston and Mary Shaw called for a rethinking of the importance of sound mathematical training for undergraduate computer science majors [14]. In their paper they stressed the need to develop a two-year sequence in discrete mathematics for beginning computer science majors. Since that time numerous articles about such a sequence have appeared in both mathematics and computer science journals [4], [9], [12] and [13] and a number of panel sessions at professional meetings of SIGSCE and of the Mathematical Association of America (MAA) have been held. After all this time questions about the place of discrete mathematics in the undergraduate curriculum are still being debated. One question that is no longer being asked is: should discrete mathematics be part of a computer science major's undergraduate program? The questions that are being asked now and for which there are no easy answers are: at what level should discrete mathematics be taught? should there be one course, two courses or even three courses? what should the prerequisites be for these courses? and what topics should be presented in these courses? Computer scientists and mathematicians who have read the literature, listened to the debates, examined the textbooks or taught a course in discrete mathematics or discrete structures know that there appears to be little agreement as to how and what works and when it works best. This paper attempts to analyze the current situation in more detail and to offer a few suggestions to keep the dialogue alive.