Operating systems (OS) courses often possess a significant open laboratory component. These programming projects can range from a semester-long multiphase implementation of a complete (though sparse) OS to simply tweaking a particular algorithm in a single OS module. There currently exist a number of courseware systems to support these projects. The number of such courseware systems is few, though, due to the enormous complexity involved in building them. Even though the number of such courseware systems is small, it is a non-trivial task for educators wishing to structure an instance of an OS course around such programming projects, to select which courseware system to use. Selecting from among the set of currently available courseware systems is a far more difficult task than selecting from among the set of currently available OS textbooks. Furthermore the stakes are higher in comparison with textbook selection. Consider the nightmare of structuring a course around a courseware system that turns out to be overly buggy, poorly documented, and too focused on minutiae to be of pedagogic value. Of course one need not make (OS) courseware decisions in a vacuum. One can post queries on appropriate newsgroups (e.g. comp.os.research or comp.edu) or listservs (e.g. the SIGCSE membership list), or follow the recommendations of those textbook authors willing to make such recommendations[lO, 111. This panel has been assembled for the purpose of providing more data regarding the strengths and weaknesses of the set of currently available OS courseware systems. Each of the panelists is an instructor (not a courseware author) that has significant experience in using one of the following OS courseware systems. Stephen Hartley Richard Stockton College Pomona, NJ 08240 hartleys@loki.stockton.edu