This paper discusses a technique used to introduce junior students to the quantitative impact of maintenance on a data processing department's budget. A mathematical model is developed to demonstrate the relation among cr i t i ca l variables. Some aspects of the model are explored for the student and then the student is guided to further exploration of the model through sets of exercises. The purpose of this paper is to describe a technique which introduces undergraduate students to the financial impact of software maintenance. I t is used in a junior level course in project managenlent and control. A prime objective of this course is to help the student develop an increased awareness of quantitative effects of data processing procedures on the finances of a company. The students w i l l have had an elementary course in Quant i tat ive Business Analysis and math courses through col lege algebra -few w i l l have had calculus. By th is t ime, the students have taken 20 24 quarter hours of programming and 8 12 quarter hours of courses in analysis and design. I t is inev i tab le that they w i l l have encountered the conventional wisdom proposit ions concerning the high cost of software maintenance. I t is probable that the student w i l l nei ther hBve invest igated the v a l i d i t y of tile conventional wisdom proposit ions nor have subjected them to any sort of c r i t i c a l quant i ta t i ve analysis. This material is introduced about a third of the way through the course. The principle that software should be developed to satisfy a business need is well understood by this point in the course. Also understood is the principle that an enlightened management would have approved development of the software only i f a p r io r analysis projected that a contr ibut ion to company p ro f i t s would resu l t . Presentation to the student involves f i r s t , development of a model to evaluate the impact of maintenance cost on the to ta l software budget of a data processing department. Af ter th is model is presented and explored the student works assigned problems to re inforce understanding of these concepts. Some problems explore fur ther the meaning of th is model. Others encourage the student to extend the model. Permission to copy without fee all or part o f this material is granted provided that the copies are not made or distributed for direct commercial advantage, the ACM copyright notice and the title of the publication and its date appear, and notice is given that copying is by permission of the Association for Computing Machinery. To copy otherwise, or to republish, requires a fee and/or specific permission. Â© 1985 A C M 0 8 9 7 9 1 1 5 2 0 / 8 5 / 0 0 3 / 0 2 3 3 $00 .75 The remainder of th~s paper is organized in to 3 parts: 1.) a der iva t ion o f re la t ions developed for the students, 2.) a descr ipt ion of some problems which are assigned to the students, and 3.) a discussion. Parts 1 and 2 w i l l be presented here as they are in the classroom set t ing. DERIVATION OF BASIC RELATIONSHIPS Maintenance Trap I t is legendary that the cost of maintenance is a substantial fraction of the total l i f e cycle cost of a system. That maintenance of software is an inevitable fact leads to an interesting result, v iz. , ultimately a data processing shop wi l l be led to a condition where maintenance is i ts only act iv i ty. ~Je investigate this phenomenon here. Call i t the Maintenance Trap. To get some quantitative concept of the impact this may have on system development, we wi l l develop a mathematical model bu i l t on the following assumptions: I. start with a data processing shop with no appTications 2. a fixed budget, B, is allocated to software development and maintenance 3. once a system is instal led i ts maintenance becomes mandatory 4. each year an application(s) is instal led whose development cost is equal to the budget dollars less the funds necessary for 3 5. the l i f e cycle of a l l systems is n years 6. the cost of software maintenance is evenly distributed over a system's n year l i f e cycle Let CAt be the software cost of development appTication i in the i th year. See assumption 4. Let CM1 be the l i f e cycle maintenance cost of application i .