This panel will examine and evaluate some notable current and recent software environment efforts from the perspective of this conferenceâ€”namely that environments should be viewed as vehicles for fostering the automation of software processes.
At this conference we are exploring the premise that software is a product whose creation and evolution can and should be carried out according to the dictates of systematic and orderly processes. Investigations such as software lifecycle modeling efforts have attempted to help us understand the nature of these processes by identifying major subactivities, subproducts and information flows. Work on software environments has, in the past, emphasized the integration of tools, but has all too often not addressed the issue of how these integrated tools support software processes. Fortunately there is an increasing realization that such process support is the goal of software environments, and more recent environments are addressing that goal more sharpl.
 In this panel we shall attempt to review some notable and influential tool integration and environment development efforts from this more contemporary perspective in an attempt to perceive current trends and directions more clearly and to more sharply identify the key contributions which this work has made. As an aid to setting this tone and perspective for the panel, we shall begin with a presentation by Nelson Weiderman, for the Software Engineering Institute, Carnegie-Mellon University, Pittsburgh, PA, USA. Dr. Weiderman will summarize a paper which he coauthored with A. N. Habermann, M.W. Borger and M.H. Klein in which they suggest that environments should be evaluated in precisely this way. Their paper details a flow of methodological steps for evaluation of toolsets and environments which stresses that such systems should be measured against a clear enunciation of the software activities which the tools and environments are purported to support. The paper goes on to describe how dynamic testing of subject toolsets should be organized to gain quantitative insights into the effectiveness of the subject systems in supporting the identified processes.
The significance of this evaluative approach is at least twofold. First it forces environment developers to recognize that the key result of their work is support of processes, and second it forces all of us as a community to realize that we must increasingly work to understand the set of activities which comprise software processes and software objects which comprise our products. These realizations will help lead us to the more effective environments of the coming decade.
 After Dr. Weiderman's opening presentation there will be six subsequent presentations of current and recent work. These presentations have been carefully selected to represent a variety of approaches to providing support for a variety of client communities in a variety of locations. Each presenter has been asked to consider the way in which his system supports a particular process or subactivities of a process; any architectural features which distinguish or characterize his system; how effective he believes his system has been in conveying support for the portion of the process which has been identified; and whether the architectural approach taken has or has not been particularly useful in helping to achieve the process support goals for the system.