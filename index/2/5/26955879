Take two or three upper case letters and glan them together with a "G" on the end, and, pres-to, you have the name for a new grammar formalism. Or, at least, so it must seem in a decade that has seen the arrival of COG, But the plethora of acronyms (and nonacronyms-PATR H), disguises much commonal-ity, shared properties which set them apart from the mainstream linguistic and computational linguistic activity of the 1970s. The key characteristics of the new grammar formalisms, characteristics exhibited by most of them, are (i) the availability, at least in principle and sometimes in practice, of a declarative semantics for the notation used, (ii) the use of a basically type 2 rule format (single mother, unordered, no explicit context sensitivity) under (iii) a node admissibility rather than a string rewriting interpretation, with (iv) a re-cursively defined tree or directed acyclic graph based category set, and (v) unification as the primary operation for combining syntactic information. It is primarily the shared properties, rather than the myriad differences of notation, that this survey focusses on, although some of the more interesting differences between them emerge from the historical account of cxnceptual links and antecedents. Declarative grammar formalisms were not in vogue in the 1970s. In linguistics, the dominant transformational tradition had essentially ceased to use any rule formalism at all in research work (though the textbooks of the period still provided expositions of the rule formalisms used in 1960s research). All that you will see in papers of the time is a widely used informal notation for structural descriptions and a taxonomy of syntactic constructions whose taxa have the names of the grammatical rules proposed by linguists in the 1960s-Raising , Gapping, Egui, Passive, and so on. In natural language processing (NIP), grammars and grammatical rules were equally hard to find. The augmented transition network (AIM) apparatus provided a paradigm for designing programs in which grammar, parser and, often, semantics were inextricably intertwined. Even PIDGIN is far closer to a procedural language for programming Marcus-parsers than it is to a declarative grammar formalism. The inspirations for the grammar formalisms of the 1980s are manifold. Within linguistics, many of those who had been profoundly impressed by the technical rigour and formal elegance of Montague's work on semantics began to react against the informal but still baroque character of mainstream 1970s work on syntax. In search of simplicity and precision, â€¦