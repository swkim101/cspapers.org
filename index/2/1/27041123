Caches are commonly employed to hide the latency gap between memory and the CPU by exploiting locality in memory accesses. On today’s architectures a cache miss may take several hundred CPU cycles. In order to fulfill stringent timing requirements, caches are now also used in hard real-time systems. In such systems, guarantees have to be made concerning the bestand worst-case execution times (BCET and WCET) of tasks. To obtain tight bounds on the execution times of a task, timing analyses must take into account the cache architecture. However, developing cache analyses – analyses that statically determine whether a memory access associated with an instruction will always be a hit or a miss – is a difficult problem. Precise and efficient analyses have been developed for set-associative caches that employ the least-recently-used (LRU) replacement policy. Other commonly used policies, like first-in-first-out (FIFO) or PseudoLRU (PLRU) have proven to be more difficult to analyze. Relative competitive analyses yield upper (lower) bounds on the number of misses (hits) of a policy P relative to the number of misses (hits) of another policy Q. For example, a competitive analysis may find out that policy P will incur at most 30% more misses than policy Q and at most 20% less hits in the execution of any task. Note that P and Q may have different associativities.