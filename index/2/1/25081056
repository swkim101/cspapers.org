The term software engineering currently ranks high on the list of today's popular buzz words. Yet we still don't agree on its definition and often overlook many pragmatics associated with its use. A software engineering community is emerging which is devoting a great deal of attention to various “systematic” programming methodologies and automated programming tools.
 Much of this problem stems from the difficulty of combining theoretically rich technology with an aesthetically unpleasant engineering philosophy. This engineering philosophy espouses doing what appears to be necessary to complete a large project. It is this last point which I would like to explore in the balance of this short paper.
 This paper will explore various pragmatic aspects of real world projects relating to “software engineering.” The subsequent panel discussion will serve as a forum for relating specific observations from typical project environments. Extrapolation of these observations to future projects will also be discussed.