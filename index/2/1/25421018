Types for the Language DesignerMichael Schwartzbach & Jens Palsberg, Aarhus University,Denmark>/p>
The type systems of object-oriented languages have specificgoals: they serve as partial documentation, they providemodularity, and they ensure safety and efficiency at run-time.There are many choices in the design of a type system, and it ishard to evaluate their tradeoffs. This tutorial teaches a coherenttheory of type systems for object-oriented languages that can beused for both explicit systems (where the programmer supplies typeannotations) and implicit systems (where the compiler must performtype inference), and forty systems based on interfaces, classes,and sets of classes.
The tutorial defines an idealized object-oriented language,inspired by Smalltalk, and develops several type systems for it.This uniform framework makes it easy to compare differentapproaches. The tutorial explores the limitations of static typechecking and shows how dynamic type checking can be introduced. Itdemonstrates how subclassing is different from subtyping, howspecification types differ from implementation types, and theinfluence of a type system on separate compilation.