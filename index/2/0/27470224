Execution-driven simulation is a new technique for the performance evaluation of computer systems. It uses the actual execution of a real program to drive a simulation model of the system architecture. The major advantages of this approach are that it offers accuracy close to that of instruction-level simulation but with much less overhead. Variations on the execution-driven simulation approach are presented in [Cov88] and Fuj851. This paper describes extensions to the executiondriven approach for the purpose of modeling multiprogrammed processors and interrupts, with priorities. The primary goal was to develop a method which allowed these features to be simulated as accurately as possible with as little additional overhead as possible. The extensions have been implemented in the Rice Parallel Processing Testbed (RPPT), a simulation environment for the study of parallel programs executing on parallel computers [Cov88]. The major characteristic of execution-driven simulation is that a real program is executed to drive a simulation model of a computer system. The assembly language code of an application program whose execution is to be simulated is analyzed by a preprocessor to determine its basic block structure. A basic block is a sequence of consecutive assembly language instruction that represent a single execution unit; that is, a basic block can only be entered at the first instruction in the block, and every instruction in the block is executed exactly once, in order. The basic block analyzer also computes estimates for the execution time of each basic block on a processor in the simulated system, and inserts instructions at the beginning of each basic block that cause a timing variable to be incremented by an amount equal to the estimated execution