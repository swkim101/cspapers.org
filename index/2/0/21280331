As computer science has matured and developed an increasingly independent identification from mathematics, so, too, have the students of computer science become less recognizably mathematics oriented. Thus it should not be surprising that the majority of computer science students today find the classic data structures problem of adding polynomials less than exciting. Add to that the increasing pragmatism of today’s students who would like to see a very dkect connection between what is being learned in class and a career, and it is suprising that they have not rebelled openly against spending so much time on an algorithm that they aren’t interested in and are unlikely to ever encounter outside of class. The addition of polynomials using linked lists has some very positive pedagogic aspects if we ignore the problem of interest level. It permits the student to appreciate the value of singly linked, linear lists and, subsequently, the value of circular lists. This stepwise introduction to an increasingly complex conceptual base for an algorithm with an obvious payoff in a simpler algorithm is indeed elegant. Yet the difficulty in motivating students to get excited about adding polynomials looms large. An alternative approach that involves an inherently more broadly interesting algorithm can overcome this problem. Increasingly elegant solutions to resolving collisions in hash searching provide not only an appreciation of both of these types of linked lists, but can also bridge the gap in students’ understanding of pointers versus array indices and give them the ability to switch from one to the other.