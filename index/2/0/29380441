In this panel, the moderator, who has expertise in computer science education and HCI, but with no ties to any particular blocks-based programming environment in particular, will provide a brief overview of the state of the field of visual programming for education generally, and blocks-based visual programming environments and the languages that go with them more specifically. As early as in 1986, blocks-based visual programming environments were conceived of and built as research studies (Glinert & Smith, 1986)). However, the last five to ten years have seen a proliferation of these kinds of programming languages. Scratch and Alice are probably the most widely known of these programming interfaces, but there are many. Among these, many share common traits: the goal of simplifying the syntax of programming, a related goal of making what were once difficult tasks relegated to arcane languages simpler, and often another related goal of opening computer programming up to a wider audience than has recently traditionally engaged in programming activities. The moderator will be followed by four panelists, representing four blocks-based programming environments that share these affordances, but which more interestingly, are distinct in a number of ways. These panelists, experts in MIT App Inventor, Scratch, Looking Glass, and ToolBlox, respectively, will each have ten minutes to discuss their respective language and the possibility-space it aims to simplify. Specifically, each language will be examined from three perspectives: the reason the tool was created, the target audience for the tool, and how the tool engages those users in computational thinking and learning to program. The moderator will then lead a substantive discussion with the audience and panel members on the material presented.