1. OVERVIEW Text search systems typically return lists of results while the corpus remains invisible in the background. How results relate to each other and to the corpus as a whole is not shown. Faceted search improves upon this by presenting categorised results in predefined facets. The distribution of results across categories is shown in order to guide query refinement through category selection. Faceted search systems may be text based [1] or use an interactive visualisation [4]. They show the relationship between results but not their relationship to the corpus as a whole. In this demonstration we present a new approach that combines faceted search with corpus landscapes, to reveal search result clusters and their distribution across a whole corpus. We demonstrate with a portion of a local file system. Our interface shows multiple landscapes, one for each facet, and a keyword search panel. A search starts by entering a term such as OLAP. A list of found files and facet landscapes decorated with file locations are shown. The facet landscapes are proportion tree views of the corpus where category width is proportional to the number of contained files and leaves represent buckets of files. The result locations are the leaf positions that have been highlighted with a magenta border. Location visibility can be enhanced by a distortion that increases width. A query is refined by selecting facet categories. Figure 1 shows our interface after 2006 and 2007 in the date facet were selected, restricting the other facets and the results list to this subset. Additional category selections in the date and other facets would further refine this. Our prototype uses the open source search engine lucene to create a word index and an OLAP data preparation tool MakeSGF to create a facet index. MakeSGF loads a scan of a file system and combines it with derived and predefined facet hierarchies to generate a sparse data-cube. It also generates the cell to file mapping needed for coordination of the SGViewer tool and result list. SGViewer started as a sitemap [2], but was extended to support querying over hierarchical multi-dimensional data [3]. Files with the same facet values are aggregated into one datacube cell. This improves scalability but can decrease the resolution of the facet landscapes. If our system was split into a client and server, such decreased resolution can be an advantage for applications that need to limit disclosure of detail.