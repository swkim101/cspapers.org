In Active Database Systems the problem of infinite rule processing may occur. Analysis methods provide an identification of rule sets which canbe guaranteed to terminate or which may lead to an infinite rule processing. We propose Petri nets as the base for a compile-time rule analysis. Pelri nets provide a promising formalism to model and analyse the behaviour of roles and the interactions between them very precisely. Not only rule semantif.8 conb'idered by tmmlnation analysis techniques presented in the literalme can easily be modelled but also other parts of the role model as, e.g., complex events. Thus we are able to enhance the results of the t~'minalion analysis methods known to us. In this paper we focus on the analysis of the Petri nets. do not consider complex events and do not allow that at a point in time rules may be triggered more man once and may be executed as often as being triggered. For the detection of complex events Petri nets or higher level Petri nets like Coloured Peui nets have been shown to be suitable [Gat94, ZMU95]. Petri nets are used to model possible rule execution traces which are analysed for termination. The information about the interactious between the rules may be token directly from the rule definitions or fi'om the results of other rulc teyminRtiOll analysis techniques, as e.g. [BW94, VS94]. As the Petri nets can be generated antomatic~lly there will be no additional specification overhead for the rule programmer (for further devils see [ZMU96]). 1 I n t r o d u c t i o n The ECA-Rules (Event-Condition-Action-Rules) used in Active Database Systems to provide reactive behaviour may be subject to an ipfinite mutual triggering. Rule termination analysis methods provide an identification of role sets which C~! be guaranteed to terminAm or which may lead to an infinite rulc processing. In general it is undecidable to determine in advance whether an infinite mutual triggering of rules will occur. Thai, fore one main 80111 of the developm(mt of new analysis methods is to enhance the preciseness of the results of existing t__m'hniques. This goal ~ be reacJcied by considering more information about the rule semantics and the intmaction between the _defined rules. It turned out (see [ZMU95, ZMU96]) that Petri nets provide an ~ formnlism to specify and mmlyse a lot of information about rule bchaviour which go far beyond the semantics considered by terminntion analysis techniques known to us. As an e~ample existing an~Zysis Lerhniques * Cooperative Computing & Communication Laboratory (Siemens Nixdoff Information~ysteme AG. Universitlit-GH Padezbcgn) Pmni.uion to make &gital/luu'd copia of aJl or lUU.t oflhi.s malerial for pcmmal ¢¢ ~ me is ffdmted without fee provided that the copies are not made or dimn'bolal for pcoflt or cmmna.Aal advamage, the cepy. right notice. Ihe title el'the publication and ~ dale appear, and notice ii givon Ilud copyright is by pcrmmion of the ACM, Inc. To colD, olha.wise , to repebli~h, to pint on m-yes or to redimib,te to lira. requires q~x-ific Immiadm and/or fee DART '96RockW//eMD. USA Copyrighl 1997 ACM 0-89791-948-3/96/I I ..$3.50 2 B a s i c D e f i n i t i o n s In this section we introduce a simgle model of an active d~tJhase, for which we will present our tel'minmion al3alysis. This model can be extended in several directions without loosing the applicability of our analysis technique. Definition 1: An Active Database (ADB) is a pair <DB,R>, where DB is the (Passive) Database and R := {rl, .., rn} is a Priorltized Rune Set. A total order >p on R defines the rule priorities. If r+ >e rj we say that r~ has higher priority than rj . The DB is a coliection of data being accessed by operations of a data manipulation language (DML), which supports general operations like reading and updating dam The DB-state is the collection of the values of all the dam at the considered point in time. Defluntion 2: A Rune (ECA-Rune) is a triple of components, where the Event part (E) specifies the Iriggering event (dcIlOtCd 8.9 el), the Cotidition part (C) is a plDdicate on the current DB-state, which is validated when the triggering events occurs and the Action part(A) is a sequence of DMLoperations, which are executed when the condition is satisfied. We distinguish between primitive and complex events: Definition 3: A Primitive Event corresponds to the execution of a DML-operalJon. Complex Events are build from simpler ones by rn~m~ of operators of an Event Algebra.