This paper proposes a new parallelization of the Primal and Dual Simplex algorithms for Linear Programming (LP) problems on massively parallel Single-Instruction Multiple-Data (SIMD) computers. The algorithms are based on the Steepest-Edge pivot selection method and the tableau representation of the constraint matrix. The initial canonical tableau is formed on an attached scalar host unit, and then partitioned into a rectangular grid of sub-matrices and distributed to the individual Processor Element (PE) memories. In the beginning of the parallel algorithm key portions of the simplex tableau are partially replicated and stored along with the sub-matrices on each one of the PEs. The SIMD simplex algorithm iteratively selects a pivot element and carries-out a simplex computation step until the optimal solution is found, or when unboundedness of the LP is established. The Steepest-Edge pivot selection technique utilizes information mainly from local replicas to search for the next pivot element. The pivot row and column are selectively broadcasted to the PEs before a pivot computation step, by efficiently utilizing the geometry of the toroidal mesh interconnection network. Every individual PE maintains locally and keeps consistent its replicas so that inter-processor communication due to data dependencies is further reduced. The presence of a pipelined inteconnection network, like the mesh network of MP-1 and MP-2 MasPar models allows the global reduction operations necessary in the selection of pivot columns and rows to be performed in time $O(\log n_R + \log n_C)$, in $(n_R \times n_C)$ PE arrays. This particular combination of pivot selection, matrix representation, and selective data replication is shown to be highly efficient in the solution of linear programming problems on SIMD computers. The proposed parallelization has optimal asymptotic speedup and scalability properties. Performance comparisons show that as the problem sizes increase the speed-ups obtained by MasPar''s MP-1 and MP-2 models are in the order of 100 times, and 1000 times, respectively, over sequential versions of the Steepest-Edge Simplex algorithm running on high-end Unix workstations.