We describe the challenges of software analysis by presenting a series of dichotomies. Each gives a spectrum on which any particular analysis can be placed; together, they give some structure to the space of possible analyses. Our intent is not, however, to provide a survey of existing analyses within this space, but to argue that some regions are more likely to be important in the future than others. Recognizing that our opinions do not represent the consensus of the community, we have tried, for each dichotomy, to make a case for both extremes (or at least identifying the contexts in which one makes more sense) while arguing primarily for one over the other. We argue that in the future analyses will be model-driven, namely centered on abstract models of behaviour; modular and incremental, to enable analysis "of components, and of systems before completion; and focused and partial, rather than uniform, paying closer attention to properties that matter most and to the parts of the software that affect those properties. In support of such analyses, we expect modelling languages to be global, with a focus on structural relationships across the system, and declarative, and we expect the analyses themselves to make more use of induction than has been fashionable recently. Finally, although we believe that unsound analyses have a bright future, we expect the increasing importance of infrastructural software to bring a renewed credibility to sound, precise and resource-intensive analyses.