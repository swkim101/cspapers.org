We study the problem of sorting <i>n</i> integers of <i>w</i> bits on a unit-cost RAM with word size <i>w,</i> and in particular consider the time-space trade-off (product of time and space in bits) for this problem. For comparison-based algorithms, the time-space complexity is known to be Θ(<i>n</i><sup>2</sup>). A result of Beame shows that the lower bound also holds for non-comparison-based algorithms, but no algorithm has met this for time below the comparison-based Ω(<i>n</i>lg<i>n</i>) lower bound.We show that if sorting within some time bound <i>&Ttilde;</i> is possible, then time <i>T</i> = <i>O</i>(<i>&Ttilde;</i> + <i>n</i>lg* <i>n</i>) can be achieved with high probability using space <i>S</i> = <i>O</i>(<i>n</i><sup>2</sup>/<i>T</i> + <i>w</i>), which is optimal. Given a deterministic priority queue using amortized time <i>t</i>(<i>n</i>) per operation and space <i>n</i><sup><i>O</i>(1)</sup>, we provide a deterministic algorithm sorting in time <i>T</i> = <i>O</i>(<i>n</i>(<i>t</i>(<i>n</i>) + lg* <i>n</i>)) with <i>S</i> = <i>O</i>(<i>n</i><sup>2</sup>/<i>T</i> + <i>w</i>). Both results require that <i>w</i> ≤ <i>n</i><sup>1-Ω(1)</sup>. Using existing priority queues and sorting algorithms, this implies that we can deterministically sort time-space optimally in time Θ(<i>T</i>) for <i>T</i> ≥ <i>n</i>(lg lg <i>n</i>)<sup>2</sup>, and with high probability for <i>T</i> ≥ <i>n</i>lg lg <i>n.</i>Our results imply that recent space lower bounds for deciding element distinctness in <i>o</i>(<i>n</i>lg<i>n</i>) time are nearly tight.