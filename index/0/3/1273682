The statement <italic>S</italic>≤<italic>T</italic> in a λ-calculus with subtyping is traditionally interpreted by a semantic coercion function of type [[<italic>S</italic>]]→[[<italic>T</italic>]] that extracts the “<italic>T</italic> part” of an element of <italic>S</italic>. If the subtyping relation is restricted to covariant positions, this interpretation may be enriched to include both the implicit coercion and an overwriting function <italic>put</italic>[<italic>S,T</italic>] <inline-equation> <f>∈</f> <?pub Caret> </inline-equation> [[<italic>S</italic>]]→[[<italic>T</italic>]]→[[<italic>S</italic>]] that updates the <italic>T</italic> part of an element of <italic>S</italic>. We give a realizability model and a sound equational theory  for a second-order calculus of positive subtyping.
Though weaker than familiar calculi of bounded quantification, positive subtyping retains sufficient power to model objects, encapsulation, and message passing. Moreover, inheritance may be implemented very straightforwardly in this setting, using the <italic>put</italic> functions arising from ordinary subtyping of records in place of the sophisticated systems of record extension and update often used for this purpose. The equational laws relating the behavior of coercions and <italic>put</italic> functions can be used to prove simple properties of the resulting classes in such a way that proofs for superclasses are “inherited” by subclasses.