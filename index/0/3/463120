From the point of view of sequential polynomial time computation, the answer to the question in the title is 'yes'. The process of self-reducibility is a linear time Turing (oracle) reduction from a given combinatorial search problem to an appropriately defined decision problem.
However, from the point of view of fast parallel computation, the answer is not so clear. Many of the sequential algorithms that were 'marked off' as being “inherently sequential” embed within them the self-reducibility process. Can this inherently sequential process be parallelized?
To study this problem, we define an abstract setting (namely that of an independence system) in which one, universal search problem captures all combinatorial search problems. We consider several natural decision and function oracles to which this search problem may be reduced.
On the positive side, we give efficient probabilistic parallel reductions to these oracles. These reductions constitute a scheme for parallelizing search problems in case the oracles for these problems are themselves efficiently computable in parallel. We give examples of problems that did not yield to parallelism before, but can be parallelized using this scheme.
On the negative side, we prove lower bounds on any determininistic parallel reductions to the same oracles. If p processors are used, the sequential (linear) running time cannot be enhanced by more than a factor of &Ogr;(log p) and hence for any polynomial number of processors the problem remains inherently sequential. This proves that randomization can be exponentially more powerful than determinism in our model, and suggests that NC ≠ Random NC.
Finally, we state some intriguing conjectures and suggest new directions of research in complexity theory that arise from this work.