We call language <italic>L</italic><subscrpt>1</subscrpt> <italic>intensionally more expressive</italic> than <italic>L</italic><subscrpt>2</subscrpt> if there are functions which can be computed faster in <italic>L</italic><subscrpt>1</subscrpt> than in <italic>L</italic><subscrpt>2</subscrpt>. We study the intensional expressiveness of several languages: the Berry-Curien programming language of sequential algorithms, CDS0, a deterministic parallel extension to it, named CDSP, and various parallel extensions to the functional programming language PCF. The paper consists of two parts.
In the first part, we show that CDS0 can compute the minimum of two numbers <italic>n</italic> and <italic>p</italic> in unary representation in time <italic>O(min(n,p))</italic>. However, it  cannot compute a “natural” version of this function. CDSP allows us to compute this function, as well as functions like parallel-or. This work can be seen as an extension of the work of Colson with primitive recursive algorithms to the setting of sequential algorithms.
In the second part, we show that deterministic parallelism adds intensional expressiveness, settling a “folk” conjecture from the literature in the negative. We show that CDSP is more expressive intensionally than CDS0. We also study three parallel extensions to PCF: parallel-or (<italic>por</italic>) and parallel conditionals on booleans (<italic>pif</italic><subscrpt>&ogr;</subscrpt>) and integers (<italic>pif</italic><subscrpt>&igr;</subscrpt>). The situation is more complicated there:  <italic>pif</italic><subscrpt>&igr;</subscrpt> is still more expressive than both <italic>pif</italic><subscrpt>&ogr;</subscrpt> and <italic>por</italic>. However, <italic>pif</italic><subscrpt>&igr;</subscrpt> still is not as expressive as the deterministic query construct of CDSP. Thus, we identify a hierarchy of intensional expressiveness for deterministic parallelism.