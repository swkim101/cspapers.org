Let G = (V, E) be a weighted undirected graph. A path between u, v {element_of} V is said to be of stretch t if its length is at most t times the distance between u and v in the graph. We consider the problem of finding small-stretch paths between all pairs of vertices in the graph G. It is easy to see that finding paths of stretch less than 2 between all pairs of vertices in an undirected graph with n vertices is at least as hard as the Boolean multiplication of two n x n matrices. We describe three algorithms for finding small-stretch paths between all pairs of vertices in a weighted graph with n vertices and m edges. The first algorithm, STRETCH{sub 2}, runs in O(n{sup 3}/{sup 2}m{sup {1/2}}) time and finds stretch 2 paths. The second algorithm, STRETCH{sub 7/3}, runs in O(n{sup 7/3}) time and finds stretch 7/3 paths. Finally, the third algorithm, STRETCH{sub 3}, runs in O(n{sup 2}) and finds stretch 3 paths. Our algorithms are simpler, more efficient and more accurate than the previously best algorithms for finding small-stretch paths. Unlike all previous algorithms, our algorithms are not based on the construction of sparsemore » spanners or sparse neighborhood covers.« less