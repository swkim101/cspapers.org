Although most research in the area of concurrent language design has been motivated by the desire to improve performance by exploiting multiprocessors, we believe that concurrency is a useful programming paradigm for certain application domains. For example, interactive systems often have a naturally concurrent structure [CP85, RG86, Pik89, Haa90] . Another example is distributed systems: most systems for distributed programming provide multi-threading at the node level (e.g., Isis[BCJ 90] and Argus[LCJS87]). Sequential programs in these application domains often must use complex and artificial control structures to schedule and interleave activities (e.g., event-loops in graphics libraries). They are, in effect, simulating concurrency. These application domains need a high-level concurrent languagethat provides both efficient sequential execution and efficient concurrent execution: CML satisfies this need.