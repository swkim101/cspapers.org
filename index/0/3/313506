A classical algorithm for finding a minimum-cost circulation consists of repeatedly finding a residual cycle of negative cost and <italic>canceling</italic> it by pushing enough flow around the cycle to saturate an arc. We show that a judicious choice of cycles for canceling leads to a polynomial bound on the number of iterations in this algorithm. This gives a very simple strongly polynomial algorithm that uses no scaling. A variant of the algorithm that uses dynamic trees runs in <italic>O</italic>(<italic>nm</italic>(log <italic>n</italic>) min{log(<italic>nC</italic>), <italic>m</italic>log <italic>n</italic>}) time on a network of <italic>n</italic> vertices, <italic>m</italic> arcs, and arc costs of maximum absolute value <italic>C</italic>. This bound is comparable to those of the fastest previously known algorithms.