Modern compilers perform ambitious optimization analysis and transformations to produce target code that is time and space efficient. Current techniques to debug optimized programs place restrictions on either the application of optimization or the types of debugging capabilities provided. Even with the restrictions, the debugging techniques often have to report the existence of noncurrent values. Ideally, we would like to have no restrictions on the debugging capabilities and optimization, and at the same time, respond to all debugging requests as expected, where expected responses during execution of an optimized program are the same as the responses for an unoptimized version of the same program. However, this is not possible, given the interferences between the optimization and debugging.