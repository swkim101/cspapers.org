Objeet-oriented design methods describe a software system primarily from two perspectives: object structure and dynamic behavior [1, 2, 3]. While the former seems intuitive because it is based on concepts derived from the real world problem, tie latter often introduces confhsion for students. An object-oriented system is described as a collection of interacting objects. Each object’s behavior is specified separately through a state transition diagram. The overall system’s behavior is captured through a set of scenarios, In a sense, a scenario is a sequence of events that occurs during a specific use of the system, including stimuli to or from the user or external devices, and interactions between objeets. Scenarios are useful for elaborating and validating requirements, investigating some behavioral properties, as well as evaluating completeness and internal consistency [1, 4]. However, there is no adequate support for use of scenarios in teaching object-oriented design. A scenario description may show object-to-object interactions either in a graphical form or in a textual forq but, answers to “why”, “how”, and “what if” questions, that arise while students are learning a new technique, are not readily available. Moreover, it is not without difficulty for students to extract scenarios from separate state transition diagrams. The lack of tracing capability hinders them from forming a “big picture” about objectoriented systems. To overcome these difficulties, we used rule-based expert systems as an instructional tool. An expert system can be constmeted to simulate and reason about the dynamic behavior of an object-oriented system specified