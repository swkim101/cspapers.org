A hybrid algorithm is a collection of <i>heuristics</i>, paired with a polynomial time <i>selector S</i> that runs on the input to decide which heuristic should be executed to solve the problem. Hybrid algorithms are of particular interest in scenarios where the selector must decide between heuristics that are "good" with respect to different complexity measures.We focus on hybrid algorithms with a "hardness-defying" property: for a problem II, there is a set of complexity measures {<i>m</i><inf><i>i</i></inf>} whereby II is known or conjectured to be unsolvable for each <i>m</i><inf><i>i</i></inf>, but for each heuristic <i>h</i><inf><i>i</i></inf> of the hybrid algorithm, one can give a complexity guarantee for <i>h</i><inf><i>i</i></inf> <i>on the instances of</i> II <i>that S selects for h<inf>i</inf></i> that is <i>strictly better</i> than <i>m</i><inf><i>i</i></inf>. More concretely, we show that for several NP-hard problems, a given instance can either be solved exactly with substantially improved runtime (<i>e.g.</i> 2<sup><i>o</i></sup><sup>(<i>n</i>)</sup>), or be approximated in polynomial time with an approximation ratio exceeding that of the known or conjectured inapproximability of the problem, assuming P â‰  NP.