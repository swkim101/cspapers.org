We have developed a Java-Based Distributed Object System, JDOP, to solve the problem of distributing, managing, and interconnecting a set of independent worker objects, which comprise a distributed computation. A JDOP client is aware of the objects required to solve the computation and provides them as well as the necessary data to a JDOP Master Server. The JDOP distribution system is charged with receiving client requests, storing pertinent client information, distributing the objects to the JDOP distributed object execution subsystem, and finally receiving and forwarding the results back to the client. The JDOP system can handle distributed computations similarly to PVM or the MPI standard [10,11]. However it has features, which give our system advantages. First, the system is completely Javabased, which makes it simple to distribute the computation anywhere a Java Virtual Machine (JVM) resides [7,13]. Second the computation is distributed across a dynamic set of nodes without affecting the client. Third, the protocol for JDOP computation is simple for the client, thus making the coding for client programs simple. Lastly, and most importantly, the system is completely client-oriented. The client does not need to access pre-registered services as exist in Java RMI, CORBA, or typical naming services [1,7,13,14].