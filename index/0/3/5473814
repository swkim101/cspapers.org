Introduction MOCHA1 is a novel database middleware system designed to interconnect data sources distributed over a wide area network. MOCHA is built around the notion that the middleware for a large-scale distributed environment should be selfextensible. This means that new application-specific data types and query operators needed for query processing are deployed to remote sites in automatic fashion by the middleware system itself. In MOCHA, this is realized by shipping Java classes implementing these types or operators to the remote sites, where they can be used to manipulate the data of interest. All these Java classes are first stored in one or more code repositories from which MOCHA later retrieves and deploys them on a “need-to-do” basis. A major goal behind this idea of automatic code deployment is to fulfill the need for application-specific processing components at remote sites that do not provide them. MOCHA capitalizes on its ability to automatically deploy code to provide an efficient query processing service. By shipping code for query operators, MOCHA can produce efficient plans that place the execution of powerful data-reducing operators (filters) on the data sources. Examples of such operators are aggregates, predicates and data mining operators, which return a much smaller abstraction of the original data. In contrast, datainflating operators that produce results larger that their arguments are evaluated near the client. Since in many cases, the code being shipped is smaller than the data sets, automatic code deployment facilitates query optimization based on data movement reduction, which can greatly reduce query execution time. The architecture for MOCHA consists of four major components: Client Application an applet, servlet or Java ap-