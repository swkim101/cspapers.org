Many modern database appllcatlons must preserve a record of the past over and above the current state of an application environment. For these applications, the concept of time is of central importance. Databases that model these applications cannot be based on the concept of state alone but must replace it by the concept of history as a function from a temporal domain to some value set. Such databases will be referred to as information preserving databases. The paper explores the consequences of the hlstory concept mainly from a database design point of viev. Firstly, the entity-relationship model is extended to include histories. Secondly and this is the central topic the paper introduces for it a framevork for inferring states of the past that have not explicitly been stored in the database. The framevork is based on the notlon of uncertainty, and uses procedural means and ground rules for limiting uncertainty to a fev veil-defined situations. Thirdly, the paper reviews the update semantics vhlch become slightly more complex than in traditional databases. An extensive example illustrates the various concepts developed in the paper. The classical database is a model of some real vorld system. At all times the contents of a database are -intended to represent a snapshot of the state of application environment IHM 813 i!ch a database can best be characteri: zed by the effect of its update operation: values In the database are replr ted by nev values. Furthermore, in answering a query the database management system (DBMS) makes an assumption of synchronism: the time difference betveen a change in the real vorld and the corresponding change in the database is so small as to be insignificant to the application. Jn other vords, queries refer to the present state of the real vorld.