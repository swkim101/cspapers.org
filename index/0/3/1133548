In many kinds of emnputatiomd contexts, modifications of the input data are to be processed at once so as to have immediate effect on the output. Because small changes in the input to a computation often cause only small changes in the outpu~ the challenge is to compute the new output incrementally by updating parts of the old outpu~ rather than by recomputing the entire output from scratch (as a “batch computation”). Put another way, the goal is to make use of the solution to one problem instance to find the solution to a “nearby” problem irtstanee. The abstract ~oblem of incremental computation can be phrased as follows: The goal is to compute a function ~ on the user’s “input” data x—where x is often some data structure, such as a tree, graph, or matrix-and to keep the output ~ (x) updated as the input undergoes changes. An incremental algorithm for computing ~ takes as input the “batch input” x, the “batch output” ~ (x), possibly some auxiliary information, and the change in the “batch input” Ax. The algorithm computes the new “batch output” ~ (x + Ax), where x + Ax denotes the modified input, and updates the auxiliary information as necessary. F~om the s~dpoint of the progr amming-languages emnrmmity, interest in incremental computation stems horn the following four resesrch topics: