This paper studies the long-standing open question of whether optimal alphabetic binary trees can be constructed in o(nlgn) time. We show that a class of techniques for finding optimal alphabetic trees which includes all current methods yielding O(nlg n) time algorithms are at least as hard as sorting in whatever model of computation is used. We also give O(n) time algorithms for the case where all the input weights are within a constant factor of one another and when they are exponentially separated.