Filters are a common data-manipulation abstraction in networking, operating systems, and simulation software. Filters read data from a single source and write data to a single destination. In filter applications, data flows from a source to a sink through intermediate filters. Logically, filters are separate, modular entities. Modular implementations unfortunately suffer a substantial performance penalty relative to integrated implementations. Where performance matters most, systems programmers will sacrifice the modular design for the greater speed of an integrated design. We present a new compiler optimization, Filter Fusion, that eliminates the overhead of a modular design of independent filters. Our algorithm automates the integration of arbitrary, independently designed filters. FFC, our Filter Fusion compiler, composes filters and produces code that is as efficient as handintegrated code. The optimized code can achieve up to a t we-fold improvement over independent filters. Network protocol layers are often filters. Typically, each protocol layer performs some data manipulation by traversing the message from beginning to end. Programmers have traditionally merged these filters by hand to produce efficient code. Integrating filters allows data to be read once, manipulated many times, and then stored once, thus avoiding loads and stores for each filterâ€™s manipulations. Excessive memory ac-