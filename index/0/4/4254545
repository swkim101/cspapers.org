Arne Andersson* Ola Petersson+ An indexed list supports the following operations on a list: Insert/delete at a specified location; return the position of a specified element; and return the element at a specified position. In the first three operations, a reference to the update/query location is provided, and so no searches are needed. By the position of an element we mean the number of elements preceding it in the list plus one. The order in which the elements appear in the list is completely determined by where the insertions take place; we do not require the presence of any keys that induce the ordering. Dietz [4] gave a data structure for indexed lists supporting all operations in O(log n/ log log n) amortized time, which is optimal due to a lower bound of Fredman and Saks [9]. In this paper we consider approtimate indexed lists, which support the same updates as indexed lists, while the answers to queries approximate the exact answers. We show that a tiny relaxation in precision helps considerably in improving the time complexity. Our new data structure has two interesting applications: in list labeling and in subset rank; both of which are discussed in detail below. We consider approximate list indexing, and show that a tiny relaxation in precision of the query operations allows a considerable improvement in time complexity. The new data structure has applications in two other problems; namely, list labeling and subset rank. 2 Our results Let E be any non-increasing positive function on n, the number of elements currently in the list. c-approximate indexed lists support the following queries: