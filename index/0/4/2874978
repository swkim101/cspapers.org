A fundamental trade off exists within distributed batch computing systems between the number of participants (both users and resources) in each system and the security of the system. An increase in the number of participants can result in increased utilization of existing resources; however, as the number of participants grows, so does the amount of risk involved in participating in the system. Distributed batch computing systems are often organized into groups: We term a group of users and resources managed by a single entity an administrative domain. Trust within a domain is high; as the number of interoperating administrative domains increases, the level of trust between any two domains is likely to decline, reducing the trust each participant has in the system as a whole. There is a need for a security framework to restore trust in the system as a whole so that the benefits of increased participation and utilization can be realized. In order to make the multiple administrative domain environment more palatable to participants, we have taken the approach that the security mechanisms in a distributed batch computing infrastructure should be consistent with the principle of least privilege. We summarize the design of a framework intended to reduce the number and scope of assumptions that must be made about the security of a distributed batch computing infrastructure. The framework includes mechanisms that permit the ability to verify task and data integrity, protect data confidentiality, restrict the use of delegated credentials to task-specific, user specified actions. These mechanisms are integrated by including authorization policy regarding task and credential usage in task metadata, applying signatures to task metadata, and integrating these signatures into delegated credentials. User specified authorization policy determines where the task can move within the system and how the delegated credentials can be used. This policy is enforced symmetrically, whenever processes in the task pathway communicate. The result protects user data, limits the exposure of compute elements to attack, and increases