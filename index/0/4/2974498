Complex software systems are seldom designed from scratch; rather they are often designed by assembling basic components. Software tools are not an exception: They are often obtained by assembling simple tools that provide basic functionality. From the verification viewpoint, basic tools do not differ from components: in both cases they can be seen as black box elements that provide a set of services for the embedding system or tool. Complex systems and tools are often provided in many different versions and configurations that are obtained by adding and replacing various components. Let us consider for example a complex CASE tool that runs on several platforms and is distributed in various versions for different user profiles. Many graphics and system components may be used for distinct platforms. For instance, the simple configurations distributed free-of-charge may include only a simple set of basic tools, while the educational and the professional editions may include a wider set of basic tools that provide extended functionality. Unfortunately, behavioral differences among components may cause subtile failures difficult to reveal and remove. On of the main goals of verification is to check the completeness and compatibility of the services provided by the components to reveal possible conflicts, thus supporting efficient verification of different tool configurations and versions.