A random sampling function <i>Sample</i>: <i>U</i> → {0, 1} for a key universe <i>U</i> is a <i>distinguisher with probability</i>. If for any given assignment of values <i>v</i> (<i>x</i>) to the keys <i>x</i> ∈ <i>U</i>, including at least one non-zero <i>v</i> (<i>x</i>) ≠ 0, the sampled sum Σ{<i>v</i>(<i>x</i>) | <i>x</i> ∈ <i>U</i> ∧ <i>Sample</i>(<i>x</i>) = 1} is non-zero with probability at least α. Here the key values may come from any commutative monoid (addition is commutative and associative and zero is neutral). Such distinguishers were introduced by Vazirani [PhD thesis 1986], and Naor and Naor used them for their small bias probability spaces [STOC'90]. Constant probability distinguishers are used for testing in contexts where the key values are not computed directly, yet where the sum is easily computed. A simple example is when we get a stream of key value pairs (<i>x</i><sub>1</sub>, <i>v</i><sub>1</sub>), (<i>x</i><sub>2</sub>, <i>v</i><sub>2</sub>), ..., (<i>x</i><sub><i>n</i></sub>, <i>v</i><sub><i>n</i></sub>) where the same key may appear many times. The accumulated value of key <i>x</i> is <i>v</i>(<i>x</i>) = Σ{<i>v</i><sub>1</sub> | <i>x</i><sub><i>i</i></sub> = <i>x</i>}. For space reasons, we may not be able to maintain <i>x</i>(<i>x</i>) for every key <i>x</i>, but the sampled sum is easily maintained as the single value Σ{<i>v</i><sub><i>i</i></sub> | <i>Sample</i>(<i>x</i><sub><i>i</i></sub>) = 1}. Here we show that when dealing with <i>w</i>-bit integers, if <i>a</i> is a uniform odd <i>w</i>-bit integer and <i>t</i> is a uniform <i>w</i>-bit integer, then <i>Sample</i>(<i>x</i>) = [<i>ax</i> mod 2<sup><i>w</i></sup> ≤ <i>t</i>] is a distinguisher with probability 1/8. Working with standard units, that is <i>w</i> = 8,16,32,64, we exploit that <i>w</i>-bit multiplication works modulo 2<sup><i>w</i></sup>, discarding overflow automatically, and then the sampling decision is implemented by the C-code a*x<;=t. Previous such samplers were much less computer-friendly, e.g. The distinguisher of Naor and Naor [STOC'90] was more complicated and involved a 7-independent hash function.