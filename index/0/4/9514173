In the strip packing problem we are given a set of rectangular items that we want to place in a strip of given width such that we minimize the height of the obtained packing. It is a very classical two-dimensional packing problem that has received a lot of attention and it has applications in many settings such as stock-cutting and scheduling. A straight-forward reduction from P artition shows that the problem cannot be approximated with a better absolute factor than 3/2. However, this reduction requires the numeric values to be exponentially large. In this paper, we present a (1.4 + e)-approximation algorithm with pseudo-polynomial running time. This implies that for polynomially bounded input data the problem can be approximated with a strictly better ratio than for exponential input which is a very rare phenomenon in combinatorial optimization. Our algorithm is based on a structural lemma proving that there is a packing of height (1.4 + e)OPT that allows a partition of the packing area into few rectangular boxes. These boxes have the property that they decouple the packing decisions for the items that are thin and high, wide and narrow, or large in both dimensions. The interaction of these item types is typically a major problem when designing algorithms and our partition completely solves this. Particularly difficult are items that are thin and high since a single one of them can increase the optimal packing height significantly if placed wrongly and there can be up to Î©(n) of them. For those items the box partition is even fine grained enough so that all items in a box have essentially the same height. This reduces the usually difficult packing decisions for these items to a problem that can be solved easily via a pseudo-polynomial time dynamic program. The mentioned reduction from P artition also breaks down if we allow to drop a constant number of input items (while the compared optimal solution cannot do this). We show that then we can approximate the problem much better and present a polynomial time algorithm computing a packing of height at most (1 + e)OPT that needs to drop at most Oe(1) items.