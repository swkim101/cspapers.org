In this paper, we address the problem of automatically transforming <italic>arbitrary</italic> programs written for an ideal parallel machine to run on a <italic>completely asynchronous</italic> machine. We present a <italic>transformation</italic> which can be applied to an ideal program such that the resulting program's execution on an asynchronous machine is work and space efficient, relative to the ideal program from which it is derived. Above all, the transformation will guarantee that the ideal program will execute in a <italic>continually progressive</italic> manner on the asynchronous machine; these instructions <italic>are not universal</italic>. Furthermore, the individual processors can get delayed for arbitrary amounts of time while executing any instruction. In contrast,  previous work relied either on the asynchronous machine having universal <italic>read-modify-write</italic> instructions as primitives, or on limited asynchrony by restricting the relative speeds of the processors.