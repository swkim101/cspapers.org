We show that <italic>n</italic> integers in the range 1..<italic>n</italic> can be stably sorted on an EREW PRAM using <italic>O</italic>((log <italic>n</italic>)<supscrpt>1/2</supscrpt>) time, <italic>O</italic>(<italic>n</italic>(log <italic>n</italic>)<supscrpt>1/2</supscrpt>(log log <italic>n</italic>)<supscrpt>1/2</supscrpt>) operations and <italic>O</italic>(<italic>n</italic>) space. In addition, we are able to stably sort <italic>n</italic> integers in the range 1..<italic>n</italic> on a deterministic CREW PRAM in <italic>O</italic>((log <italic>n</italic>)<supscrpt>3/2</supscrpt>) time with <italic>O</italic>(<italic>n</italic>(log <italic>n</italic>)<supscrpt>1/2</supscrpt>) operations and <italic>O</italic>(<italic>n</italic>) space and to stably sort <italic>n</italic>  arbitrary integers on a randomized CREW PRAM within the same complexity bounds with high probability. In each case our algorithm is closer to optimality than all previous algorithms for the stated problem in the stated model, and our third result matches the operation count of the best known sequential algorithm. We also show that <italic>m</italic> integers in the range 1..<italic>m</italic> can be sorted in <italic>O</italic>((log <italic>n</italic>)<supscrpt>2</supscrpt>) time with <italic>O</italic>(<italic>n</italic>) operations on an EREW PRAM using a nonstandard word length of <italic>O</italic>(log <italic>n</italic> log log <italic>n</italic> log <italic>m</italic>) bits, thereby greatly improving the upper bound on the word length necessary to sort integers with a linear  time-processor product, even sequentially. Our algorithms were inspired by, and in one case directly use, the fusion trees recently introduced by Fredman and Willard.