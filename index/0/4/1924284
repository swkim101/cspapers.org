In the past the non-programmer who wanted the information contained in a computer database had to employ an expert programmer knowledgeable in the language and structure of the database. Now languages are being developed that are designed to be used by an infrequent or “casual” user who has limited knowledge of how the data is stored or retrieved by the computer. These special purpose query languages which allow these casual users to retrieve information from computer databases are commonly referred to as “nonprocedural” (Leavenworth and Sammet, 1974) because users need only describe the data to be retrieved, not how it is to be retrieved. These languages can be classified into two basic types which are characterized by the level of constraint imposed on the syntax and vocabulary of the language (Ehrenreich, 1981). Formal query languages have a very constrained syntax and vocabulary, while natural query languages have a relatively unconstrained syntax and vocabulary.
 If we consider the level of constraint that can be imposed on a query language as a continuum, then formal and natural query languages represent the two ends of this continuum. There has been considerable debate over the issue of which end of this continuum best meets the needs of the casual database user (e.g. Hill, 1972; Petrick, 1976; Shneiderman, 1980). Proponents of formal languages contend that these users benefit from learning a constrained language which teaches a concise and unambiguous way of communicating with the computer. Proponents of natural languages, on the other hand, contend that more people would be able to access database information if they could use their own natural languages. Evidence from studies of the use of some of these query languages however, indicate that neither formal, nor natural languages are easy to use. These studies suggest that the casual user will have difficulty operating at either end of the level-of-constraint continuum.