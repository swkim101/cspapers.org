This article tackles two of the challenges faced by instructors teaching elementary programming courses: I. How can we make students more aware of the security concepts of their discipline, such as the need to promote data integrity in programs, without lengthening our current curricula? 2. How can we give students plausible occasions to use subprocedures in problems that are short enough for the students to solve? The paper identifies three places in an introductory programming course where assigning students to write subprocedures to insert data validation logic in their programs can add extra realism to our standard exercises. One detailed assignment and several general suggestions are shown for each situation, together with questions to stimulate discussion of how programmers can protect data integrity in their information systems. PURPOSE IN A C.S. OR C.I.S. CURRICULUM: truncates incoming quantities that are too "Computer Security" is becoming a public concern to many in the wake of some dramatic thefts and highly publicized break-ins to private systems. Managers as well as computing professionals are looking for ways to protect their organizations' assets from theft, damage, and invasion. According to Robert Courtney, director of data security and privacy for IBM, of the six major data security hazards, errors and omissions head the list. In a series of talks reported in Computerworld (i), he repeatedly cites incompetency as the major threat information systems face: "Dishonest people will never catch up to the damage done by incompetents." Who's incompetent? The data entry clerks? Yes, some of them, particularly now that much data entry is done as an adjunct to a person's main job of selling, manufacturing or shipping. But more often the incompetent is the programmer or designer whose system should have been built to do what is right and reject what is wrong. One program error that, say, Permission to copy without fee all or part of this material is granted provided that the copies are not made or distributed for direct commercial advantage, the ACM copyright notice and the title of the publication and its date appear, and notice is given that copying is by permission of the Association for Computing Machinery. To copy otherwise, or to republish, requires a fee and /o r specific permission. 1985 A C M 0 8 9 7 9 1 1 5 2 0 / 8 5 / 0 0 3 / 0 1 5 5 $ 0 0 . 7 5 long instead of querying them, wreaks more havoc than the most fumble-fingered data entry operator. As more information-processing systems are placed on-line, serious concern is expressed about maintaining the integrity of data in computerized files. In an on-line update transaction, incoming data must be validated immediately, since an invalid transaction will produce an instantaneous error in the data record. In banking, for example, it is important to check a customer's name against the account number, or balance against the amount of withdrawal, before the change to the account balance is processed. Some colorful stories of "computer crimes" arise from failures to make such checks. (ii) There are even more stories of furious customers changing banks because of easily avoidable "computer errors". Experts estimate that, in some business environments, up to 80% of the logic of a program may consist of data validation. Even in 1973, according to James Martin, (iii) "One large commercial user state(d) that 5@ percent of the company's total programming effort (was) spent on validating and identifying data", while another spent 4~% of its programming time developing checks and controls, and a third used 25% of the machine's time for validity and control operations. Nowadays, in interactive program environments where detected errors can be corrected right away, the demand for thorough data validation is even greater.