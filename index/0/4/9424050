Current standard protocol ‘stack’ architectures are static. The fixed number for instance of layers an application can access, or the order in which they must be arranged, exclude a large class of potential cotnmunication protocols. We propose to investigate more flexible protocol stacks consisting of a ‘protocol environment’ populated by standard communication functionalities. The main ingredient is the ability for an application to compose protocol stacks out of standard protocol entities as well as the downline loading of new protocol entities. This leads to application-tailored, extensible stacks, possibly established at run-time by a bootstrap procedure. Different ways to implement such an environment are discussed, and the current work on a ‘toy environment’ is presented.