The AI community is constantly creating and improving sophisticated tools for visualizing, understanding, and investigating AI algorithms. Because these tools are designed by and for researchers, they do not always present a welcoming interface to students learning the discipline for the first time. This paper presents a set of short assignments that scaffold three freely available libraries of use in AI investigations. We have found that activities such as these give undergraduate students the confidence and capabilities crucial to future success with open-ended AI investigations. In addition, the self-guided tasks free classroom time from software details that are better learned in a hands-on setting. Research tools: risks vs. rewards First and foremost, we teachers of undergraduate AI strive to instill excitement and self-confidence among our students. We want them to be able to read and appreciate the context of current AAAI and HCI research. In addition, AI electives often ask students to gain hands-on experience by implementing a medium-sized project, sometimes of their own design. To be efficient in balancing background knowledge and hands-on experience, students must build atop the resources – libraries, toolsets, and algorithms – that AI researchers constantly create and improve. Examples include graphical modeling tools (Bilmes and Zweig, 2002), robot control libraries and computer vision infrastructures (Montemerlo et al., 2003; Vaughan et al. 2003), user input and support processing of HCI data (Myers et al., 2000), and support for natural language work (Bird, 2005), to name but a few. Such resources complement from-scratch algorithm development in class: students can explore far broader swaths of AI far more deeply by standing on the shoulders of prior work. Yet even well-established research tools do not always make ideal pedagogical platforms. Such tools might emphasize performance and comprehensiveness over accessibility. They may have deep dependence chains that Copyright © 2008, Association for the Advancement of Artificial Intelligence (www.aaai.org). All rights reserved. make setup or configuration challenging for students hoping to run on their own computers. Documentation may be incomplete or inaccessible to first-time users. Similar drawbacks haunt students’ first exposure to computer programming. A language’s feature set, the IDEcompiler-interpreter setup, and the mental models assumed by the documentation all conspire against the tentative student. We thus emulate the thematic approaches of today’s transformative CS 1 curricula (Bayliss and Strout, 2006; Blank, 2006, Guzdial, 2003, Kumar et al., 2008). A gently-graduated set of motivating tasks wraps skillpractice and fundamental concepts. Later assignments then leverage students’ confidence and independence in order to deepen computational investigations and understanding.