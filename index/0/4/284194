Playing games on mobile devices is very popular. Recently, cloud gaming – where datacenter servers execute the games on behalf of thin clients that merely transmit UI input events and display output rendered by the servers – has emerged as an interesting alternative to traditional clientside game execution. Cloud Gaming-as-a-Service (GaaS) offers several advantages salient to mobile clients. First, users with low end devices can get the same high quality experience as users with high end devices. Second, mobile game developers avoid two challenges that arise with the huge diversity of mobile devices: platform compatibility headaches and per-platform performance tuning. Third, upgrading servers (e.g., for bug fixes, game updates, etc.) becomes far easier than redeploying new software to clients. Finally, players can select from a vast library of games and instantly play any of them. However, GaaS on mobile devices faces a key technical dilemma: how can players attain real-time interactivity in the face of wide-area latency? Real-time interactivity means client input events should be quickly reflected on the client display. User studies have shown that players are sensitive to as little as 60 ms latency, and are aggravated at latencies in excess of 100 ms [1]. A further delay degradation from 150 ms to 250 ms lowers user engagement by 75% [2]. Instead, we propose to mitigate wide-area latency via speculative execution. We present DeLorean a system that delivers real-time gaming interactivity as fast as traditional local client-side execution, despite with network latencies. DeLorean’s basic approach combines input prediction with speculative execution to render mulitple possible frame outputs which could occur RTT milliseconds in the future. DeLorean employs the following techniques to accomplish this. Future Input Prediction: Given the user’s historical tendencies and recent behavior, we show that some categories of user actions are highly predictable. We develop a Markovbased prediction model that examines recent user input to forecast expected future input. We use two techniques to improve prediction quality: supersampling of input events,