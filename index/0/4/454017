This paper describes techniques used by Test Specification and Determination Tool (TSDT), an experimental prototype for analysis and testing of critical applications written in Ada. Two problems dominate structural testing of programs: exponential explosion in the number of execution paths and feasible path determination, A path is feasible if there exists some input that will cause the path to be traversed during execution. We present techniques based on new representations combined with automated theorem proving to deal with these problems, The paper describes how these techniques can be used to determine the feasibility of expressions containing references to Ada arrays. Finally, we present algorithms specific to generating test data under the modified condition decision coverage (MCDC) criterion. While we realize that many of the problems we are attempting to solve are, in general, undecidable, we are encouraged by preliminary results obtained from running TSDT against vendor supplied code. Based on our results, we feel these techniques can be applied to a broad enough section of Ada code to make them cost effective.