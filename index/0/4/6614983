We present the design and evaluation of an on-the-ﬂy data-race-detection technique that handles applications written for the lazy release consistent (LRC) shared memory model. We require no explicit association between synchronization and shared memory. Hence, shared accesses have to be tracked and compared at the minimum granularity of data accesses, which is typically a single word. The novel aspect of this system is that we are able to leverage information used to support the underlying memory abstraction to perform on-the-ﬂy data-race detection, without compiler support. Our system consists of a minimally modiﬁed version of the CVM distributed shared memory system, and instrumentationcode inserted by the ATOM code re-writer. Wepresentan experimental evaluation of our technique by using our system to look for data races in four unaltered programs. Our system correctly foundread-writedataraces in a program that allows unsynchronized read access to a global tour bound, and a write-write race in a program from a standard benchmark suite. Overall, our mechanism reduced program performance by approximately a factor of two.