Aspect oriented programming (AOP) provides programmers with a new level of modularization capability. Although improving the aspect oriented languages seems to be the most eminent task, we recognize that it is equally important for (professional) software developers to properly leverage the power of AOP and to apply AOP at large scales. As many researchers have realized, one of the best ways to assess the practicality of AOP is to retrofit AOP onto legacy software systems [6, 7, 1]. One of the important activities in doing so is aspect mining. Aspect mining aims at finding non-localized programming concerns of very large software systems, which in turn provide opportunities for aspect oriented modularization and aspect oriented refactoring. Existing work of aspect mining focuses on aspect visualization and aspect browsing [3, 2]. These tools often involve tedious human interactions for complex pattern definition over large code base. Inspired by AMT [3], AMTEX [5] is a step towards building an aspect mining environment which facilitates either autonomous or assisted aspect discovery. Prism is a major extension of AMTEX, which is designed for IDE integration, cross-language mining support, and multimodal analysis. Prism is also an extensible mining platform, which is open for supporting new mining techniques. The current implementation of Prism is built as an Eclipse plugin. It supports Java systems and partially supports C# programs. Through Prism, users can define complex lexical, semantic, and syntactical patterns. The Prism engine