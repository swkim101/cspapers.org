The ultimate aim of MultiText is to develop techniques to provide access by content for a significant fraction of all text available electronically. To this end we consider only algorithms and data structures that can be implemented efficiently on cheap commodity hardware, and that can be scaled without performance penalty to arbitrarily large collections by the mere addition of hardware. Our objectives oblige us to consider in addition the issues of multiple concurrent users, on-line update, continuous availability, and distributed data. The data model for MultiText is unique in that the collection is not divided a priori into units such as documents, paragraphs, sentences, or lines. Rather, the text is organized as a linear stream of words, and structural components like those named above are delimited by markup symbols [2]. As far as the retrieval system is concerned, markup symbols are simply words and may be used as such in a query. An important aspect of this data organization is that the system imposes no particular schema on the data data with many different formats can be stored, searched, and retrieved within the same collection [3]. Queries in MultiText are satisfied by substrings or passages within the document, rather than by documents, paragraphs, lines, etc., which have no particular meaning to the system. Specifically, the system finds the shortest passages that satisfy a particular query. That is, a passage is returned only if it satisfies the query and does not contain a shorter passage that also satisfies the query. This approach can be considered to yield the most general solution to the query [l]. The MultiText query language, GCL, expresses boolean queries as well as containment relationships (contained in, containing, not contained in, and not containing). For example, one could express directly in GCL the query: Find the titles of documents containing all of “Cormack”, “Clarke”“, “Palmer” and “Good” in the author field. Classical information retrieval is effected in MultiText using a few search terms and the ranking technique Cover Density Ranking [4]. The objective here is to find the documents most likely relevant to the user’s information need as expressed by the search terms. To this end we order the documents in the following way: First, documents contain-