1. IntroducUon This paper investigates reductions between numerical functions with respect to Boolean circuit size or depth as complexity measures. We assume that the input is a binary fixed point representation of the argument, if there are n input bits, the circuit is supposed to compute the n most significant bits of the function value. A function ] is called rsduc#.bls to a function g, (jf ~ g) , iff, whenever g can be evaluated for an n-bit input with complexity C(n), then f can be evaluated with complexity O(U(n)), as well. UsualLy we will require that reductions are unifozlrct in the sense that they can be computed in logarithmic space or at least polynomial time. In this paper Theorem 1 will be uniform even with respect to logarithmic space. Two functions f, g are called e~u~g/e~tt (f ~//) if f ~g andg ~y. Permission to copy without fee all or part of this material is granted provided that the copies arc not made or distributed for direct commercial advantage, the ACM copyright notice and the title of the publication and its date appear, and notice is givcn that copying is by permission of the Association for Computing Machincry. To copy otherwise, or to republish, requires a fcc and/or specific pcrmission. We will investigate reducibilities with respect to Boolean Some reducibilities among arithmetic functions are easy to demonstrate. Let rout. div. and sq denote multiplication , division, and squaring, respectively. Then the reduction of sq to mu/ is trivial, the converse one is possible because sit = ~(=+y)s _=s _ ~) (1) Since addition and subtraction can be done in linear size and logarithmic depth simultaneously (cf. [0]), i.e. optimally with respect to both complexity measures, we can use them for 'free'. So with (1) we have that Trtul ~ sq Additionally, from the equation z2 = 1 Z I i (~) z z+l it follows that and, thus sq ~ d/v The motivation to investigate reducibility and equivalence of functions is, of course, that lower or upper bounds, or both, for one function transfer to the 466