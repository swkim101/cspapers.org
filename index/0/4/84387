The effects of parameter transmission to recursive procedures have been investigated widely (e.g. ,in [2], [5], [6], [T], [81, [IO], [12], [13]) and have been shown to be a consideration in such diverse topics as program verification ([2]), hardware design ([13]), and the use of the fix Point rule of computation ([5], [61, [10]). It is the ease in most of the works cited above that the ef– feets of only one or two mechanisms for parameter transmission are at issue, prompting us to question whether or not there exist other parameter passage mechanisms which would be as powerful as the original mechanism but have fewer effects to be considered in conjunction with other language features. Motivated by this same line of questioning, Snyder [14] undertook a comparative analysis of several well-known parameter passage mechanisms using the techniques of comparative schematology [III in program schemata-~. Using these techniques on sim– pIe program schemes (no arrays) whose actual param– eters can be arbitrary expressions, Snyder has shown call by value, copy, and reference all to be equivalent but each weaker than call by name. Snyder assumes all basic functions and predicates to be total. Also using the techniques of comparative schematology, but on program schemes which are augmented with finite dynamically-allocated arrays, whose actual parameters can be arbitra~ expressions including arrays and array cells, and whose basic functions and predicates are partial., Leinbaugh [9] has shown that call by value, copy (termed value/result), and reference are all equivalent but each conjectured to be weaker than call by name. When an index equality test (an equality test on array indices) is added to the schemes, all the parameter passage mechanisms are shown to be equivalent. (In addition , when the index equality test is allowed Leinbaugh shows that his finite arrays are as powerful as the infinite arrays