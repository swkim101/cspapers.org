In conventional science and engineering degree programs, computation is commonly treated-as a narrow technical tool to be studied and applied in isolation from the traditional topics of the discipline. Students are typically required to take a programming course (usually in Fortran, C, or Pascal) to learn how to program, and perhaps a numerical analysis course (covering numerical integration, root finding, and the like) to learn ways to apply their programming skills. However, many students then go through the rest of their degree programs without ever using computation in any significant way. This approach ignores the fact that computation has evolved into an essential way of illuminating scientific and engineering principles. Researchers now choose among the theoretical, experimental, and computational approaches to studying scientific phenomena, It is becoming increasingly clear that computation should be exploited in science and engineering education for its descriptive and analytical powers [1â€“3]. We believe that it is as unreasonable to teach science and engineering without computing as it would be to do so without calculus and differential equations. To encourage the integration of computation into the science and engineering curricula, we have designed and taught an introductory course in computing expressly for science and engineering students. Our goal wss to create a course to satisfy the standard programming requirement while preparing students to immediately exploit the broad power of modern computing in their science and engineering courses. Our course has at least four distinguishing features: