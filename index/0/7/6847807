Use cases are one of the most common mechanisms for describing and analyzing software system requirements. Due to use of natural language in use case descriptions, it is often assumed that they are easy to understand for stakeholders involved in the software development process [8]. However some authors argue [17,18] that the most common pitfalls of use cases written by professionals is that the customer does not understand them. In this paper we would like to consider whether it is appropriate to take their understandability to non-technically minded stakeholders for granted.We have analyzed 88 use cases written by final-year undergraduate computer science students for an assignment at the University of Hertfordshire and point out ways in which a computing-based mindset or way of thinking infiltrates the use cases, possibly making them difficult to understand for non-technical partners and hindering or pre-empting design decisions. We suggest that the problems we observed among students indicate a need for adding a new rule and/or guideline when teaching students to write good quality use cases, which is to ensure as far as possible that their use cases are free from computing-based structures and vocabulary. We also suggest ways in which students studying technical aspects of computer science might be led into practicing the use of non-technical language.