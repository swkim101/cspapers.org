In a weighted, directed graph an <i>L</i>-bounded leg path is one whose constituent edges have length at most <i>L.</i> For any fixed <i>L</i>, computing <i>L</i>-bounded leg shortest paths is just as easy as the standard shortest path algorithm. In this paper we study <i>approximate distance oracles</i> (and <i>reachability</i> oracles) for bounded leg path problems, where the leg bound <i>L</i> is not known in advance, but forms part of the query. Bounded-leg path problems are more complicated than standard shortest path problems because the number of distinct shortest paths between two vertices (over all leg bounds) could be as large as the number of edges in the graph.
 The bounded leg constraint models situations where there is some limited resource that must be spent when traversing an edge. For example, the size of a fuel tank or the life of a battery places a hard limit on how far a vehicle can travel in one leg before refueling or recharging. Someone making a long road trip may place a hard limit on how many hours they are willing to drive in any one day.
 Our main result is a nearly optimal algorithm for preprocessing a directed graph in order to answer <i>approximate</i> bounded leg distance and bounded leg shortest path queries. In particular, we can preprocess any graph in Õ(<i>n</i><sup>3</sup>) time, producing a data structure with size Õ(<i>n</i><sup>2</sup>) that answers (1 + ∈)-approximate bounded leg distance queries in <i>O</i>(log log <i>n</i>) time. If the corresponding (1 + ∈)-approximate shortest path has <i>l</i> edges it can be returned in <i>O</i>(<i>l</i> log log <i>n</i>) time. These bounds are all within polylog(<i>n</i>) factors of the best standard all-pairs shortest path algorithm and improve substantially the previous best bounded leg shortest path algorithm, whose preprocessing time and space are <i>O</i>(<i>n</i><sup>4</sup>) and <i>Õ</i>(<i>n</i><sup>2.5</sup>).
 We also consider bounded leg oracles in other situations. In the context of planar directed graphs we give a time-space tradeoff for answering bounded leg <i>reachability</i> queries. For any <i>k</i> ≥ 2 we can build a data structure with size <i>O</i>(<i>kn</i><sup>1+1/<i>k</i></sup>) that answers reachability queries in time Õ(<i>n<sup>k−1/2k</sup></i>).