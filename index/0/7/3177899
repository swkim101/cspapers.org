In computer systems with large, physically-indexed, direct-mapped caches, a poor mapping from virtual to physical pages causes excessive cache connict misses. In a previous paper we proposed a simple hardware device , the Cache Miss Lookaside (CML) Buuer, which identiies pages that are suuering from connict misses. The operating system can use this information to implement a dynamic page mapping policy that resolves connicts by performing an in-memory copy of one of the connicting pages, and updating the virtual to physical mappings. In this paper, we propose several dynamic page mapping policies that detect and resolve cache connicts using hardware available in existing systems , such as a TLB and cache miss counter, to locate possible cache connicts. We evaluate the simulated performance of a variety of mapping policies, and show that a dynamic page mapping policy using standard hardware can improve upon the performance of a static policy, but is not as eeective as special-purpose hardware such as an associative cache or a CML buuer. We also describe the implementation and performance of a software-based dynamic policy on a DEC Alpha workstation running DEC OSF/1.