This paper describes two related tools developed to support the isolation and analysis of optimization err ors in the vpo optimizer. Both tools rely on vpo identifying sequences of changes, r eferred to as transf ormations, that result in semantically equi valent (and usually impr oved) code. One tool determines the first transf ormation that causes incorrect output of the execution of the compiled program. This tool not only automatically isolates the illegal transformation, but also identifies the location and instant the transformation is performed in vpo. To assist in the analysis of an optimization err or, a graphical optimization viewer was also implemented that can display the state of the generated instructions before and after each transformation performed byvpo. Unique features of the optimization viewer include re verse viewing (or undoing) of transformations and the ability to stop at breakpoints associated with the gener ated instructions. Both tools are useful independently. Together these tools f orm a powerful envir onment for facilitating the r etargeting of vpo to a new machine and supporting experimentation with new optimizations. In addition, the optimization viewer can be used as a teaching aid in compiler classes.