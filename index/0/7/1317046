coordinating the work, and differ in the circumstances in which they are most likely to be effective. Best practices for global development. We have observed a number of practices that have been quite effective in improving communication. Among them are practices about • establishing trust across sites by being even more responsive to remote colleagues than to local ones • setting up liaisons at each site to facilitate cross-site communication • establishing etiquette for answering e-mail and voice mail messages in a timely way • planning for travel early in the relationship between sites – everything will work better after people have met. Our future work will focus on continuing to introduce tools and models to practice, and to measure the results with analyses of MR data and survey results. Abstract: Processor speed has been increasing dramatically for the past 20 years. On the other hand, software is getting bulkier and slower. Many popular software applications have a lot of 'bells and whistles'; most users know less than 5% of all supported features. Users don't see performance improvement as processor speed increases. We are no better off than we were 15 years ago. As a discipline, software engineering is young and full of promise. However, with current software practices, if we asked software engineers to design cars, we would have to restart our cars every mile (unreliable), fill up our tanks every hour (inefficient), and upgrade our engine control software every week (feature-laden). What's wrong with the software industry? What have we not taught our graduates about software design? Is there a much deeper problem in our software engineering culture? In order to produce better software, does it always mean that we need to add more and more features? To release a product ahead of the competition, should the users be the beta-testers? This endless cycle of field upgrades must stop. Let us discuss why we need a deeper appreciation of software performance and reliability. What are the bottlenecks? What are the remedies? Abstract: Startups face enormous demands that affect the rigor with which they might adhere to software engineering and quality plans. Investors are impatient to see product, existing competitors have momentum and presence that must be countered, the processes and quality metrics are being defined along with, if not behind, product specification and development, and the development organization can often double within one or two weeks. Processes cannot …