The Dynamic Optimality Conjecture [ST85] states that splay trees are competitive (within a constant competitive factor) among the class of all binary search tree (BST) algorithms. Despite 20 years of research this conjecture is still unresolved. Recently, Demaine et al. [DHIP04] suggested searching for alternative algorithms which have small but non-constant competitive factors. They proposed Tango, a BST algorithm which is nearly dynamically optimal - its competitive ratio is O(log log n) instead of a constant. Unfortunately, for many access patterns, such as random and sequential, Tango is worse than other BST algorithms by a factor of log log n.In this paper, we introduce the multi-splay tree (MST) data structure, which is the first O(log log n)-competitive BST to simultaneously achieve O(log n) amortized cost and O(log2 n) worst-case cost per query. We also prove the sequential access lemma for MSTs, which states that sequentially accessing all keys takes linear time. Thus, MSTs are O(log log n)-competitive like Tango but, unlike Tango, require only O(log n) amortized time per access in an arbitrary sequence and only O(1) amortized time per access during a sequential access sequence.Furthermore, we generalize the standard framework for competitive analysis of BST algorithms to include updates (insertions and deletions) in addition to queries. In doing so, we extend the lower bound of Wilber [Wil89] and Demaine et al. [DHIP04] to handle these update operations. We show how MSTs can be modified to support these update operations and be O(log log n)-competitive in the new framework while maintaining the rest of the properties above.