We consider two problems related to I/O: First, find the minimum primary memory size required to factor a sparse, symmetric matrix when permitted to read and write the data exactly once. Second, find the minimum data traffic between core and external memory when permitted to read and write the data many times. These problems are likely to be intractable in general, but we prove upper and lower bounds on these quantities for several model problems with useful sparsity (i.e., whose computational graphs have small separators). We provide fast algorithms for computing these quantities through simulation for irregular problems. The choice of factorization algorithms (left-looking, right-looking, multifrontal), orderings (nested dissection or minimum degree), and blocking techniques (1- or 2- dimensional blocks) can change the memory size and traffic by orders of magnitude. Explicitly moving the data (files managed by the program) improves performance significantly over implicit data movement (pages managed by the operating system). Thus this work guides us in designing a software library that implements an external memory sparse solver.