Lawrence R. Carleton I r ~ @ a o l . c o m I present a pattern for deciding when to t ry for an original solution to a problem instead of applying an available Design Pattern. The practice of using software design patterns is of course frequently very useful. You come upon a problem where there are antagonistic forces at play and the pattern gives you a way to resolve them by following practices worked out and applied in (perhaps abstractly) similar situations. Instead of "reinventing the wheel", yon reuse previously successful strategies, and save most of your creative energies for that which is new and different. In Christopher Alexander's architecture of buildings, neighborhoods, etc., there are many patterns, interrelated in pattern languages, which together promote his Timeless Way of Building. But humans have not been building software nearly as long as we have been building houses and cities. In software, it is reasonable to expect that, even in well known situations, it is possible from time to time to find a way to resolve some set of conflicting considerations better than the established way. (Historical example: three tier architecture for database access, vs. the earlier cfient-server architecture.) The question, then, is how to decide when to try to "invent a better wheel", and when to leverage established successful practice in building your software product.