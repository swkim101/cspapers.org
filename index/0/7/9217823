Distributed Object Memory (DOM) is an abstraction that represents a distributed-memory system as a single shared container of language-level objects. The goal of DOM is to simplify programming of parallel applications for such systems. All accesses to shared memory are made relative to objects that reside in one or more node-local memories. For example, in Amber, a DOM system for a network of workstations, remote references are transparent at the language level and are implemented using either remote procedure call or object replication and migration. While DOM can greatly simplify distribution for many application classes, it is not well suited for all domains (parallel-scientific codes, in particular). To address the shortcomings of DOM for such domains, we introduce Versioned DOM (VDOM). In VDOM a version number is associated with each object. Multiple versions of objects can coexist and may be cached in local memories as needed to increase concurrency. Object coherence is driven by synchronization methods implicitly associated with each object. Explicit versioning is used as the basis for a memory consistency model that facilitates efficient fine-grain sharing of objects. The units This work was supported in part by the National Science Foundation under Grants No. CCR-8619663 and CCR8907666, by the Washington Technology Center, and by the Digital Equipment Corporation Systems Research Center and External Research Program. Permission to copy without fee all or part of this material is granted provided that the copies are not made or distributed for direct commercial advantage, the ACM copyright notice and the title of the publication and its date appear, and notice is given that copying is by permission of the Association for Computing Machinery. To copy otherwise, or to republish, requires a fee and/or specific permission. @ 1992 ACM O-89791-539-9/92/001 0/0247...$1.50 of VDOM coherence are fragment objects, from which language-level objects are constructed; this fragmentation solves the false-sharing problem for language-level objects. The performance of VDOM primitives compared to standard DOM coherence is presented along with speedup results for two parallel applications implemented using VDOM.