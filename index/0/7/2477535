Generic programming is an increasingly important paradigm for the development of software libraries. David Musser and Alexander Stepanov developed the methodology of generic programming in the late 1980’s [6] and applied it to the construction of sequence and graph algorithms in Scheme, Ada, and C. In the early 1990’s they shifted focus to C++ and took advantage of templates to construct the Standard Template Library [12] (STL). The STL soon became part of the C++ Standard, which brought generic programming into the mainstream. Since then, generic programming has been successfully applied in the construction of libraries for numerous problem domains [1, 2, 4, 5, 8, 9, 11,13,14]. Many programming languages have some support generic programming and some languages are in the process of adding support. In [3] we compared the support for generic programming in the following languages: C++, Java (with the generics extension), Generic C#, Haskell, Standard ML, and Eiffel. Since then we have extended the study to include O’Caml and Cecil. During the study we identified the following properties of languages as important in the construction of generic libraries such as the STL and the Boost Graph Library (BGL) [9].