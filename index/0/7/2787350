Two drawbacks to A* explain its high complexity. First, A* tends to do much backtracking due to the invariable choice of n' as the node to be expanded next. A* tends to expand many nodes not in the final solution path since h (being a heuristic) fluctuates in quality and hence various near optimal paths take random turns appearing to be optimal. Such paths effectively "race" with one another to reach their goals. So we can trace the cause of backtracking to A*'s desire to fine tune an optimal cost solution. The algorithm A* (Nilsson, 1979) presents two significant drawbacks. First, in seeking strict optimal solution paths it necessarily has high order of complexity. Second, the algorithm does not explicitly descriminate between the cost of a solution path and the cost of finding the solution path. To confront these problems we propose the algorithm AE, a generalization of A*. Instead of seeking an optimal solution, it seeks one which is within a factor (1+e) of optimum (e > 0). The basic idea is to avoid doing any search at all on most near optimal partial solutions by sticking to a small number of most f ru i t fu l paths. Various strategies for searching for near optimal partial solutions are discussed. Experimental results are presented indicating that A e has average complexity of lower order than A* and compares favorably to the related algorithm Af* (Pearl and Kim, 1982).