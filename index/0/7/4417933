REACH [1] is a full-fledged aOODBMS research platform, that was implemented by extending TIâ€™s OpenOODB [2]. The REACH prototype is one of the first running systems that combines most of the advanced features of aOODBMSs that previously have been shown in partial implementations only. It provides a much needed platform for the development of applications and was instrumented to make performance measurements and visualize the flow of execution. It has a graphical user interface and support tool for rule definition and administration (GRANT). OpenOODB is implemented in an extensible way that resembles the event-driven paradigm of active database systems. A meta-architecture module implements the notions of low-level event, sentry, and policy manager interface. Policy managers are used for handling persistence, transactions, queries, etc. We extended Open OODB with policy managers for event handling and rule execution. REACH implements primitive method events, temporal events, flow control events and the composition operators for sequence, disjunction, conjunction, closure, negation, and history. It uses the C++ type system and detects method events through inline wrapping of the methods in the extended preprocessor of OpenOODB. An ECA rule is mapped to an ECA manager which is accessed during event detection and propagates the event object to the relevant rules implemented as two C functions (for condition and action), which are stored in a shared library [1]. REACH supports a rich set of coupling modes. Rules can be executed either in immediate, deferred or detached mode. Detached mode may be independent or dependent with variants parallel, sequential or exclusive which is used for contingency plans. For details see [1]. Event composition semantics are defined relative to transaction boundaries. Composite events that trigger deferred rules must be composed from events originating in one transaction. Composite events where the constituent events originate in multiple transactions