This paper considers the problem of synthesizing correct-by-construction robotic controllers in environments with uncertain but fixed structure. “Environment” has two notions in this work: a map or “world” in which some controlled agent must operate and navigate (i.e., evolve in a configuration space with obstacles); and an adversarial player that selects continuous and discrete variables to try to make the agent fail (as in a game). Both the robot and the environment are subjected to behavioral specifications expressed as an assume-guarantee linear temporal logic (LTL) formula. We then consider how to efficiently modify the synthesized controller when the robot encounters unexpected changes in its environment. The crucial insight is that a portion of this problem takes place in a metric space, which provides a notion of nearness. Thus if a nominal plan fails, we need not resynthesize it entirely, but instead can “patch” it locally. We present an algorithm for doing this, prove soundness (correctness of output), and demonstrate it on an example gridworld.