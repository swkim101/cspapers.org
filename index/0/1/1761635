To build a reliable distributed infrastructure, the middleware that comprises this infrastructure must follow a behavior model that is environmentally aware and responsible. Current behavior models rely the operating system and human vigilance to prevent middleware components from exhausting system resources. Our experience with Open Science Grid (OSG) [2] and Enabling Grids for EsciencE (EGEE) [1] has revealed the inadequacy of these behavior models for distributed infrastructure software. The operating system is concerned with preventing full system failure over the failure of individual processes and often does not respond to resource shortages until circumstances are dire and drastic measures are required. By the time the operating system does respond, middleware components may have already failed because of denied resource requests or may appear unresponsive due to resource contention. Therefore, relying on the operating system to handle resource exhaustion only ensures that the operating system will not crash; it will not prevent failure of middleware components. In a distributed environment, users are unable to micro-manage software execution. Fundamental management functionality, such as process listing, may be unavailable or may offer inaccurate results in a large, distributed environment. Furthermore, to reduce dependencies among middleware components and maximize resource usage, some components are deployed on-the-fly [6] and thus cannot be managed with the same vigilance as their stationary counterparts. Distributed environments often span many administrative domains, further complicating component management. An ad-