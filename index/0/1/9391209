We describe a compiler-directed technique to reduce page-faults in multiprocessing systems. Compile-time analysis of access-patterns is coupled with runtime support to characterize access-patterns in the form of marginal-loss functions - these functions describe the extra page faults that would be incurred for an access-pattern if it were given one fewer physical page. The kernel uses these functions to guide its page-replacement decisions by victimizing those processes whose access-patterns are affected the least. We outline how marginal loss functions can be computed for common access-patterns and presents simulation results to demonstrate the technique's effectiveness.