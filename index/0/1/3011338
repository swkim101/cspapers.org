Attribute grammars [Knu68] serve as the underlying formal basis for a number of language-based environments and environment generators [DRTSl] [RT84] [SDB84] [JF85] [BC85] [Pfr86] [LMOWSS] [FZ89] [RT89] [BFHP89] [Jou89]. In such environments, attributes decorate an abstract-syntax-tree representation of an object being edited and are kept up to date as the underlying abstract-syntax tree is modified, either by direct user manipulation or by indirect transformation actions. The collection of attributes constitute a derived database of facts about the object. Attributes can provide immediate feedback that guides further user interaction, as in the case of error attributes indicating violations of context-sensitive conditions, and can also provide incremental translation, as in the case of objectcode attributes. A weakness of this firs&order attribute-grammar editing model is its strict separation of syntactic and semantic levels, with priority given to syntax. The attributes are completely constrained by their defining equations, whereas the abstract-syntax tree is unconstrained, except by the local restrictions of the underlying contextfree grammar. The attributes, which are relied on to communicate context-sensitive information throughout the syntax tree, have no way of generating derivation trees. They can be used to diagnose or reject incorrect syntax a posteriori but cannot be used to guide the syntax a priori. A few examples illustrate the desirability of permit-