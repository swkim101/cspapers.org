The importance of the role of documentation in the development and maintenance of software is not in dispute among computer professionals. Within the profession, software has come to mean more than just the source or object code which is produced. A modern definition of software includes documents as a vital component. The largest part of such documentation is external to the program and records the history of the project. Included could be project plans, requirements specification, preliminary detailed code design, user-directed manuals and maintenance journals.
All too often the computer science curriculum, whether by design or default, limits student experience with external documentation to specialized courses such as software engineering. While the documentation experience provided by these courses may prove valuable, its quality may be limited by the student's attitude. If the student's previous experience has been limited to internal documentation, there is a good chance that he has come to view documentation as an add-on, something to be completed after the project is really finished. It is difficult to alter this mind-set.
Identification of a solution to this problem may require not only a reevaluation of the documentation requirements for student software projects but an examination of the availability of programming languages and design tools which support the documentation effort. This paper reports the development of several design tools which are intended for student use in the preparation of preliminary project documentation. Special among these is an interactive graphics editor to be used to assist in the design, documentation and implementation of programs.