Nloblle computing devices intended for disconnected operation, such as laptops and personal organizers, must employ optimistic replication strategi~ for user files. Unlike traditional distributed systems. such devices do not attempt to present a “single filesystem” semanti~ users are aware that their fles are replicated, and that updates to one rephca till not be seen in another until some point of synchronization is reached (often under the user’s exphcit control). A variety of tools, collectively called file synchronizers, support this mode of operation. Unfortunately, present-day synchronizers seldom give the user enough information to predict how they will behave under all circumstances. Simple slogans fike “Non-confecting updates are propagated to other replicas” ignore numerous subtletim—e.g., Precisely what constitutes a confict be @een updates in different replicas? What does the synchronizer do if updatw confict? What happens when fles are renamed? What if the directory structure is reorganized in one replica? Our god is to offer a simple, concrete, and precise frame work for describing the behavior of file synchronizers. To this end, n?edivide the synchronization task into two conceptually distinct phasm update detection and Reconciliation. We dEcuss each phase in detail and develop a straightforn’ard specification of each. We sketch our on prototype implementation of these specifications and discuss how they apply to some existing synchronization tools.