Previous work on functional joins was constrained in two ways: (1) all approaches we know assume references being implemented as physical object identifiers (OIDs) and (2) most approaches are, in addition, limited to single-valued reference attributes. Both are severe limitations since most object-relational and all object-oriented database systems do support nested reference sets and many object systems do implement references as location-independent (logical) OIDs. In this work, we develop a new functional join algorithm that can be used for any realization form for OIDs (physical or logical) and is particularly geared towards supporting functional joins along nested reference sets. The algorithm can be applied to evaluate joins along arbitrarily long path expressions which may include one or more reference sets. The new algorithm generalizes previously proposed partition-based pointer joins by repeatedly applying partitioning with interleaved re-merging before evaluating the next functional join. Consequently, the algorithm is termed P(PM)*M where P stands for partitioning and M denotes merging. Our prototype implementation as well as an analytical assessment based on a cost model prove that this new algorithm performs superior in almost all database configurations. *This work was supported in part by the German National Research Foundation DFG under contracts Ke 401/6-2 and Ke 40117-I. Permission to copy without,fee ull or part of this materiul is grunted provided that the copies crre not made or distributed for direct commercial advuntuge, the VLDB copyright notice und the title qf the publicm and notice is given rhcrt copying is by permission of the Very Large Dutu Base Endowment. 7i1 copy otherwise, or to republish, requires u,fee an&r special permission,from the Endowment. Proceedings of the 24th VLDB Conference New York, USA, 1998