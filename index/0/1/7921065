Detecting races is important for debugging shared-memory parallel programs, because the races result in unintended nondeterministic executions of the programs. Most on-thefly techniques to detect the races cause the central bottlenecks of serializing all accesses of each thread to a shared variable. The amount of such bottlenecks can be reduced in case of detecting the first races that may cause the other races. This paper presents a new scalable on-the-fly technique which reduces the central bottlenecks to serializing at most two accesses of each thread to a shared variable for detecting the first races in parallel programs. It is important to detect the first races efficiently, because the removal of the Iirst races can make other races disappear. This technique, therefore, makes on-the-fly race detection more efficient and practical.