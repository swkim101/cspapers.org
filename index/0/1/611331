Abstr act An approach is proposed for modeling off the shelf hardware and for modeling parallel algorithms, along with a design methodology to use the information provided by these models, to design a class of macro-pipelined special purpose architectures. Nine parameters to form a model of the characteristics of parallel/distributed algorithms and the environment in which they must execute are presented. In addition, a set of tuples to model the characteristics of computer architectures is presented. By combining the tuphs with the parameters, the execution time of the algorithm modeled by the parameters on the hardware modeled by the tnples can be approximated. The combination of these models could be used as a basis for computer aided tools used in the design of macro-pipelined parallel/distributed processors. 1. Introduction For certain applications, such as speech processing, time is an important factor. In such applications, there is a need to process many data sets in the same way e.g., continually performing an FFT for every frame of input data. Previous analysis, such as that performed in [4], [5], [34], [35], and [37] indicate that for many types of tasks, conventional general purpose processors are insufficient. In this paper, an approach is proposed for modeling off the shelf hardware and for modeling parallel algorithms , along with a design methodology to use the information provided by these models, to design a class of macro-pipelined special purpose parallel architectures. The ultimate goal is to use models such as the ones proposed here to develop computer aided design tools. Special purpose processing systems (such as those used for dedicated real-time analysis) are typically sold in small quantities. As a result, the cost of the design can make the resulting system prohibitively expensive. Computer aided design tools for this process would reduce the cost involved and are therefore desirable. This paper uses nine parameters to correlate the hardware to be designed with the applications software to be executed and the I/O environment in which the machine will operate. A macro-pipeiined layered approach to task decomposition is demonstrated. Each portion of the decomposed task is then assigned to a special purpose processing unit. This implies that each processing unit may either be a traditional serial type design or a parallel design. Once this initial decomposition is established, techniques such as those used to adjust the execution time and throughput of a pipeline in [14] can be applied. â€¦