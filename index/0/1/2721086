Relational databases organize data in the First Normal Form, i.e., all values in a database are necessarily atomic (non-decomposable). Nested Relational Databases on the other hand are not constrained by this assumption; values of a nested relation can be either atomic values or nested relations themselves. 
This dissertation discusses the Indiana University prototype for nested relational databases, ANDA (Architecture for a Nested Database Applications). ANDA provides a mechanism for storing and manipulating nested relations and complex objects. All stages of query processing in ANDA are discussed. A query can be expressed in a graphical query language which is first translated to an access language and then optimized. Finally the access language interacts with the data structures of the system to evaluate the query. 
In ANDA, all tuples and objects are identified by a hierarchical, structured tuple-identifier (tuple-id). As tuple-ids have enough information to determine mutual relationships, extensive query processing is done by manipulating tuple-ids in main-memory. 
Query evaluation in ANDA is done by repeating the value $\to$ tuple-id $\to$ value cycle. The first phase involves extracting the required tuple-ids from the value-based indexing structure, VALTREE. In the second phase these tuple-ids are manipulated in the main-memory based CACHE. In the third phase, the tuple-ids from the CACHE are materialized using the RECLIST, which provides fast access to a value for a given tuple-id. 
An access language is designed to specify access plans. The access language abstracts the operations of the VALTREE, the RECLIST, and the CACHE. Access plans for ANDA are specified in the access language. A cost model has been proposed to provide a mechanism to compare alternative access plans. Other optimization strategies for optimizing access plans are also discussed. 
A graphical query language which allows direct manipulation of nested relational schemes has been designed to provide a user-friendly interface to ANDA.