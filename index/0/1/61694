Given a set of <italic>n</italic> elements from the domain 1, â€¦, <italic>m</italic>, we investigate how to arrange them in a table of size <italic>n</italic>, so that searching for an element in the table can be done in constant time.
Yao has shown that this cannot be done when the domain is sufficiently large as a function of <italic>n</italic> ([Yao]). [FNSS] have shown that this can be done when the domain is linear in the number of elements.
We give a constructive solution when the domain <italic>m</italic> is polynomial in the number of elements <italic>n</italic>, and give a nonconstructive proof for <italic>m</italic> no larger than exponential in poly(<italic>n</italic>). We improve upon [Yao] and give better bounds on the maximum <italic>m</italic> for which implicit <italic>O</italic>(1) probe search can be done. We achieve our results by showing the tight relationship between hashing and certain encoding problems.