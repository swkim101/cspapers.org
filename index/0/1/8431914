Two main techniques have been used so far to solve the #P-hard problem #SAT. The first one, used in practice, is based on an extension of DPLL for model counting called exhaustive DPLL. The second approach, more theoretical, exploits the structure of the input to compute the number of satisfying assignments by usually using a dynamic programming scheme on a decomposition of the formula. In this paper, we make a first step toward the separation of these two techniques by exhibiting a family of formulas that can be solved in polynomial time with the first technique but needs an exponential time with the second one. We show this by observing that both techniques implicitly construct a very specific Boolean circuit equivalent to the input formula. We then show that every β-acyclic formula can be represented by a polynomial size circuit corresponding to the first method and exhibit a family of β-acyclic formulas which cannot be represented by polynomial size circuits corresponding to the second method. This result sheds a new light on the complexity of #SAT and related problems on β-acyclic formulas. As a byproduct, we give new handy tools to design algorithms on β-acyclic hypergraphs.