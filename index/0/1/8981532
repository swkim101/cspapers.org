Hard real-time systems require both functionally correct executions and results that are produced on time. Control of the traffic (ground or air), control of engines, control of chemical and nuclear power plants are just some examples of such systems. Currently, numerous techniques exist that enable engineers to design realtime systems, while guaranteeing the correctness of their temporal behavior in a systematic way. These techniques generally model each functionality of the system by a recurrent task, characterized by a computing requirement, a temporal deadline and an activation rate. Commonly, real-time systems are modeled by a fixed set of such tasks. However, some applications exhibit multiple behaviors issued from several operating modes (e.g., an initialization mode, an emergency mode, a fault recovery mode, etc.), where each mode is characterized by its own set of functionalities, i.e., its set of tasks. During the execution of such multi-mode real-time systems (described in details in [9]), switching from the current mode (called the old-mode) to another one (the new-mode hereafter) requires to substitute the current executing tasks with the tasks of the target mode. This substitution introduces a transient stage, where the tasks of the oldand new-mode may be scheduled simultaneously, thereby leading to an overload which compromises the system schedulability. The scheduling problem during a transition between two modes has multiple aspects, depending on the behavior and requirements of the oldand new-mode tasks when a mode change is initiated (see e.g., [4], [6]). For instance, an old-mode task may be immediately aborted, or it may require to complete the execution of its current instance in order to preserve data consistency. On the other hand, a new-mode task sometimes requires