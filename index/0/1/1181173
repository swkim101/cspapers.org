Maintaining the temporal validity of real-time data is one of the crucial issues in a real-time database system. Past studies focus on designing algorithms to minimize imposed workload by a fixed set of update transactions while maintaining data freshness within validity intervals. In this paper we revisit this problem by investigating the cost of data freshness maintenance and online scheduling overhead in the presence of mode changes in real-time systems. We propose to apply periodic scheduling policies when the imposed update workload is low to maintain high data freshness. When the update workload becomes high, we propose to switch to more sophisticated algorithms to improve schedulability. In the latter case, not only each scheduling policy must be able to schedule the task set in the corresponding mode, temporal validity must also be maintained during the mode changes. To address this problem, two algorithms, named search-based switch (SBS) and adjustment-based switch (ABS) are proposed to search for the proper switch point online. SBS checks the temporal validity at the beginning time slot of each idle period while ABS further relaxes this restriction through schedule adjustment. Our experimental results demonstrate the correctness and efficiency of these two algorithms. Our results also show that scheduling switch according to the runtime processor workload can significantly outperform a single fixed scheduling policy in terms of data freshness while incurring only limited online switch overhead.