To accommodate the increase in user population in future personal communication systems, hierarchical architectures of location databases have been proposed. In this paper, a scheme based on forwarding pointers is presented, that reduces the cost of the overall network and database traac generated by frequent location updates in such hierarchical architectures. To reduce the number of forwarding pointers that need to be traversed to locate a user, auxiliary caching techniques are presented. Various conditions for purging the chain of forwarding pointers and updating the database are also introduced. Special care is given so that the scheme correctly supports the concurrent execution of updates and lookups. The applicability of the scheme and the performance of the caching techniques are demonstrated through a number of experiments for a range of call to mobility ratios and for a variety of moving and calling behaviors. 1 Introduction Advances in wireless telecommunications and in the development of portable computers have provided for the emergence of mobile computing. In mobile computing, users are not attached to a xed geographical location, instead their point of attachment to the network changes as they relocate from one support environment to another. Besides mobility in wireless networks, other forms of moving objects are also emerging. Software mobile agents, that roam the Internet searching for information, provide a popular such example. Since delivering any message to mobile objects requires locating them rst, deriving eecient strategies for tracking moving users is central to mobile computing. In particular, for future Personal Communication Service (PCS) systems, with high user populations and numerous customer services, such signaling and database traac for locating users is expected to increase dramatically 15]. To locate users, distributed location databases are deployed that maintain the current location of mobile users. To accommodate the increased traac associated with locating moving users, hierarchical distributed database architectures are built 15, 1,