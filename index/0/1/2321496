Let <i>G = (V, E)</i> be a directed graph with positive edge weights, let <i>s, t</i> be two specified vertices in this graph, and let π(<i>s, t</i>) be the shortest path between them. In the <i>replacement paths</i> problem we want to compute, for every edge <i>e</i> on π(<i>s, t</i>), the shortest path from <i>s</i> to <i>t</i> that avoids <i>e</i>. The naive solution to this problem would be to remove each edge <i>e</i>, one at a time, and compute the shortest <i>s - t</i> path each time; this yields a running time of <i>O(mn + n<sup>2</sup></i> log <i>n</i>). Gotthilf and Lewenstein [8] recently improved this to <i>O(mn+n<sup>2</sup></i> log log <i>n</i>), but no <i>o(mn)</i> algorithms are known.
 We present the first <i>approximation</i> algorithm for replacement paths in directed graphs with positive edge weights. Given any ε ε [0, 1), our algorithm returns (1 + ε)-approximate replacement paths in <i>O</i>(ε<sup>-1</sup> log<sup>2</sup> <i>n</i> log(<i>nC/c)(m+n</i> log <i>n)) = Õ(m</i> log(<i>nC/c</i>)/ε) time, where <i>C</i> is the largest edge weight in the graph and <i>c</i> is the smallest weight.
 We also present an even faster (1 + ε) approximate algorithm for the simpler problem of approximating the <i>k</i> shortest simple <i>s - t</i> paths in a directed graph with positive edge weights. That is, our algorithm outputs <i>k</i> different simple <i>s - t</i> paths, where the kth path we output is a (1 + ε) approximation to the actual kth shortest simple <i>s - t</i> path. The running time of our algorithm is <i>O(k</i>ε<sup>-1</sup> log<sup>2</sup> <i>n(m + n</i> log <i>n)) = Õ(km/ε)</i>. The fastest <i>exact</i> algorithm for this problem has a running time of <i>O(k(mn+n</i><sup>2</sup> log log <i>n)) = Õ(kmn)</i> [8]. The previous best approximation algorithm was developed by Roditty [15]; it has a stretch of 3/2 and a running time of Õ(km√n) (it does not work for replacement paths).
 Note that all of our running times are nearly optimal except for the <i>O</i> (log(<i>nC/c</i>)) factor in the replacements paths algorithm. Also, our algorithm can solve the variant of approximate replacement paths where we avoid vertices instead of edges.