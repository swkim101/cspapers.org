We report on the development of a formal theory of databases designed to support specification-based development of database systems. This theory formalizes database systems which include non-first normal form relations, complex integrity constraints, transactions, and embedded data types such as integers, character strings, and user-defined types. Our theory is based on two axiomatized algebras (abstract data types) and is being used to mechanically prove the properties of relational algebra and functional dependencies, as well as the relationships between integrity constraints and the primitive operations on databases, e. g., inserts and deletes of tuples. We are also using the theory to prove whether or not specific transactions obey complex integrity constraints which can include universal and existential quantifiers. The latter proofs (as well as failed attempts at proofs) can be used during the design of specific systems and in the optimization of system implementations.