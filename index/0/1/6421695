The Internet is not secure due to its design goals being at oddswith the principle of least privilege. The Internet strives toallow any host to communicate with any other host, while theprinciple of least privilege advocates limiting host connectivityto the smallest set necessary for performing a task. Our goal is tosecure the Internet by largely turning off connectivity in theInternet, and then using explicit signaling to selectively enableonly those connections that are deemed necessary for performing atask.
Intrusions and worms routinely exploit applicationvulnerabilities, DDoS attacks exhaust a target's network bandwidth,and phishing attacks and spam trick users on a daily basis. This isin no small part due to the design goals of the Internet being atodds with the principle of least privilege. Firewalls embody thisprinciple in spirit by restricting access between hosts. Being anad hoc bolt-on to the original Internet architecture, however,firewalls have limited knowledge (just IP addresses and ports) onwhich to base their decision to block a packet. In theclient/public-server Internet where a client can typically accessany public service, this limited knowledge is sufficient forrestricting connectivity but it is not the case in theclient/client Internet popularized by VoIP, P2P filesharing, VPNsetc. As client IP addresses change (DHCP, VPN, NAT) andapplications use dynamic source and destination ports, firewallsare left guessing as to the intent of a connection and whether ornot to block it.
Our goal is to secure the Internet by allowing firewalls toenforce the principle of least privilege in all cases. Thisinvolves incorporating multiple layers of firewalls into theInternet architecture, which corresponds to the role multipleparties (end-user, IT Department, ISP) play in allowing aconnection. Our approach leverages the existing IP routing coreunmodified but constrains host connectivity by configuringfirewalls to disallow all connections by default. To establish aclient/client connection, an application must explicitly requestpermission from all the firewalls between it and the remoteend-point by declaring the intent of the connection over asignaling channel (like SIP, the Session Initiation Protocol usedfor signaling to establish VoIP calls). The request is rich enoughto allow firewall administrators to target individual users andapplications, and negotiate security parameters for the resultingconnection. This creates the need for richer naming and connectionsemantics that goes beyond the 5-tuple (protocol, IP addresses andports) used today to include user credentials of both end-points,application integrity, and even ACLs or labels for data to betransmitted over the network. The framework is robust enough toallow the firewall administrators to require hardware attestationat the end-host and negotiate the use of encryption for the datachannel based on the level of security required. Finally, ourapproach performs late-binding between the signaling channel andthe data routing path whereby applications pick transport addressesand firewalls are configured to accept data packets for thoseaddresses (and enforce the policy negotiated) after the connectionrequest has been granted. Effectively, our approach largely turnsoff connectivity in the Internet, and then selectively enables onlythose connections that are deemed necessary for performing atask.
From the users' and administrators' perspective, ourarchitecture secures the Internet by giving users control ofconnectivity to and from their applications, and networkadministrators control of what users and applications can use thenetwork infrastructure and in what manner. Using the primitivesprovided, a network administrator can restrict useralice@cs.cornell.edu using mail-reader microsoft.outlook to be ableto connect only to the department mail-server microsoft.exchangebeing run by admin@cs.cornell.edu, and nothing else. Meanwhile,user Alice can restrict any application on her computer that readdata labeled alice.confidential to be able to contact only thoseother applications that are also being run by Alice herself andrequire that the connection be encrypted. While the first ruleprevents a zombie mail-reader from abusing the network by spewingspam or worms, the second rule prevents a trojan from stealingAlice's passwords.
While the idea of securely architecting the Internet by havingfirewalls turn it off is interesting and heretical to some extent,the key technical challenge lies in defining new abstractions andservices that allow legitimate applications to use the network. Tothat end, there are many open questions. First, what abstractionsand guarantees should the network provide to the OS? What shouldthe OS provide to the network? For example, the network (with helpfrom the remote OS) could attest to the local application that aparticular TCP connection terminates at a particular applicationbeing run by a particular user, is encrypted and secure, and hasguaranteed QoS at the gateway. Second, how rich do the naming andconnection semantics need to be? Strict policy on IP addresses andports can prevent today's worms in client-server applications butare ineffective for securing P2P applications where both end-pointsuse dynamic IPs and ports. Using application names and restrictingconnectivity to a small world of trusted users does slowworm-propagation, but true containment requires hardwareattestation. Third, does transferring the security problems fromthe Internet to the signaling domain, as we suggest, really solvethem? The signaling domain is much simpler and provides a frameworkfor negotiating trust before a connection is established, but itdoes require a trusted firewall. We do not have all the answersyet, but we have opened up an interesting design space for thenext-generation secure-Internet architecture.