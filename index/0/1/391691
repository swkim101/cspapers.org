This work describes implementation of a mark-sweep garbage collector (GC) for shared-memory machines and reports its performance. It is a simple 'parallel' collector in which all processors cooperatively traverse objects in the global shared heap. The collector stops the application program during a collection. To achieve scalability, collector performs dynamic load balancing, which exchanges objects to be scanned between processors. However, we observed that the implementation detail affects the performance heavily. For example, large objects, which become a source of significant load imbalance are split into small pieces. With all careful implementation, we achieved 28-fold speed-up on 64 processors.