Recent breakthrough in compressed indexing data structures has reduced the space for indexing a text (or a collection of texts) of length <i>n</i> from <i>O</i>(<i>n</i> log <i>n</i>) bits to <i>O</i>(<i>n</i>) bits, while allowing very efficient pattern matching [10, 13]. Yet the compressed nature of such indices also makes them difficult to update dynamically. This paper presents the first <i>O</i>(<i>n</i>)-bit representation of a suffix tree for a dynamic collection of texts whose total length is <i>n</i>, which supports insertion and deletion of a text <i>T</i> in <i>O</i>(|<i>T</i> | log<sup>2</sup> <i>n</i>) time, as well as all suffix tree traversal operations, including forward and backward suffix links. This work can be regarded as a generalization of the compressed representation of static texts. Our new suffix tree representation serves as a core part in a compact solution for the dynamic dictionary matching problem, i.e., providing an <i>O</i>(<i>d</i>)-bit data structure for a dynamic collection of patterns of total length <i>d</i> that can support the dictionary matching query efficiently. When compared with the <i>O</i>(<i>d</i> log <i>d</i>)-bit suffix tree based solution of Amir <i>et al.</i>, the compact solution increases the query time by roughly a factor of log <i>d</i> only. In the study of the above results, we also derive the first <i>O</i>(<i>n</i>)-bit representation for maintaining <i>n</i> pairs of balanced parentheses in <i>O</i>(log <i>n</i>/log log <i>n</i>) time per operation, matching the time complexity of the previous <i>O</i>(<i>n</i> log <i>n</i>)-bit solution.