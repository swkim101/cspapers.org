It is shown that the problem of maintaining the topological order of the nodes of a directed acyclic graph while inserting <i>m</i> edges can be solved in <i>O</i>(min{<i>m</i><sup>3/2 log <i>n m</i>3/3</sup> + <i>n</i><sup>2</sup> log <i>n</i>}) time, an improvement over the best known result of <i>O</i>(<i>mn</i>). In addition, we analyze the complexity of the same algorithm with respect to the treewidth <i>k</i> of the underlying undirected graph. We show that the algorithm runs in time <i>O</i>(<i>mk</i> log<sup>2</sup> <i>n</i>) for general <i>k</i> and that it can be implemented to run in <i>O</i>(<i>n</i> log <i>n</i>) time on trees, which is optimal. If the input contains cycles, the algorithm detects this.