This paper investigates the use of logic to reason about partially specified data structures. Our original motivation is in the use in computational linguistics of so-called jealure structures. These structures, however, have been used, especially by Ait-Kaci and Nasr [AIT86], to characterize partially defined concrete data types in programming languages. Also, feature structures can be used to impose purely syntactic constraints on programs to ensure welltypedness as in Milner [MIL78]. In fact, we can characterize Milner’s decision procedure for syntactic well-typedness as an instance of the satisfiability problem in our logic. Feature structures have been used in computational linguistics to enforce global dependencies between constituents, such as number agreement between subject and predicate. Similar phenomena, such as type agreement and data initialisation, occur in programming languages. The main difference between previous systems, such as Milner’s, and ours is that by being able to express the notion of type checking in the linguistic formalism, we can obtain eoundness results of the form: If a string is a syntactically correct program, then it is semantically well-typed. We believe that expressing so-called static semantics directly in a syntactical formalism is a superior way of viewing compile-time constraints on programs. (The need for static semantics may have been a result of too great a dependence on the formalism of context-free grammars.) Kasper and Rounds [KAS86a] develop a logic to describe records and variant records. (The problem of type consistency is the same as the aatisfiability problem in thier logic.) The primary contribution of this paper is an extension of the logic to express implication and negation. This extension makes a novel use of intuitionistic techniques. We present a sound and complete proof system for our logic, and show the provability and satisliability problems to be PSPACEcomplete. 2 Feature Structures in Programming and Natural Languages