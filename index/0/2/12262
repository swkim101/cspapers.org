We present a linear-time algorithm that given a flowgraph <i>G</i> = (<i>V,A,r</i>) and a tree <i>T</i>, checks whether <i>T</i> is the dominator tree of <i>G</i>. Also we prove that there exist two spanning trees of <i>G</i>, <i>T</i><inf>1</inf> and <i>T</i><inf>2</inf>, such that for any vertex <i><u>v</u></i> the paths from <i>r</i> to <i><u>v</u></i> in <i>T</i><inf>1</inf> and <i>T</i><inf>2</inf> intersect only at the vertices that dominate <i><u>v</u></i>. The proof is constructive and our algorithm can build the two spanning trees in linear time. Simpler versions of our two algorithms run in <i>O</i>(<i>mÎ±</i>(<i>m, n</i>))-time, where <i>n</i> is the number of vertices and <i>m</i> is the number of arcs in <i>G</i>. The existence of such two spanning trees implies that we can order the calculations of the iterative algorithm for finding dominators, proposed by Allen and Cocke [2], so that it builds the dominator tree in a single iteration.