High-level language computers (HLLC) have attracted interest in the architectural and programming community during the last 15 years; proposals have been made for machines directed towards the execution of various languages such as ALGOL,<supscrpt>1,2</supscrpt> APL,<supscrpt>3,4,5</supscrpt> BASIC,<supscrpt>6,7</supscrpt> COBOL,<supscrpt>8,9</supscrpt> FORTRAN,<supscrpt>10,ll</supscrpt> LISP,<supscrpt>12,13</supscrpt> PASCAL,<supscrpt>14</supscrpt> PL/I,<supscrpt>15,16,17</supscrpt> SNOBOL,<supscrpt>18,19</supscrpt> and a host of specialized languages. Though numerous designs have been proposed, only a handful of high-level language computers have actually been implemented.<supscrpt>4,7,9,20,21</supscrpt> In examining the goals and successes of high-level language computers, the authors have found that most designs suffer from fundamental problems stemming from a misunderstanding of the issues involved in the design, use, and implementation of cost-effective computer systems. It is the intent of this paper to identify and discuss several issues applicable to high-level language computer architecture, to provide a more concrete definition of high-level language computers, and to suggest a direction for high-level language computer architectures of the future.