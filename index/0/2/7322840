Hardware-software co-design is not a new problem; systems with signi cant portions of hardware and software have been designed for decades. Similarly, system design is not new but the prospect of Electronic System Design Automation (ESDA) has received a great deal of recent attention. Several factors have contributed to the growing importance of these areas but two are particularly relevant: Computer-aided design can claim some modest success in responding to the productivity challenge posed by exponential improvements in processing technology. At the same time, time-to-market challenges for system designers require that complex systems of hardware and software be designed and deployed in 18 months. As a result the formerly distant relatives of hardware and software development have now been brought together and the importance of taking a system perspective has been stressed. This abstract will very brie y identify the problems associated with hardware-software co-design and ESDA and will attempt to identify the most promising of the current responses to these problems. To aid in identifying these problems it may be useful to understand two di erent trends in the evolution of design automation. The rst trend is the familiar raising the level of abstraction, which we associate with ESDA, and this will be treated in Section 2 as well as in [4]. The second trend is broadening design coverage, which we associate with hardware-software co-design, and this will be the focus of Section 3 as well as [6].