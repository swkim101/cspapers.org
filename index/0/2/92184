1 INTRODUCTION Many different approaches to teaching introductory courses in computer science have been explored in the last few years. Of these, most aim to resolve the conundrum of how to teach abstraction skills in the face of student difficulties with learning to write programs. CS 1 courses often carry the added burden of trying to present a more accurate account of what computer science is like. To this end, special emphasis is now placed on topics such as code reuse. Even more new problems arise when an object-oriented approach is adopted for use in introductory classes. What are the appropriate abstractions to teach? What are the best vehicles for teaching them? This paper advocates an approach to teaching object-oriented (00) introductory computer science courses that is based on programming patterns. Section 2 examines the problem of abstraction versus detail in introductory courses and motivates the use of patterns. In Section 3, the pattern approach is described. That section outlines the approach as it has evolved over three years of procedural programming instruction and begins to develop the idea of patterns for teaching 00-based courses. Section 4 relates this approach to other work on teaching introductory courses. Finally, Section 5 presents future plans for developing and refining the approach. The goals for most first courses in computing are difficult to achieve. Traditionally, CS 1 aimed to teach the programming skills necessary to complete a program in computer science. Increasingly, this course is also being used to introduce students to other topics such as:. '<breadth " issues of computing as a discipline. software engineering issues such as reuse In most cases, these new goals create a demand for teaching at a higher level of abstraction in CS 1. This demand is significant in its own right, but it is made even more problematic by the desire to still have students develop a reasonable level of programming skdl. The conflict between abstractions and the details of programming are present even in courses that focus only on teaching programming skills. Such courses have typically presented a top-down approach to program development. Yet Rist [15] found that students still tended to reason backward from the program goal through program code tlo a solution plan. This tendency arose because they Iaclked appropriate high-level schema for solving the problem. However, when students did have relevant schema available, Rist found that students could and did reason forward â€¦