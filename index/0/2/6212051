We obtain a new fully dynamic algorithm for the reachability problem in directed graphs. Our algorithm has an amortized update time of <i>O</i>(<i>m</i>+<i>n</i> log <i>n</i>) and a worst-case query time of <i>O</i>(<i>n</i>), where <i>m</i> is the current number of edges in the graph, and <i>n</i> is the number of vertices in the graph. Each update operation either inserts a set of edges that touch the same vertex, or deletes an arbitrary set of edges. The algorithm is deterministic and uses fairly simple data structures. This is the first algorithm that breaks the <i>O</i>(<i>n</i><sup>2</sup>) update barrier for all graphs with <i>o</i>(<i>n</i><sup>2</sup>) edges.One of the ingredients used by this new algorithm may be interesting in its own right. It is a new dynamic algorithm for <i>strong</i> connectivity in directed graphs with an interesting persistency property. Each insert operation creates a new version of the graph. A delete operation deletes edges from emphall versions. Strong connectivity queries can be made on each version of the graph. The algorithm handles each update in <i>O</i>(<i>mα</i>(<i>m</i>,<i>n</i>)) amortized time, and each query in <i>O</i>(1) time, where <i>α</i>(<i>m</i>,<i>n</i>) is a functional inverse of Ackermann's function appearing in the analysis of the union-find data structure. Note that the update time of <i>O</i>(<i>mα</i>(<i>m</i>,<i>n</i>)), in case of a delete operation, is the time needed for updating <i>all</i> versions of the graph.