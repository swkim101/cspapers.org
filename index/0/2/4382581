One primary difference between transactions in an engineering design environment and those in conventional business applications is that an engineering transaction typically lasts a much longer time. Existing proposals for supporting the long-lived engineering transactions are all based on the public/private database architecture, in which a transaction checks out design objects from the public database, modifies them, and checks them into the public database for use by other transactions. However, the design environment which these proposals model is a very rigid one which does not allow a team of designers to complete a complex design involving numerous design objects by passing incomplete objects back and forth among them in a controlled manner. In this paper we present a model of engineering transactions which attempts to resolve this shortcoming as well as satisfying the constraints imposed by the engineering design environment. The model augments existing models by refining the notion of checkout environment which a transaction sees and coupling it with the notion of nested transactions. The model is then extended to a practical mechanism for supporting a complex engineering design environment by imposing the view that a long-lived engineering transaction is really a sequence of conventional short-lived transactions.