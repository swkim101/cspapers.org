A planning systemâ€™s performance is biased due to many factors related to its design. For example, the representation, decision points, search control, memory usage, heuristic guidance, and stopping criteria all can have implications for performance. Problem instance characteristics also impact system performance. The interaction of the design choices with the problem instance makes it difficult to select the most efficient system from the array of choices. It seems natural to apply learning to the algorithm selection problem of allocating computational resources among a portfolio of planners that may have complementing (or competing) search technologies. Such selection is called the portfolio strategy. Our working thesis is that we can study a portfolio of planning systems for clues about why one algorithm is favored over another. A secondary thesis is that we can uncover algorithmic and problem structure dependencies by examining algorithm performance on specific instances. Our research analyzes performance of planning systems by: