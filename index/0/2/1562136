Finding minimum circuits in graphs and digraphs is discussed. An almost minimum circuit is a circuit which may have only one edge more than the minimum. An <italic>0(n<supscrpt>2</supscrpt>)</italic> algorithm is presented to find an almost minimum circuit. The straightforward algorithm for finding a minimum circuit has an <italic>0(ne)</italic> behavior. It is refined to yield an <italic>0(n<supscrpt>2</supscrpt>)</italic> average time algorithm. An alternative method is to reduce the problem of finding a minimum circuit to that of finding a triangle in an auxiliary graph. Three methods for finding a triangle in a graph are presented. The first has an <italic>0(e<supscrpt>3/2</supscrpt>)</italic> worst case bound (<italic>(n)</italic> for planar graphs); the second takes <italic>0(n<supscrpt>5/3</supscrpt>)</italic> time on the average; the third has an <italic>0(n<supscrpt>log7</supscrpt>)</italic> worst case behavior. For digraphs, recent results of Bloniarz, Fisher and Meyer are used to obtain an algorithm with <italic>0(n<supscrpt>2</supscrpt>logn)</italic> average behavior.