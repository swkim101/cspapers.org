This tutorial describes current Field programmable Gate Array (FPGA) technology from three directions: programming technology, functional block capabilities, and routing architectures. It then sketches FPGA CAD issues: logic synthesis for FPGA’s, placement and routing, and issues in the design of new FPGA’s. 1 Technology Taxonomy FPGA’s constitute a radical new direction in microelectronics. This is because they significantly reduce the overhead involved in designing and producing new logic circuits. Today’s FPGA’s cart be viewed as an evolution of PAL’s where size is increased by an order of magnitude, or a refinement of mask-programmed gate arrays, where the reprogramming time and cmt are drastically reduced. To the CAD professional, FPGA’s represent a new challenge what is the best way to exploit this new technology? Users choose a part based on external metrics such as speed, density, cost and CAD effectiveness for their particular application. Suppliers try to optimize these across many applications by making technology and architectural tradeoffs. The result is a wide spectrum of features: anti-fuse versus reprogrammable configuration, block-structured versus channel-structured routing, and lookup table (LUT) versus multiplexer versus sum-of-products logic. Generally speaking, the technology and architecture of the routing fabric is the most important factor in determining the effectiveness of an FPGA for a particular application. FPGA routing enables (almost) arbitrary connection among logic blocks, but at the cost of tying up more area and incurring more delay than present in a mask programmed part. Likewise, the logic architectures of FPGA’s are larger and slower than mask defined gates, since their functionality must be programmable. But in comparison to the routing fabric, their delays tend to be more predictable and less of a limiting factor. 2 Basic Technology Issues Anti-fuse parts, typified by the Actel Act1 and Act2 architectures [2], use special processing steps to fabricate insulating layers between the routing wires. These anti-fuses have relatively low resistance when turned on and are relatively compact. Unfortunately, they require high voltages to activate, and large isolation tmmsistors are usually required to protect logic from the programming voltages. Their chsnnelled architecture is relatively friendly to CAD tools and has advantages for predicting routing delays, since almost all designs that can be fit onto the chip can be routed within a limit of 2 or 3 anti-fuses in series. However, the lower resistance of the anti-fuses comes at the cost of reconfigurability. One alternative to anti-fuses is SRAM-based programmable interconnection points (PIP’stm ). These consist of an SRAM cell conuolling one or more FET’s. When the SRAM is set, the FET is turned on, and the application signal can propagate from one node to another. Reconfigurable parts are attractive for many reasons. Most obviously, they can be used over and over again on the lab bench to debug and/or refine a design, (which is important since many projects die before even the first copy is produced). Also. even after the design is working, many low volume products choose to include reconfigurable FPGA’s in their production versions. This is because features can be added, errors corrected, and interfaces modernized with little or no cost in the field. Such changes can be implemented by shipping a new ROM, floppy, or even by modem, depending on the application. Reconfigurable parts are typified the Xilinx 3000 and 4000 series [13]. These architectures consist of a set of Configurable Logic Blocks (CLB’s ‘m) connected to routing wires, which are in turn connected to other routing wires by “switch boxes.” Typical pwts would have from 60 to 320 CLB ‘s, and an equal number of switch boxes. A two-dimensional array of CLB’s and switchbox blocks define the routing architecture. Because the routing is SRAM based, each PIP is several times larger than art anti-fuse. It is therefore essential to get the most routing functionali~ out of each PIP. This is done by increasing the complexity of the routing fabric, and by tolerating a greater number of PIP’s in series. (On these chips, “maze routers” are often used, since they can handle arbitrary node-to-node interconnections.) The result is a system that can have high speed for some application nets, but not all. A complex, timing-directed CAD system is needed to make best use of these architectures. Reconfigurable parts can also be based on EPROM technology, as typified by the Lattice ispLSI parts [8]. In some ways, these parts resemble a collection of PAL’s connected with a pool of onchip routing. In a PAL, the logic functionality is intermingled with the routing in an array of minterms.