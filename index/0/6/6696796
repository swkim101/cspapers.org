We present several new algorithms for detecting short fixed length cycles in digraphs. The new algorithms utilize fast rectangular matrix multiplication algorithms together with a dynamic programming approach similar to the one used in the solution of the classical chain matrix product problem. The new algorithms are instantiations of a generic algorithm that we present for finding a directed <i>C</i><inf><i>k</i></inf>, i.e., a directed cycle of length <i>k</i>, in a digraph, for any fixed <i>k</i> ≥ 3. This algorithm partitions the prospective <i>C</i><inf><i>k</i></inf>'s in the input digraph <i>G</i> = (<i>V,E</i>) into <i>O</i>(log<sup>k</sup> <i>V</i>) classes, according to the degrees of their vertices. For each cycle class we determine, in <i>O</i>(<i>E</i><sup><i>ck</i></sup> log <i>V</i>) time, whether G contains a <i>C</i><inf><i>k</i></inf> from that class, where <i>c</i><inf><i>k</i></inf> = <i>c</i><inf><i>k</i></inf>(ω) is a constant that depends only on !, the exponent of square matrix multiplication. The search for cycles from a given class is guided by the solution of a small dynamic programming problem. The total running time of the obtained deterministic algorithm is therefore <i>O</i>(<i>E</i><sup><i>ck</i></sup> log<sup><i>k</i>+1</sup> <i>V</i>).For <i>C</i><inf>3</inf>, we get <i>c</i><inf>3</inf> = 2ω/(ω + 1) < 1.41 where ω < 2.376 is the exponent of square matrix multiplication. This coincides with an existing algorithm of [AYZ97].For <i>C</i><inf>4</inf> we get <i>c</i><inf>4</inf> = (4ω - 1)/(2ω + 1) < 1.48. We can dispense, in this case, of the polylogarithmic factor and get an <i>O</i>(<i>E</i><sup>(4ω-1)/(2ω+1)</sup>) = <i>o</i>(<i>E</i><sup>1.48</sup>) time algorithm. This improves upon an O(E3/2) time algorithm of [AYZ97].For <i>C</i><inf>5</inf> we get <i>c</i><inf>5</inf> = 3ω/(ω + 2) < 1.63. The obtained running time of <i>O</i>(<i>E</i>3ω/(ω+2) log6 <i>V</i>) = <i>o</i>(<i>E</i><sup>1.63</sup>) improves upon an <i>O</i>(<i>E</i><sup>5/3</sup>) time algorithm of [AYZ97].Determining <i>c</i><inf><i>k</i></inf> for <i>k</i> ≥ 6 is a difficult task. We conjecture that <i>c</i><inf><i>k</i></inf> = (<i>k</i> + 1)ω/(2ω + <i>k</i> - 1), for every odd <i>k</i>. The values of <i>c</i><inf><i>k</i></inf> for even <i>k</i> ≥ 6 seem to exhibit a much more complicated dependence on ω.