Previous approaches to software reuse have been largely from a library of software components are appropriate ineffective because designers have difficulty locating a reuse candidates and 2) understanding the ramifications software module to reuse and then understanding the on the rest of a software system of choosing one of the ramifications of this new software module on the other reuse candidates. We address both these issues by exparts of a software system. We take the view that tending our Design Memory approach to the software software modules need to be represented in a reuse lirealm. brary using a high-level behavioral description language that can support Artificial Intelligence reasoning techniques such as classification and constraint propagation. Given this information, we then provide software designers with a knowledge-based interface for interacting with this software reuse library. Specifically, we employ a Design Memory approach for presenting relevant views of the reuse library to the designer. Our research prototype, Comet, uses this approach to locate candidates for software reuse and to compute their ramifications. The goal of this work is a software design environment supporting all stages of design, from the initial exploratory phases through to final implementation.