We propose a variant of the Hierarchical Constraint Logic Programming (HCLP) scheme of Borning, Wilson, and others. We consider compositionality and incrementality in Constraint Logic Programming, introduce HCLP, and present Wilson's proof that it is non-compositional. We define a scheme for composing together solutions to individual hierarchies and show that hierarchy composition can be expressed very simply using filtering functions over bags (multisets); we present some properties of these functions, and define and explain an alternative to bag intersection which is also used in our scheme. We present an example involving three strength levels and show that we can achieve a close approximation to the solutions produced by standard HCLP. 1 Introduction The HCLP (Hierarchical Constraint Logic Programming) scheme [Borning et al, 1989; Wilson and Borning, 1993] greatly extends the expressibility of the general CLP scheme [jaffar and Lassez, 1987]. There is also related work by Satoh [1990]. A semantics has been defined for HCLP [Wilson and Borning, 1989] and some instances of it have been implemented [Menezes et a/., 1993]. However, the semantics is not as natural as one might hope, and the implementations are inherently less efficient than those of CLP. We believe that these two issues may be related, and suggest that an equally expressive scheme which gives similar but not identical answers may go some way to overcoming both of them. Therefore we propose a weakening of the semantics of HCLP, in which the results of composing solutions to individual hierarchies approximate the solutions that would be obtained from combining the programs and starting from scratch. Our semantics are adequate for some of the standard examples in the literature. They are definitely not sufficient to solve some of the other examples exactly, but our approximations are very reasonable. 2 Incrementality and compositionality An important difference between logic programming languages and, say, theorem provers, is that the former are more efficient; expressibility and completeness are traded-off against efficiency. Standard HCLP is beautifully expressive, but the efficiency of its implementations may be poor, and its semantics lacks certain desirable properties. Our proposal in this paper involves tradirig-off completeness to gain efficiency and more tractable semantics. In constraint logic programming, efficiency is discussed with reference to 'incrementality', and semantics can be discussed with reference to compositionality, which is what we will do in the rest of this section. Compositionality is a desirable property for a system to have because â€¦