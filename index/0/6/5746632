We present static cache-oblivious dictionary structures for strings which provide analogues of tries and suffix trees in the cache-oblivious model. Our construction takes as input either a set of strings to store, a single string for which all suffixes are to be stored, a trie, a compressed trie, or a suffix tree, and creates a cache-oblivious data structure which performs prefix queries in <i>O</i>(log<inf><i>B</i></inf><i>n</i> + |<i>P</i>|/<i>B</i>) I/Os, where <i>n</i> is the number of leaves in the trie, <i>P</i> is the query string, and <i>B</i> is the block size. This query cost is optimal for unbounded alphabets. The data structure uses linear space.