This paper presents and describes a pattern recognition program with a relatively simple and general basic structure upon which has been su­ perimposed a rather wide variety of techniques for learning, or self-organization. The program at­ tempts to generalize n-tuple approaches to pattern recognition, in which an n-tuple is a set of ind i ­ vidual cells or small pieces of patterns, and each n-tuple is said to characterize an input pattern when these pieces match i t , as specif ied. The program allows n-tuples to match when only some of their parts match, and it allows these parts to match even though they are not precisely positioned (See Uhr, 1969b, for some simple example programs). It further learns, in a variety of ways: It searches for good weights on its characterizers' implications, byre-weight­ ing as a function of feedback. It generates and discovers new characterizers (and can therefore begin with no characterizers at a l l ) , and discards characterizers that prove to be poor (See Uhr and Vossler, 1961, and Prather and Uhr, 1964). It also uses a set of characterizers of characterizers, to search for good parameter values that newlygenerated characterizers should have. A detailed f low-chartl ike "precis" descrip­ tion of the program is given, along with an ac­ tual l i s t ing . It is thus possible to examine ex­ actly what the program does, and how it does i t , and therefore to see how a wide variety of learning mechanisms have been implemented in a single pattern recognition program. But be­ cause it was coded in a "highlevel" patternmatching and l ist-processing language the pro­ gram runs too slowly for extensive tests to be practicable. Therefore only a brief l ist ing of output is given, to show that the program, works and begins to learn. Descriptors: Learning, self-organization, induc­ t ion , discovery, pattern recognition, learning to learn, n-tuple recognition, characterizing char­ acterizers.