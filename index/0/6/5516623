This paper describes the development of an architecture and implementation of a graphical tracing system for the parallel logic programming language PARLOG. Novel features of the architecture include a graphical execution model of PARLOG; a range of representational techniques that allow the user a choice of perspective and granularity of analysis; and ongoing work on graphical tools that provide user-defined visualisations of their programs, either before the program is run, or afterwards by demonstration from a textual trace. The aims of the architecture are threefold: (1) to aid program construction and debugging by providing an informative graphical trace of the program's execution; (2) to provide the user with a choice of representational techniques, at a preferred level of granularity; and (3) to allow users to define their own visualisations, that more truly map onto their conception of the problem, and which support the way they wish to view the execution information.