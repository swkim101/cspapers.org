We propose a massively parallel programming language, called \V," which would minimize the di(cid:14)culties in writing massively parallel programs. To abstract away the timing problem in writing parallel programs, we based our work on a data(cid:13)ow-based functional programming language. Then, we extended the base language with an object-based abstraction, called \agent," to write parallel entities which contain their own states and can communicate with each other. In addition to connecting agents explicitly, an abstraction of ensembles of agents on a prede(cid:12)ned topology description, called \(cid:12)eld," is introduced in order to write a massively parallel program which naturally re(cid:13)ects the structure of a problem. In this paper, we also discuss the implementation of V, including a preliminary evaluation, on a commercially available distributed-memory parallel machine, Fujitsu AP1000. Although it is easy to extract parallelism at various levels, including (cid:12)ne-grained parallelism, from V programs, it is di(cid:14)cult to run V programs e(cid:14)ciently on stock parallel machines. Nevertheless, we tried to implement V on a stock parallel machine, since our aim is to develop a language that would be practical, not only on special (cid:12)ne-grained machines, but also stock machines.