There is a variety of algorithms out there that speed up rendering of terrain-data, varying from simple quadtree based frustum-culling of unseen terrain chunks to using occluder sets to using (continuous) Level of Detail. All of these techniques serve the purpose of reducing the amount of triangles to be pushed through the rendering pipeline. Many terrain rendering algorithms use a combination of several of these techniques to even further speed up rendering. Famous examples are the ROAM algorithm [3], Lindstrom et al. SIGGRAPH ’96 paper on terrain rendering [1], and NDL’s approach to terrain rendering to be used in real-time games [2]. Most of these algorithms were invented (long) before hardware rendering became the industry’s standard, and therefor may not be suitable to be used in conjunction with 3d hardware rendering anymore. Therefor, new algorithms must be found that will give the best results when used together with 3d hardware rendering. Because 3d hardware is able to process and render a large amount of triangles per frame, the algorithm can resort to more conservative culling methods, thereby not necessarily delivering the ‘perfect set’ of render-data, but pushing as much triangles through the pipeline as hardware can handle, with the least amount of CPU overhead. I have come up with a method which complies to the above said and as far as I know has not been used before. The algorithm has been implemented as part of the E-mersion project. This paper will give a full description of the algorithm.