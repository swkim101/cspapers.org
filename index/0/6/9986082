The uni ed modeling language UML developed under the coordination of the Object Management Group OMG is one of the most important stan dards for the speci cation and design of object oriented systems This stan dard is currently tuned for real time applications in the form of a new proposal UML for Real Time UML RT by Rational Software Corporation and Ob jecTime Limited Because of the importance of UML RT we are investigating its formal foundation in a joint project between ObjecTime Limited Technis che Universit at M unchen and the University of Bucharest In this paper we present part of this foundation namely the theory of ow graphs Introduction The speci cation and design of an interactive system is a complex task that has to work out data behavior intercommunication architecture and distribution aspects of the modeled system Moreover the speci cation has to assure the successful com munication between the customer and the software expert In order to ful ll these requirements an UML RT speci cation for an interactive system is a combined visual textual speci cation called a capsule class which is built hierarchically as shown in Figure left A capsule class has associated two visual speci cations a structure speci cation and a behavior speci cation The structure speci cation gives the architecture of the capsule in terms of other capsules and connectors or duplex channels between capsules The connectors are typed i e they have associated protocol classes de n ing the messages allowed to ow along the connectors The types of the messages and therefore the protocols themselves are de ned in terms of data classes or di rectly in C or RPL The ow of the messages along the channels is controlled by the run time system The behavior of a capsule is controlled by a state transition diagram The state variables and the functions occurring in this diagram are also de ned in terms of data classes C or RPL Moreover the detailed description of the actions as sociated to a transition are given in C or in RPL Hence the UML RT visual speci cations build on the top of a sequential object oriented language Special ac tions like sending a message or setting a timer are performed by calling the run time system Hence UML RT also builds upon a communication and synchronization model Since a sender may always send a message this is an asynchronous commu nication model behavior structure has controls uses uses models implemented component model models models structure-model behavior-model state-model interaction-graphs flow-graphs has controls uses c++ or rpl uses uses uses uses uses encoded embedded data-class run-time system capsule-class Figure The layers of UML RT The semantics we currently de ne for UML RT in a joint project between Objec Time Limited Technische Universit at M unchen and the University of Bucharest follows a similar hierarchy as shown in Figure right It consists of a structure model a behavior model and a state model Each model interprets an associated interaction graph These graphs closely resemble the UML RT visual speci cations However they are completely formalized and this makes them an ideal candidate for the semantics The structure model de nes the structure of a capsule class in terms of other cap sules and connectors between these capsules It also de nes the synchronization between capsules The behavior model de nes the behavior of a capsule in terms of hierarchical states and transitions between these states The state model is the equivalent of the data classes and the object oriented languages It allows us to de ne arbitrary data types and functions processing these types Hence it is used both by the structure and the behavior models In contrast to UML RT this is also a model for interaction graphs Hence using our semantics one can make UML RT completely visual and independent from any particular programming language RPL Rapid Prototyping Language is a very simple object oriented language based on Smalltalk Finally interaction graphs are implemented by ow graphs In contrast to interac tion graphs which are appropriate for high level design the later ones are low level graphs which make causality explicit Because of obvious space limitation in this paper we concentrate on the theory of ow graphs This theory is characterized by three elements a visual notation a textual notation and a calculus The visual notation consists of a set of graph construction primitives presented in a visual form They de ne the user interface to an abstract editor for diagrams The textual notation consists of the same set of graph construction primitives presented in a textual form They de ne an abstract internal representation of the above primitives The textual form is automatically generated from the visual form and it is usually hidden from the user It can be roughly understood as the program that actually runs on the computer Finally the calculus is the engine that allows us to transform a diagram into another diagram that has the same meaning but optimizes time and or space Moreover it determines whether two diagrams are equivalent The calculus consists of a set of equations which identify equal graphs This immediately allows us to compare diagrams Orienting the equations e g from left to right one obtains a rewriting calculus i e an interpreter The rest of the paper is organized as follows In Section we introduce the syntax of ow graphs In Section we present the calculus of ow graphs In Section we present a non trivial ow graphs transformation by using the above calculus Finally in Section we draw some conclusions Flow Graphs Syntax A hierarchical ow graph consists of a set of nodes connected by a set of directed arcs In the following we treat the syntax of ow graphs and their axioms Nodes Consider the graph shown in Figure left consisting of two nodes A and B and an arrow m from A to B Regarding A and B as sets or types m can be regarded as a function or transition relation mapping elements of A into elements of B The corresponding textual notation is then m A B m A B A B m Figure Alternative representation of nodes and arrows Since m turns out to be the most important element of the graph one can change the roles of nodes and arrows and obtain the graph shown in Figure right This graph has a very intuitive computational interpretation m is a computation unit receiving on the input port messages of type A from the environment and sending along the output port messages of type B to the environment Hence this notation is well suited for the description of open systems These are systems that are connected to the environment In the following we shall use only this notation For example the right hand side notation of Figure is used in UML RT both in the architecture and in the behavior speci cations as shown in Figure (A , B ) + A B m m Figure Actors and states in UML RT In the architecture speci cation m is a capsule receiving messages of type A and sending messages of type B along a duplex port The tuple A B is said to be the protocol de ning the input and the output messages owing along the port In the behavior speci cation m is an extended state with an entry point A of an incoming transition and an exit point B of an outgoing transition Graph Primitives As shown in Figure we consider three operators on nodes sequential composition visual attachment and feedback