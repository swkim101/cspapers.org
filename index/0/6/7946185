We suggest a new methodology for “result checking” that enables us to extend the notion of Blum’s program result checking to the on-line checking of cryptographic functions. In our model, the checker not only needs to be assured of the correctness of the result but the owner of the program needs to be sure not to give away anything but the requested result on the (authorized) input. The existing approaches for program result checking of numerical problems often ask the program a number of extra queries (different from the actual input). In the case of cryptographic functions, this may be in contradiction with the security requirement of the program owner. Additional queries, in fact, may be used to gain unauthorized advantage (for example, imagine the implications of the on-line checking of a decryption device that requires the decryption ofextra ciphertexts). In [Blum88], the notion of a simple checlcer was introduced where, for the purpose of efficiency, extra queries are not allowed. In our model, we do allow extra queries, but only when the response does not carry ‘(knowledge,” (namely computational advantage). We use a new “witnessbased” approach and give constructions that apply to various cryptographic scenarios while making sure that the checker/program interaction releases no extra knowledge. It is based on the fact that with certain homomorphic functions, having a witness which is an initial correct value will enable checking the entire function domain, and the fact that having a random value of a cryptographic function typically does not reduce its security. The notion has various applications. A particularly use* Sandla National Labs Albuquerque, NM 87185; yair@cssandia.gov; This work was performed under U.S. Department of Energy contract number DE-AC04-76AL85000 tSandla National Labs Albuquerque, NM 87185, psgemme@cs.sandla. gov, This work was performed under US Department of Energy contract number DE-AC04-76AL85000 $IBM T J. Watson Research Center, Yorktown Heights, NY; moti@watson. ibm com STOC’96, Philadelphia PA, USA O-89791 -785-5J9610S MOTI YUNG $ ful application is achieving “efficient robust function sharing”, a method by which the power to apply a cryptographic function (e.g., RSA decryption / signature) is shared among multiple trustees. As long as a quorum of the trustees is not corrupted and is available, we can apply the function on the input parameters while maintaining the security of the function. With robustness we are able to tolerate and identify misbehaving trust ees, both with efficiency and on-line, when computing a function value.