The Venus Rule Language introduced a declarative basis for structured rule-based programming (as opposed to procedural encapsulation). The method is closely related to the nested transaction model for concurrency control and otherwise the language has been designed to serve as the basis of both main-memory and hard (or expert) activedatabase systems. We present a quantitative evaluation of the impact on development costs of the Venus language on rule-based programs. The basis of the study is a reimplementation of ALEXSYS, an active-database program originally developed in 0PS5 and currently in use in the financial securities industry. The measurements indicate substantially improved code, suggesting substantially reduced development and life-cycle costs.