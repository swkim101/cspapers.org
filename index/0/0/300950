There are a number of programming languages and tools available to educators for teaching programming to undergraduate computer science students. Although efforts have been made to integrate these languages and tools into programming environments, these environments generally do not have all of the ingredients that would make them useful at all levels of a typical undergraduate curriculum. Current technology used in most undergraduate courses is suitable for teaching students how to code in a particular programming language. Software development tools for activities other than coding such as requirements analysis, design, maintenance, and so on, are not provided. In addition, most programming languages in current use cannot be used in both beginner and advanced courses. We describe a “curriculum-cycle” environment for teaching programming, called Object-Oriented Turing (OOT), and elaborate on the pedagogical experience of using 00T at all levels of our university’s undergraduate curriculum.