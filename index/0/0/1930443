We have been developing a language in which you can give structured descriptions of theories. Why are we interested in theories? Because you need a theory to specify a problem before you can develop a program to solve it, whether you intend to develop the program intuitively or to synthesise it mechanically by rule. It only makes sense to say 'We want a program which can invert a matrix' in the context of some theory about matrices and the operations on them such as multiplication. Why are we interested in structured descriptions of theories? Because people find it very hard to understand anything at all unless they have a well-structured description of it; as for machines, twenty years work in Artificial Intelligence has taught us to beware of letting them loose on an unstructured description. What would an unstructured description of a theory be like? Imagine 217 axioms in Predicate Calculus telling you how to find your way around SRI, or 217 semantic equations describing the language Klugegol78. Minsky (1975) protests about 'attempts to represent knowledge as collections of separate simple fragments'. No-one could approve of such monsters as these. Now consider the analogous situation with programs. They are structured by statements, iterations and procedures. For large programs these have proved inadequate (217 LISP functions!), and SIMULA classes, CLU clusters and ALPHARD forms have been devised to ward off the threatened chaos (Dahl et. al 1970, Liskov 1975, Wulf et al 1976). They all introduce abstract data structures by giving the collections of procedures which define the primitive operations on them. They separate the part of the program which implements a structure from other parts which use it but have no concern with its representation. Similarly in AI Minsky's frame notion (Minsky 1975) offers a way of bundling together LISP functions into some meaningful entities. Indeed one reason for the move away from a 'logical' representation of knowledge to a procedural one may be that we have some skill at structuring programs but hardly any at structuring theories. Our work on theories derives from our attempts to clarify and generalise the above methods of building up programs in terms of abstract data structures. Tackling problem specifications rather than programs turned out to use the same mathematical tools but to be rather less difficult. It is also an area overdue for illumination. The present paper sets forth in an informal way â€¦