Cloud application performance is heavily reliant on the hit rate of datacenter key-value caches. Key-value caches typically use least recently used ( LRU ) as their eviction policy, but LRU ’s hit rate is far from optimal under real workloads. Prior research has proposed many eviction policies that improve on LRU , but these policies make restrictive assumptions that hurt their hit rate, and they can be difﬁcult to implement efﬁciently. We introduce least hit density ( LHD ), a novel eviction policy for key-value caches. LHD predicts each object’s expected hits-per-space-consumed ( hit density ), ﬁltering objects that contribute little to the cache’s hit rate. Unlike prior eviction policies, LHD does not rely on heuristics, but rather rigorously models objects’ behavior using conditional probability to adapt its behavior in real time. To make LHD practical, we design and implement RankCache, an efﬁcient key-value cache based on mem-cached. We evaluate RankCache and LHD on commercial memcached and enterprise storage traces, where LHD consistently achieves better hit rates than prior policies. LHD requires much less space than prior policies to match their hit rate, on average 8 × less than LRU and 2–3 × less than recently proposed policies. Moreover, RankCache requires no synchronization in the common case, improving request throughput at 16 threads by 8 × over LRU and by 2 × over CLOCK .