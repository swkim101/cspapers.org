In thii paper we propose a practical approach to rule analysis. We show how alternative rule designer choices can be supported using our approach to achieve confluent rule execution in active databases. Our model employs priority information to resolve conllicts between rules, and uses a rule scheduler based on the topological sort to achieve correct confluent rule executions. Given a rule set, a trigger graph and a dependency graph are built from the information obtained by analyzing the rule set at compile time. The two graphs are combined to form a priority graph, on which the user is requested to specify priorities (or resolve conflicts) only if there exist dependencies in the dependency graph. The user can have multiple priority graphs by specifying dilferent priorities depending on application. From a priority graph, an execution graph is derived for euery user transaction that triggers one or more rules. The rule scheduler uses the execution graph. Our model also correctly handles the situation where trigger paths of rules triggered by a user transaction are overlapping, which are not handled by existing modeIs.