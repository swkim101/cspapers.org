1 Introduct ion In object-oriented database systems, it is assumed silently that fundamental object types and inter-object relationships can be classified statically, prescribing basic structural and behavioral properties for all the objects in the database. Such a classification-based approach falls short of supporting those data-intensive applications requiring more advanced dynamic functions. A particular kind of such advanced functions is “dynamic clustering” the ability to group/cluster existing objects to form typeless, ad-hoc collections (called “clusters”) which are directly denotable and employable. Such clusters can be formed by taking copies or by including the Oids of the input objects, and can be explicitly defined or indefinitely defined, exhibiting thus different impacts and characteristics, ranging from loosely-coupled to tightly-coupled ones. In this paper we describe an on-going project of devising a conceptual clustering model. A real life DB application is used as a basis for testing and evaluating the model. An implementation prototype has been implemented, based on a comprehensive object database programming system. *The work by this author was supported, in part, by the Commonwealth Scientific and Industrial Research Organization (CSIRO) under contract BT00825. Permissions to copy without fee all or part of this material is granted provided that the copies are not made or distributed for direct commercial advantages, the VLDB copyright notice and the title of the publication and its date appear, and notice is given that copying is by permission of the Very Large Data Base Endowment. To copy otherwise, or to republish, requires a fee and/or special permission from the Endowment. Proceedings of the 18th VLDB Conference Vancouver, British Columbia, Canada 1992 Object-oriented languages and systems are becoming more and more popular for applications which model environments that lend themselves to extensive classifications, complex objects and inter-object relationships [KLE89, Mey88, ZMESO]. In a conventional object-oriented database, the conceptual structure (schema) is embodied by a collection of abstract data types (called “classes” in this paper) which, when defined, are organized into an inheritance (ISA) hierarchy. Objects can then be created within classes, instantiating and justifying these predefined data types. In this way, a class prescribes both structural and behavioral properties (attributes and methods) of its objects, and objects in the class can be stored efficiently through a shared representation. Further, setoriented access of class members can be applied efficiently, which is suitable and desirable for many applications whose objects can be classified statically (or at least to a large extent, with additional facilities for introducing/deriving new classes such as specialization and/or generalization [Sci89, SNSS]). Such a classification-based approach, however, falls short of supporting those applications involving objects and inter-object relationships that are by nature tentative, irregular, ill-structured, evolving, or simply unpredicatable. *In particular, certain objects may arise dynamically as “clusters” of existing objects in some ad hoc fashion. While it is always in theory possible to accommodate such new types of objects through introducing new classes accordingly, in practice there are several reasons against this obvious approach. First, the number of such ad hoc objects may not be large enough to warrant the introduction of new classes (e.g., we may end up with many ad hoc classes). Second, the evolving/uncertain nature of some objects implies the inappropriateness of using class structure (as the classes would have to undertake similar evolu-