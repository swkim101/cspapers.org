Many problems in combinatorial optimization are NP-hard (see [60]). This has forced researchers to explore techniques for dealing with NP-completeness. Some have considered algorithms that solve “typical” or “average” instances instead of worst-case instances [86, 100]. In practice, however, identifying “typical” instances is not easy. Other researchers have tried to design approximation algorithms. An algorithm achieves an approximation ratio α for a maximization problem if, for every instance, it produces a solution of value at least OPT/α, where OPT is the value of the optimal solution. (For a minimization problem, achieving a ratio α involves finding a solution of cost at most αOPT .) Note that the approximation ratio is ≥ 1 by definition. After twenty-five years of research, approximation algorithms is a major research area with deep techniques (see [75] for a detailed survey). Nevertheless, researchers have failed to design good approximation algorithms for a wide variety of NPhard optimization problems. Recent developments in complexity theory —specifically, in the area of probabilistically checkable proofs or PCPs— suggest a reason for this failure: for many NP-hard problems, including MAX-CLIQUE, CHROMATIC NUMBER, MAX-3SAT, and SET-COVER, achieving certain reasonable approximation ratios is no easier than computing optimal solutions. In other words, approximation is NP-hard. These negative