A fundamental problem in the implementation of object-oriented languages is that of a frugal <i>dispatching data structure</i>, i.e., support for quick response to dispatching queries combined with compact representation of the type hierarchy and the method families. Previous theoretical algorithms tend to be impractical due to their complexity and large hidden constant. In contrast, successful practical heuristics, including Vitek and Horspool's <i>compact dispatch tables</i> (CT) [16] designed for dynamically typed languages, lack theoretical support. In subjecting CT to theoretical analysis, we are not only able to improve and generalize it, but also provide the first non-trivial bounds on the performance of such a heuristic.Let <i>n</i>,<i>m</i><i>l</i> denote the total number of types, messages, and different method implementations, respectively. Then, the dispatching matrix, whose size is<i>nm</i>, can be compressed by a factor of at most ι ≡ (<i>nm</i>)/<i>l</i>. Our main variant to CT achieves a compression factor of ½ √ι. More generally, we describe a sequence of algorithms CT<inf>1</inf>, CT<inf>2</inf>, CT<inf>3</inf>,..., where CT<inf><i>d</i></inf> achieves compression by a factor of (at least) <sup>1</sup>over<inf><i>d</i></inf>ι<sup>1—1/<i>d</i></sup>, while using <i>d</i> memory dereferencing operations during dispatch. This tradeoff represents the first bounds on the compression ratio of constant-time dispatching algorithms.A generalization of these algorithms to a <i>multiple-inheritance</i> setting, increases the space by a factor of κ<sup>1-1/<i>d</i></sup>, where κ is a metric of the complexity of the topology of the inheritance hierarchy, which (as indicated by our measurements) is typically small. The most important generalization is an <i>incremental</i> variant of the CT<inf><i>d</i></inf> scheme for a single-inheritance setting. This variant uses at most twice the space of CT<inf><i>d</i></inf>, and its time of inserting a new type into the hierarchy is optimal. We therefore obtain algorithms for efficient management of dispatching in dynamic-typing, dynamic-loading languages, such as <sc>Smalltalk</sc> and even the <sc>Java</sc> invokeinterface instruction.