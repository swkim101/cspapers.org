One of the major commercial applications of AI is in the rapidly expanding computer game industry. Virtually every game sold today has some sort of AI, from the ”computer player” in a chess game to the machine-gun-toting enemies in a first-person shooter (FPS). Any virtual being that does not behave in a strictly pre-scripted manner has some sort of AI behind it. Sadly, however, the multi-billion dollar gaming industry has done very little to advance the field of AI. The industry has moved past the day when an AI opponent would not even react to the death of his teammate standing three feet away, but that does not mean these bots, as they are commonly called, have any serious thought processes. Cube1 is an open-source FPS, written in C++ for Linux and Windows, that is based on a very unorthodox engine that emphasizes simple 3D designs to provide a quickly and cleanly rendered environment. The Cube Engine is, to quote its website, mostly targeted at reaching feature richness through simplicity of structure and brute force, rather than finely tuned complexity. The code for Cube is much shorter and simpler than that for many other FPS games, and, because it is open-source, we have full access to all of the code and thus almost any change is possible . We realized that given the simplicity of Cube, developing a straight hard-coded AI that would show real improvement would be a difficult project. Rather than spending lots of time trying to figure out how the agents (bots, monsters, opponents) should behave, we decided that it would be easier and more interesting to add an evolutionary algorithm(Mitchell 1996) to the agent’s deterministic behavior. By evolving over time, the agents could learn from experience what the best strategies were and would, for example, decide for themselves how often they should jump over obstacles, instead of running around them. The idea is that each of an agent’s possible decisions are represented by a single value (true, false, or a probability) and all of these values combined determine his behavior. This string of values, which we can call his DNA, is attached to an individual agent. Whenever the agent needs to make a decision, he consults both the usual criteria and the corresponding value in his DNA. (Strings are initially all zero at