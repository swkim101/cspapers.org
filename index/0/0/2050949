Efficient fences will not only help improve the performance of today's concurrent algorithms, but could also pave the way for the adoption of stronger memory models such as Sequential consistency (SC). However,the cost of fences in commodity processors remains prohibitively expensive. A hardware fence only requires that all memory accesses preceding a fence in the program order are performed before the fence and its following memory accesses are performed. But, it does not require that these operations are completed in that order. In this work we observe that a significant fraction of fence overhead is caused by stores that are waiting for data from memory. We propose the zFENCE architecture that exploits this observation for efficiently implementing a fence by introducing the capability to grant coherence permission for a store much earlier than servicing its data from memory. We show that zFENCE eliminates fence overhead in a majority of scenarios, and helps bridge the performance gap between SC and TSO runtime memory models for a low design cost.