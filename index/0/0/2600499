The problem of computing the Fourier Transform of a signal whose spectrum is dominated by a small number k of frequencies quickly and using a small number of samples of the signal in time domain (the Sparse FFT problem) has received significant attention recently. It is known how to approximately compute the k-sparse Fourier transform in \approx k\log^2 n time [Hassanieh et alSTOC12], or using the optimal number O(k\log n) of samples [Indyk et alFOCS14] in time domain, or come within (\log\log n)^{O(1)} factors of both these bounds simultaneously, but no algorithm achieving the optimal O(k\log n) bound in sublinear time is known.At a high level, sublinear time Sparse FFT algorithms operate by hashing the spectrum of the input signal into \approx k buckets, identifying frequencies that are isolated in their buckets, subtracting them from the signal and repeating until the entire signal is recovered. The notion of isolation in a bucket, inspired by applications of hashing in sparse recovery with arbitrary linear measurements, has been the main tool in the analysis of Fourier hashing schemes in the literature. However, Fourier hashing schemes, which are implemented via filtering, tend to be noisy in the sense that a frequency that hashes into a bucket contributes a non-negligible amount to neighboring buckets. This leakage to neighboring buckets makes identification and estimation challenging, and the standard analysis based on isolation becomes difficult to use without losing &#x03A9;(1) factors in sample complexity.In this paper we propose a new technique for analysing noisy hashing schemes that arise in Sparse FFT, which we refer to as isolation on average}. We apply this technique to two problems in Sparse FFT: estimating the values of a list of frequencies using few samples and computing Sparse FFT itself, achieving sample-optimal results in k\log^{O(1)} n time for both. We feel that our approach will likely be of interest in designing Fourier sampling schemes for more general settings (e.g. model based Sparse FFT).