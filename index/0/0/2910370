Introduction Program transformation is a mechanized manipulation of a program in order to improve the program relative to the criteria of clarity, efficiency, computability, simplicity, functionality, translation, and computation [2]. The programs under manipulation are objects that are either rephrased, i.e. a program is transformed into another program within the same language, or translated, i.e. a source program in one language is transformed into a target program in a different language [1]. From the perspective of semantics preservation, program transformation can be viewed as a mechanization of equational reasoning where equal source programs are substituted by equal target programs. The broad areas of application of program transformations are in program development and program evolution [1]. In program development, formal requirement specifications are transformed into executable code using techniques of interactive meta-programming, extended compilation, and program synthesis and refinement. Some of the applications of transformations in program development are transformation-based compilers, application generators, and optimizing transformations (e.g. common subexpression elimination, constant propagation, strength reduction and others). In program evolution, transformations are used for maintenance of existing legacy programs using techniques of reverse engineering, refactoring, obfuscation, and migration. In this research we investigate rule-based program transformations. The key ingredients of rule-based transformations are rewrite rules, traversals, and composition combinators. Rewrite rules use the extended rule notation