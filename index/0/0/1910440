It is accepted that the alignment of a return-addressstack can be preserved by checkpointing on branches and recovering on branch mispredictions the top-ofstack pointer. However, virtually all published literature, is vague or proposes sub-optimal algorithms on how to repair the alignment of a return-address-stack on call and return mispredictions. Possible manifestations of this ambiguity are lower performing implementations of return-address-stack mechanisms in processors and simulators. This paper suggests that on call and return mispredictions the recovered top-of-stack pointer should point to the next and previous stack position respectively relative to the checkpointed top-ofstack pointer. It is established experimentally that the proposed method can improve the performance, over an otherwise identical processor configuration, on the average by 2% and by as much as 10%. This corresponds to a drop in return-address mispredictions by 40%, from 11.3% downto 6.7%. This work also considers whether the performance of one of the best known return-address-stack methods, proposed several years ago, is satisfactory with increasing pipeline depth. The results show that the average performance of the method is still satisfactory, but for some benchmarks appears insufficient. This may suggest a need for better returnaddress predictors.