We introduce monitoring semantics, a non-standard model of program execution that captures “monitoring activity” as found in debuggers, profilers, tracers, etc. A monitoring semantics is a conservative extension of a language’s standard dena,tational semantics, and is parameteri?ed with respect to specifications of monitoring activity. 13eyond its theoretical interest, monitoring semantics forms a practical baais for building effective monitors, with standard partial evaluation techniques being used as a key optimization strategy. In particular, specializing a monitorim g semantics with respect to a source program amounts to removing the interpretive overhead associated with the static aspects of monitoring, yielding an instrumented program in which the extra code to perform monitoring actions has been automatically ‘embedded” into the program. A. monitoring semantics can be automatically derived for any language for which a continuation semantics specific~ tion has been provided. This is achieved by using functional toembed non-standard behavior at all levels of recursion. We illustrate the approach for a higher-order functional language, showing examples of several different monitor specifications, including benchmarks of their implementations. ~’his research wss supported by DARPA grant NOO014.SS-K-0573 and a DARPA sub-contract from Software Options, Inc. Perrniseion to copy without fee all or pert of thie meterial is granted provided thet the copies ere not mede or distributed for direct commercial advantage, the ACM copyright notice end the title of the publication and its date appear, and notice is given that copying is by permission of the Association for Computing Machine~. To copy otherwise, or to republish, requires a fee and/or specific permission. e 1991 ACM 0-89791 -428 -7/91 /0005 /0338 . ..$1 .50 [z Proceedings of the ACM SIGPLAN ’91 Conference on Programming Language Design and Implementation Taronto, Ontario, Canada, June 26-28, 1991.