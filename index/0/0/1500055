This paper deals with permutation routing on hypercube networks in the store-and-forward model. We introduce the first (on-line and off-line) algorithms routing any permutation on the <italic>d</italic>-dimensional hypercube in <italic>d+o(d)</italic> steps. The best previously known results were 2<italic>d+o(d)</italic> (oblivious on-line) and 2<italic>d</italic>-3 (off-line). In particular, we present
a randomized, oblivious on-line algorithm with routing time <italic>d + O(d</italic>/log <italic>d</italic>),
a matching lower bound of <italic>d</italic> + &OHgr;(<italic>d</italic>/log <italic>d</italic>) for (randomized) oblivious on-line routing, and
a deterministic, off-line algorithm with routing time <italic>d+O</italic>(\sqrt{<italic>d</italic>\log <italic>d</italic>}).
Previous algorithms lose a factor of two mainly because packets are first sent to intermediate destinations in order to resolve congestion. As a consequence, the maximum path length becomes 2<italic>d - o(d)</italic>. Our algorithms use intermediate destinations as well, but we introduce a simple, elegant trick ensuring that the routing paths are not stretched too much. In fact, we achieve small congestion using paths of length at most <italic>d</italic>.
The main focus of our work, however, lies on the scheduling aspect. On one hand, we investigate well-known and practical scheduling policies for on-line routing, namely <italic>Farthest-to-Go</italic> and <italic>Nearest-to-Origin</italic>. On the other hand, we present a new off-line scheduling scheme that is based on frugal colorings of multigraphs. This scheme might be of interest for other sparse scheduling problems, too.