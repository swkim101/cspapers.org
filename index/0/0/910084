To use modern hardware effectively, compilers need extensive control-flow information. Unfortunately, the frequent method invocations in object-oriented languages obscure control flow. In this paper, we describe and evaluate a range of analysis techniques to convert method invocations into direct calls for statically-typed object-oriented languages and thus improve control-flow information in object-oriented languages. We present simple algorithms for <i>type hierarchy analysis, aggregate analysis, and interprocedural and intraprocedural type propagation</i>. These algorithms are also fast, <i>O</i>(|procedures| * &sum;<inf>p</inf><sup>procedure</sup> <i>n</i><inf><i>p</i></inf> * <i>v</i><inf><i>p</i></inf>) worst case time (linear in practice) for our slowest analysis, where <i>n</i><inf><i>p</i></inf> is the size of procedure <i>p</i> and <i>v</i><inf><i>p</i></inf> is the number of variables in procedure <i>p</i>, and are thus practical for use in a compiler. When they fail, we introduce <i>cause analysis</i> to reveal the source of imprecision and suggest where more powerful algorithms may be warranted. We show that our simple analyses perform almost as well as an oracle that resolves all method invocations that invoke only a single procedure.