Computer programming courses are an option available to many high school and college students. These courses typically teach features of a specific programming language, and students develop programs to solve a variety of problems. Such courses build only slightly on prior mathematics experience, and do not necessarily reinforce mathematics skills. Discrete mathematics, however, provides an important link between mathematics, computing, and problem-solving. When and how should this link be made? What mathematics topics are most appropriate? This paper describes preliminary experiences teaching an innovative discrete mathematics course for a wide range of student populations which include: high school students, college freshman planning to major in computer science, and mathematics education majors. The courses described are designed to address stndent weaknesses in discrete mathematics and problem-solving, and to illustrate the mathematical foundations of computing. They stress general problem-solving techniques and mathematical concepts that aid in the analysis and solution of computer based problems. The concentration is on general problem solving principles, patterns and symmetries, recursive and inductive thinking, algorithmic problem solving, and discrete mathematics concepts including: sets, propositional and predicate logic, proof techniques, relations, graphs and trees, functions, sequences, mathematical induction, language syntax, and algorithms, These concepts are motivated within the context of computer science, and its applications. For example, the principles of logic are used to understand logic programming, and functions are the underlying theory of applicative, or functional programming. To further enhance the learning experience, course material is reinforced through exploratory computer-based laboratory modules.