A number of recent papers on approximation algorithms have used the square roots of unity, -1 and 1 to represent binary decision variables for problems in combinatorial optimization, and have relaxed these to unit vectors in real space using semidefinite programming in order to obtain near optimal solutions to these problems. In this paper, we consider using the cube roots of unity, 1, <italic>e</italic><supscrpt><italic>i</italic>2π/3</italic>, to represent ternary decision variables for problems in combinatorial optimization. Here the natural relaxation is that of unit vectors in complex space. We use an extension of semidefinite programming to complex space to solve the natural relaxation, and use a natural extension of the random hyperplane technique introduced by the authors      in [8] to obtain near-optimal solutions to the  problems.
          In particular, we consider the problem of maximizing the total weight of satisfied equations <inline-equation> <f> x<inf>u</inf>-x<inf>v</inf>≡c<fen lp="par"><rm>mod<hsp sp="0.167"> </rm>3<rp post="par"></fen></f> </inline-equation>  and inequations <inline-equation> <f> x<inf>u</inf>-x<inf>v</inf>≢c<fen lp="par"><rm>mod<hsp sp="0.167"> </rm>3<rp post="par"></fen></f> </inline-equation> , where <inline-equation> <f> x<inf>u</inf>∈<fen lp="cub">0,1,2<rp post="cub"></fen></f> </inline-equation> <italic>u</italic>. This problem can be used to model the MAX-3-CUT problem and a directed variant we call MAX-3-DICUT. For the general problem, we obtain a .79373-approximation algorithm. If the   instance contains only inequations (as it does for MAX-3-CUT), we obtain a performance guarantee of  <inline-equation> <f> <fr><nu>7</nu><de>12</de></fr>+<fr><nu>3</nu><de>4<g>p</g><sup> 2</sup></de></fr><lim align="r"><op><rf>arccos</rf></op><ul>2 </ul></lim><fen lp="par">-1/4<rp post="par"></fen>≈.83601. </f> </inline-equation> This compares with proven performance guarantees of .800217 for MAX-3-CUT (by Frieze and Jerrum [7]) and  <inline-equation> <f> <fr><nu>1</nu><de>3</de></fr>+10<sup>-8</sup></f> </inline-equation>  for the general problem (by Andersson, Engebretson, and Håstad [2]). It matches the guarantee of .836008 for MAX-3-CUT found independently by de Klerk, Pasechnik, and Warners [4]. We show that all these algorithms are in fact identical in the case of MAX-3-CUT.