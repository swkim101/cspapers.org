We consider the following "efficiently decodable" non-adaptive group testing problem. There is an unknown string <i>x</i> ∈ {0, 1}<i><sup>n</sup></i> with at most <i>d</i> ones in it. We are allowed to test any subset <i>S</i> ⊆ [<i>n</i>] of the indices. The answer to the test tells whether <i>x</i><sub><i>i</i></sub> = 0 for all <i>i</i> ∈ <i>S</i> or not. The objective is to design as few tests as possible (say, <i>t</i> tests) such that <i>x</i> can be identified as fast as possible (say, poly(<i>t</i>)-time). Efficiently decodable non-adaptive group testing has applications in many areas, including data stream algorithms and data forensics.
 A non-adaptive group testing strategy can be represented by a <i>t</i> x <i>n</i> matrix, which is the stacking of all the characteristic vectors of the tests. It is well-known that if this matrix is <i>d</i>-disjunct, then any test outcome corresponds uniquely to an unknown input string. Furthermore, we know how to construct <i>d</i>-disjunct matrices with <i>t</i> = <i>O</i>(<i>d</i><sup>2</sup> log <i>n</i>) efficiently. However, these matrices so far only allow for a "decoding" time of <i>O</i>(<i>nt</i>), which can be exponentially larger than poly(<i>t</i>) for relatively small values of <i>d</i>.
 This paper presents a randomness efficient construction of <i>d</i>-disjunct matrices with <i>t</i> = <i>O</i>(<i>d</i><sup>2</sup> log <i>n</i>) that can be decoded in time poly(<i>d</i>) · <i>t</i> log<sup>2</sup> <i>t</i> + <i>O</i>(<i>t</i><sup>2</sup>). To the best of our knowledge, this is the first result that achieves an efficient decoding time and matches the best known <i>O</i>(<i>d</i><sup>2</sup> log <i>n</i>) bound on the number of tests. We also derandomize the construction, which results in a polynomial time deterministic construction of such matrices when <i>d</i> = <i>O</i>(log <i>n</i> / log log <i>n</i>).
 A crucial building block in our construction is the notion of (<i>d</i>, <i>l</i>)-list disjunct matrices, which represent the more general "list group testing" problem whose goal is to output less than <i>d</i> + <i>l</i> positions in <i>x</i>, including all the (at most <i>d</i>) positions that have a one in them. List disjunct matrices turn out to be interesting objects in their own right and were also considered independently by [Cheraghchi, FCT 2009]. We present connections between list disjunct matrices, expanders, dispersers and disjunct matrices. List disjunct matrices have applications in constructing (<i>d</i>, <i>l</i>)-sparsity separator structures [Ganguly, ISAAC 2008] and in constructing tolerant testers for Reed-Solomon codes in the data stream model.