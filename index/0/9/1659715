This paper addresses the problem of obtaining formal proof systems that support reasoning about temporal properties of parallel programs in a way that is compositional or 'syntax directed' - the distinctive feature of e.g. Hoare style proof systems.
 Now, temporal properties of programs express properties about execution traces of these programs. In the presence of concurrency, compositionality is obtained by concentrating exclusively on the execution traces associated with the atomic actions of programs - the so-called transitions of those programs. To reason about such transitions in a compositional way, 'Transition Logic' is proposed, expressing properties of the form “every transition of a program, say α, that starts in a state satisfying assertion p, must end in a state validating ”: [p]α[q].
 Essential is that these assertions can express properties of control locations of programs, too. For this logic, a compositional proof system is obtained which is proved to be sound and relatively complete. An interesting feature of the proof system is the axiomatization of the flow-of-control of programs. The relevance of this logic is supported by the fact that the temporal behaviour of a program is ultimately provable in terms of properties of its transitions, as shown by the work of Z. Manna and A. Pnueli [16].