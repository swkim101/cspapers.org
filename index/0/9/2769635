The constructive second-order proofs that we study are associated with inductive definitions on classes of finite structures, where each structure represents a database state. To an inductive definition of a predicate P on a class K corresponds a uniform proof of P i.e a function which for each structure U defines a proof of P in U In the second section, we review the definition of an inductive query, and the differences between logic programming and inductive definability. We give some examples and then describe compilation techniques. In the third section we introduce the notion of a uniform proof, and in the fourth section we study properties of uniform proofs, namely non-monotonicity and intensionality. These proofs use computations on sets and the finiteness of the structures in a fundamental way, and hence differ from first-order proofs We show the non-monotonicity of this calculus, and mention the constructivity of some of its intensional properties (time and space complexities)