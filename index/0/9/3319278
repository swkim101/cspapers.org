Most problems in network design can be viewed as building a network over a given collection of sites so as to satisfy some edge connectivity requirements between the sites. One way of specifying these requirements is to list, for each pair of sites i,j, a number rij which is the required number of paths between i and j. The cost function is specified as an edge-weighted graph and the objective is to minimise the cost. Each edge is picked with a certain multiplicity 2,. This is equivalent to both from the view point of computing costs and connectivity picking x, copies of edge e. When we are also specified capacities on edges, then an edge can be picked at most as many times as its capacity. This problem, usually referred to as the generalized Steiner network problem was shown to be polynomially solvable by Frank [4] when the underlying graph is a clique with all edges of unit cost. It becomes NP-hard even with edge costs 1 and 2. Williamson et.al. [17] provided the first approximation algorithm for this problem; they achieve an approximation factor of 2R, where R is the maximum requirement. This has been improved recently by Goemans et.al. [9] to 2Z(R) where ‘H(n) = 1 + f + 4 + . . . + i is the nth harmonic sum. For the case when all requirements are p, Khuller and Vishkin [12] show how to obtain a 2 approximation. For the uncapacitated case, i.e. no capacity constraints on the edges, Aggarwal, Klein and Ravi [l] provide a factor (2 z) log R approximation, here R, is the maximum requirement and A is the set of sites that need to be connected. This was later improved by Goemans and Williamson [lo] to (2 2) Cf=, y where 0 = po < p1 < p2 < . . . < pk are the dis&ct requirements. The main contribution of this paper is a scaling technique that allows us to make an approximation guarantee that is independent of the requirements; we obtain a 2’H(A 1) approximation factor for the uncapacitated generalized Steiner network problem. When requirements are only O,l, i.e. we only specify which pairs of vertices need to be connected, the optimal solution is always a forest. This problem, known as the