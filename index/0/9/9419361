Since Findler and Felleisen introduced <i>higher-order contracts </i>, many variants have been proposed. Broadly, these fall into two groups: some follow Findler and Felleisen in using <i>latent </i> contracts, purely dynamic checks that are transparent to the type system; others use <i>manifest </i> contracts, where <i>refinement </i> types record the most recent check that has been applied to each value. These two approaches are commonly assumed to be equivalent---different ways of implementing the same idea, one retaining a simple type system, and the other providing more static information. Our goal is to formalize and clarify this folklore understanding.
 Our work extends that of Gronski and Flanagan, who defined a latent calculus λ <sub>C </sub> and a manifest calculus λ <sub>H </sub>, gave a translation φ from λ <sub>C </sub> to λ <sub>H </sub>, and proved that, if a λ <sub>C </sub> term reduces to a constant, then so does its φ-image. We enrich their account with a translation Ψ from λ <sub>H </sub> to λ <sub>C </sub> and prove an analogous theorem.
 We then generalize the whole framework to <i>dependent contracts </i>, whose predicates can mention free variables. This extension is both pragmatically crucial, supporting a much more interesting range of contracts, and theoretically challenging. We define dependent versions of λ <sub>H </sub> and two dialects ("lax" and "picky") of λ <sub>C </sub>, establish type soundness---a substantial result in itself, for λ <sub>H </sub>---and extend φ and Ψ accordingly. Surprisingly, the intuition that the latent and manifest systems are equivalent now breaks down: the extended translations preserve behavior in one direction but, in the other, sometimes yield terms that blame more.