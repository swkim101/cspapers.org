This paper deals with one of the most common and important types of recursion: transitive closure. Since many real world problems reduce to generalized transitive closure computations, efficient computation is essential. To gain a significant speedup in processing, we consider distributed (i.e. parallel) computaBy fragmenting the data beforehand according to rules stemming from the application domain, queries can be split into several independent subqueries. These subqueries are computed in parallel on only a part of the data and are more specialized in the sense that extra selections are applied on each fragment. The disconnection set approach introduced in this paper takes benefit from such a fragmentation; it is applicable to several queries that are based on transitive closure, such as connectivity, shortest path, and bill of materials. Moreover, it may be generalized to work for l PartiaI support from NFI, a Dutch research fund, and from the LOGIDATA+ project of C.N.R Italy ‘Department of Applied Mathematics, University of Twente, P.O. Box 217, 7500 AE Enschede, the Netherlands !Computer Science Department, University of Twente §Dipartimento di Matematica,Universita’ di Modena Permission to copy without fee all or part of this matcri;ll is granted provided that the topics xc not made or distrihutcd I’OI direct commercial advantage. the VLDB copyright notice and the title of the publication and its dntc appear. and notice is $en that copying is hy permission of the Very Lnrgc Data B;ISC Endowment. To copy othcrwisc. or to rcpuhlish. rquira ;I fee and/or special permission from the Endowment. other application domains. Since we consider real world problems to deal with a large updatable volume of data, we take an algebraic approach to computation of queries. Our proposal is such that updates will, in general, not affect the fragmentation. This is also explained in the paper. Some preliminary simulations are included in the paper as well. They show that our approach leads to a speedup that is almost proportional to the number of processors, without significant overhead.