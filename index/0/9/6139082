Competitive analysis is concerned with comparing the performance of on-line algorithms with that of an optimal off-line algorithm. For some problems, randomized on-line algorithms have yielded better performance ratios than deterministic on-line algorithms, assuming that the input sequences are generated by an adversary that has no knowledge about the results of the coin tosses made by the algorithm. In this paper, we present new randomized on-line algorithms for snoopy-caching and the spin-block problem. These algorithms achieve strongly competitive ratios approaching e/(e 1) GZ 1.58, a surprising improvement over the best possible ratio in the deterministic case, which is 2. We also consider the situation when the request sequences for these’ problems are generated according to an unknown probability distribution. In this case, we show that deterministic algorithms that adapt to the observed request statistics also pay at most a factor of e/(e-1) more than the optimal off-line algorithm. Finally, we show that for the 2-server problem on a 3-vertex isosceles triangle, there is a lower bound on the competitive ratio with a limit of e/(e 1). This is in contrast to the 2-server problem on an equilateral triangle where a strongly 3/2-competitive randomized algorithm is known. 1 Motivation and Results The amortized analysis of on-line algorithms for processing sequences of tasks in dynamic systems has been a subject of great interest in recent years. The approach taken is to compare the performance of a strategy that operates with no knowledge of the future with that of an optimal, clairvoyant strategy, that has complete knowledge of the future and operates op*DEC Systems Research Center, 130 Lytton Ave., Palo Alto, CA 94301. tDept. of Mathematics and Compute-r Science, Amherst College, Amherst, MA 01002. Susan Owicki* timally given that information. A large number of problems have been studied from this point of view, cf [l, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 143. On-line algorithms whose performance is within the smallest possible constant factor of the optimum offline are said to be strung/y compeailiue. More formally, let A be a (possibly randomized) on-line algorithm, let u be an input sequence to the algorithm, and let ECA(U) be the expected cost A incurs when processing input sequence b. Let Gopt(u) be the cost incurred by the optimal off-line algorithm in processing r~. We consider two types of adversaries. Our first type of adversary is one that makes its request sequence without regard to the nondeterministic choices made by the on-line algorithm. An on-line algorithm A is said to be c-competitive against a weak adversary if there is a constant a such that for any fixed input sequence 6, EC,&) < c ’ C,,,(a) + a. The constant c is known as the competitive factor. The second type of adversary is one that can choose each input request depending on the choices made by the algorithm in servicing the previous requests. An on-line algorithm A is said to be c-competitive against a strong adversary if there is a constant u such that for any input sequence u generated in this way, ECA(U) 5 c . C,,,(u) + a. Finally, an algorithm is strongly c-competitive against a weak (rasp. strong) adversary if c is the smallest constant attained by any on-line algorithm. Observe that if the on-line algorithm is deterministic then a weak adversary can simulate a strong one. A natural and interesting question is whether there are problems for which the best competitive factor is smaller against weak adversaries than against strong