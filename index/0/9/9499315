Coleridge said, " Poetry is certainly something more than good sense, but it must be good sense at all events; just as a palace is more than a house, but it must be a house, at least. " Computer science is more than programming, but a computer science graduate must be able to program, at least. I. Why do we have students study programming? * Because it is a fascinating field of study in it's own right, * Because it is needed as a tool in studying other computer science subjects, eg., algorithms and data structures, compiler construction. * Because it is provides a tool for describing things and actions, eg. hardware description languages. * Because it is provides a new and different way of thinking: the algorithmic way. Knuth speaks of the fruitfulness of alternating between the algorithmic way of thinking and the mathematical way of thinking. * Because it is important for graduate study, and needed to prepare for the computer science GRE exam. Perhaps all this is obvious. I simply want to insist that although I will be talking only about programming languages, it is not the case that I think that's all there is to computer science. H. The paradigm issue. It is important that students understand several programming paradigms: imperative (procedural), functional, logic, concurrent, object-oriented, fetch/execute machine level. If students learn imperative only, with the others skimmed in an " All Others " elective, they are stunted. They will apply the wrong tool in some cases, not knowing of others. They will be poorly prepared for a lifetime of learning, as our field continues to change. It is also important that graduates know that programming should not be done at all, if the task at hand can be solved quickly by a spreadsheet or few piped Unix filters.