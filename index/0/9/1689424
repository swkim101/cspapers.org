Based on a logic-oriented mechanism for planning, a language framework, called PLANLOG, is developed, which enables the combination of two styles of programming; what is clearly logical can be written in PLANLOG in a logical way; what is procedural by nature can be expressed in form of plans. Starting with a detailed exposition of our motives, we will subsequently present the basic principles of PLANLOG and discuss the role of plan generation and plan execution. Finally, our vision of PLANLOG is summarized. The aim of this paper is to present a logic-oriented framework, called PLANLOG, which is suited to materialize combinations of logical/functional and procedural constructs of programming languages. In section 1 we sketch the disposition of current logical and functional programming languages towards procedural programming and outline the relationship between procedural programming tasks and plan generation in robot problem solving. In section 2 we show how logic programming can be integrated in a plan generation system. Since we see procedural programs as plans, we have thus linked logic programming with procedural programming. In section 3 we discuss the role of built-ins, which entails a sharp distinction between the generation of a plan and its execution. In section 4, the conclusion, we summarize the potential of PLANLOG. 1. BACKGROUND MOTIVATION Although we are fully aware of the conceptual advantages of functional and logical programming, and the profound insight into the non-procedural nature of many applications of computing obtained this way, in this paper a case shall be made for the procedural, where it goes together with naturalness and conceptual simplicity. Actual logical and functional languages, as are the various dialects of LISP and PROLOG, are apparently procedurally contaminated, as is already evidenced by notions as pure LISP or pure PROLOG. Examples of procedurally would be the predicates "assert" and "retract" in PROLOG, which add or delete knowledge. Another example is the following PROLOG clause which is a primitive user interface around a logic program for the concatenation of two lists. Here the order of execution of the literals seems to be more important than their truth values. In spite of the high esteem which we share for logical and functional programming, we are nevertheless convinced , that the existence and use of procedural features are primarily due not to bad habits of language designers and programmers, but to the nature of the world we live in, and the tasks we â€¦