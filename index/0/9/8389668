Our answer to the question in the title is the abstract data type (ADT) priority queue, the workhorse of data types. We can make it do the work of a stack and a FIFO queue, we can use it to simulate other structures in classic algorithms, and we can implement it so that the operations are no worse than O(logN). In this paper we will look at the ADT priority queue from three perspectives: specification, implementation, and application. We specify its behavior using an abstract model, analyze alternate implementations using Big-O notation, and use it to implement four classic graph algorithms, SPECIFICATION OF ADT PRIORITY QUEUE There are two techniques currently used to specify abstract data types: axiomatic specifications and abstract models. We use an abstract model because it is the more familiar technique.â€™ Abstract modelling uses the operations of one abstract data type (called the underlying model) to describe the semantics of another abstract data type. The underlying model must be a well-defined mathematical data type or an abstract data type that has previously been defined axiomatically. Here, we use a bag (a multiset) as the underlying model in the specification of the ADT priority queue PQ of type PQType.modelling uses the operations of one abstract data type (called the underlying model) to describe the semantics of another abstract data type. The underlying model must be a well-defined mathematical data type or an abstract data type that has previously been defined axiomatically. Here, we use a bag (a multiset) as the underlying model in the specification of the ADT priority queue PQ of type PQType. Permission to copy without fee all OT part of this material is granted provided that the copies are not made or distributed for direct commercial advantage, the ACM copyright notice and the title of the publication and its date appear. and notice is given that copying is by permission of the Association for Computing Machinery. To copy otherwise, or to republish, requires a fee and/or specific permission.