It is difficult to reach to an agreement on how to measure software quality. It has been argued that one of the reasons for this is that quality is a complex concept, for which a universal definition does not exist. Quality means different things to different people, thus it is highly subjective and context-dependant. In [12] Kitchenham stated that quality is “hard to define, impossible to measure, easy to recognize”. Gilles [9] stated quality is "generally transparent when present, but easily recognized in its absence". Both of these statements imply that quality is somehow perceptible. Thus, the problem is not quality being subjective, but how to correlate the different views on quality into a measurable quality framework, which can be commonly agreeable at least in some context (e.g., a domain of knowledge, an organization, a project, etc.). Software quality models help in this purpose: they can be used as a base to define a commonly agreeable quality framework, which consolidates the different views on quality; they can be tailored to specific contexts; they provide a measurable base to the evaluation of software quality. However, several problems remain which let quality models to be seldom used or misused in the practice. In this paper we review these problems and propose a set of characteristics which provide the basis for the construction of well founded and useful quality models. We focus our analysis in the context of COTS components.