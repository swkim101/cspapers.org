In most work in plan generation and execution the assumption has been made that the goals being addressed by the planning system (and executive) are imposed externally and that once a plan has been constructed to achieve these goals the activity of the planner can cease. Similarly, once the plan has been successfully executed and a state satisfying the externally imposed goals has been reached, it has been assumed that the planning and execution behaviours will suspend until a new goal set and consequent plan has been imposed. These assumptions do not hold for fully autonomous systems, which are capable of directing their own behaviour and prioritising their own goals. The problem we are most concerned with is determining how goals arise during the autonomous behaviour of a system. Recent work by Knight et al (Knight et al. 2001) and Chien et al (Chien et al. 2001) relaxed the above assumptions by introducing the idea of continuous planning in the Casper system. Casper is an architecture for an autonomous planning and control system intended for application in space missions involving onboard autonomy. In (Chien et al. 2001), the authors indicate that the system can respond to failures and opportunities during execution of a plan within a given horizon and, in principle, update its goal set in response to environmental factors. The RAX system (Jonsson et al. 2000) demonstrated the integration of planning, execution, failure diagnosis and subsequent plan repair. Our approach to autonomous planning and execution is to address the issues of goal generation and management according to the changing motivations of an autonomous system. Although in general an autonomous system will be created to carry out externally-imposed tasks, any extended period of autonomous behaviour will require a system to react to its environment and to be able to create its own goals. The MADbot project concerns the development of a motivated autonomous system, capable of generating its own goals in accordance with a system of drives and impulses (Coddington & Luck 2004) and monitoring its own behaviour in the execution of plans. Execution monitoring is done with respect to stochastic models of the actions that the robot can execute. At any point during the execution of its plan the robot can estimate its most likely state based on the appropriate model and the current observations of the system. If