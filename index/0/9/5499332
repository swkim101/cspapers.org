Program synthesis is the construction of code that correctly and efficiently implements a formal specification of input/output behavior. There are several stages that comprise the synthesis process. First, the construction of a correct program requires inference within a {\em domain theory} which formally models the application domain. Developing such a domain theory is a major and irreducible task in software engineering. Formal specifications of the softwareâ€™ intended behavior is then written in the (domain-specific) vocabulary of the domain theory. Next, the specification is ransformed to source-level code via a sequence of correctness-preserving transformations or refinements. These transformations/refinements embody knowledge about software architectures, algorithms, code optimization techniques, data structures, parallelism, etc. Finally the software is compiled to the target machine. The systematic application of representations of programing knowledge can allow the synthesis of complex codes embodying algorithms, data structures, and code-optimization techniques that might be too difficult to produce manually.