We introduce E-tree, a new variant of the family of B-tree indexes, designed for evolving workloads. E-tree reshapes itself to maintain optimal memory layout as the access patterns change, achieved by dropping the requirement of having a fixed, global index design. Instead, E-tree uses different memory layout patterns for different regions of the tree and continuously reconsiders those design decisions as the workload evolves. We describe E-tree, explore heuristics to determine the reshaping patterns, and demonstrate experimentally that it has strong potential by outperforming state-of-the-art fixed designs in evolving workloads.