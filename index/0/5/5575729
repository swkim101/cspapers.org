In this paper, we design succinct index structures for a text string <i>T</i> of <i>n</i> binary symbols to support efficient searching of a pattern <i>P</i> of length <i>m</i>. Motivated by the fact that the standard representation of suffix arrays uses <i>n</i> lg <i>n</i> bits which is more than the theoretical minimum, we present a theorem that characterizes a permutation as the suffix array of a binary string. Based on the theorem, we design a succinct representation of suffix arrays of binary strings that uses <i>n</i> + <i>o</i>(<i>n</i>) bits, which is the theoretical minimum plus a lower order term, and answers existential and cardinality queries in <i>O(m)</i> time without storing the raw text. With <i>2n</i>+<i>o(n)</i> bits, we can list pattern occurrences in <i>O</i>(<i>m</i> + <i>occ</i> lg <i>n</i>) time in the general case, and for long patterns, when <i>m</i> = Ω(lg<sup>1+∈</sup> <i>n</i>), we answer such listing queries in <i>O</i>(<i>m</i> + <i>occ</i>) time. We also present another implementation that uses <i>O</i>(<i>n</i>) bits and supports pattern searching in <i>O</i>(<i>m</i> + <i>occ</i> lg<sup>λ</sup> <i>n</i>) time for any fixed λ such that 0 < λ < 1. More results and trade-offs are reported in the paper.