An implementation of an asynchronous shared-data structure is wait-free if no adversarial scheduler can stop an individual operation on the data structure from making progress (that is the implementation can tolerate a fail-stop fault of any number of processes). An implementation is non-blocking if an adversarial scheduler cannot stop the system from making progress. Existing wait-free implementations of shared data structures are slow when contention (processor concurrency) is low, namely, they have an Cl(n) term in their time complexity, where n is the total number of processes, however their time complexity for each operation is bounded. On the other hand, non-blocking implementations are fast when contention is low, but do not provide bounds on the time complexity of indwidual operations when contention is high. Neither seems to be satisfactory in practice. Inspired by Lamport’s fast mutual exclusion algorithm [Lam87], we pose in this paper the question of implementing fast and wait-free data-structures. We then devise universal methods that combine the advantages of both non-blocking and waitfree approaches, i.e., fast when contention is low and guaranteed progress of any individual operation. The time complexity of the algorithms presented here is not a function of n, but a function of k the actual number of processes that access the object concurrently, Two such methods are presented here; The first method, which is called group update, replaces the O(n) term in the time complexity of wait-free implementations by an O(min(n, k log k)) term (or more precisely, O(k log k +s + kf), where s and ~ are the data structure size and single update complexity, respectively). The second method, which is called individual update, rePermission to copy without fee all or part of this material is granted provided that the copies are not made or distributed for direct commercial advantage, the ACM copyri ht notice and the % title of the publication and. KSdate appear,. an notice is given that copym IS by permwon of the Assoc!abon of Computing Machinery. o cop otherwse, or to repubhsh, requires y ‘/’ a fee ancf/or soecl ICoermisslon. STOC’ 95, L& Veg&, Nevada, USA @ 1995 ACM 0-89791 -718-9/95/0005..$3.50 places the O(n) term of wait-free implementations with an O(k) term (or O(k~log f)).