We present a new paradigm for efficient randomized parallel algorithms that needs ~(log’ n) time, where ~(x) means ‘O(Z) expected’. It leads to: (1) constructing a perfect hash function for n elements in ~(log” n log(log” n)) time and ~(n) operations; (2) an algorithm for generating a random per— mutation in O(log* n) time, using n processors or in ~(log” n Iog(log” n)) time and ~(n) operations; and (3) an efficient optimize~ consider a parallel algorithm that runs in t time using p processors; since at each time unit some of the processors may be idle, we let z, the total number of actual operations, be the sum over all non-idle processors at every time unit; assuming the algorithm belongs to a certain kind, it can be adapted to run in ~(t+log” n log(log” n)) time (additive cwerhead!) using z/(t + log* n log(log* n)) processors. We ak get an optimal integer sorting adgorithm. Givel~ ~ntegers from the domain [1, .n], it runs in O( log log n K ) time.