In this papez we show how commercial database systems and zeal-time database systems axe fax apart in terms of functionality and performance, and discuss ways to alleviate the situation. 1 Introduction Commercial database management systems have come a long way from the early 1980's. They offer rich functionality, ability to manage large and disparate data, and performance and scalability to 100's to 1000's of gigabytes. However, their operating point is so far away from the real-time data management comrnuD.ity that it is di~cult to use most of them for real-time tasks. Real-time databases have several requirements. In this paper, we will look at two of them-1. Timeliness, and 2. Flexible seriMizability constraints-and show that commercial RDBMS's cannot provide effective solutions in this domain. The concept of timeKuess means different things to the commercial and real-time worlds. In the commercial world, "response-time" (equivalently, efficient query/transaction execution) is perhaps the closest we get to the concept. Support for hard, soft or firm deadlines is typically absent. Support for priority and sched-1111ng which are key tools for real-time databases is relatively weak. Temporal concepts exists, but typically supported through the concept of timestamps which are rarely as rich as the valid-time, transaction-time and temporal dimensions associated with real-time databases [Ozsoyoglu and Snodgrass] Commercial database systems achieve serialisability typically through strict two phase locking. In this, transactions acquire locks, but do not release them till they commit. While two phase locking is enough for l%rmi,~iaa Io make digiudJlm'd copia of all or pare. ~lhis m,~l~rial for pawxud or clum~om m k ffanted without fee provided that the copies ue ~¢ m,~llo a¢ dimribuml for ixo~ or com~.ci~l ~Iv~e. tlw copy. riSht no6cm. ~ ti~ of~ pubfic~im mJ i~ d~ ~. ~ n,0~:e is giv~ tirol ~pyrighl k bY Pm'mimion ~the ACM, Inc. To copy odwrwim. m mpubfish, to plm m mrvem ~ t~ mdistribu~ to line, mquivm ~if~ i~mimim ~ fm DART '@6Roc/tW//~MD, run seria|izability, the di~culty (sometimes impossibility) of rolling back already committed transactions results in strict two phase locking being the mechaniNm of choice. This is typically quite the opposite of what real-time databases require. In addition, logging (i.e. durability) of transactions is an inviolate concept for cornrnercie~i vendors, again, of relatively low importance to the real-time community. We will further show how the distrust that these databases have for operating system support results in a poor match with real-time tasks. Finally, …