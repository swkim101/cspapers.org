The logical relations (or abstraction) theorem for the simply typed lambda calculus [1, 2] asserts that any function definable in the calculus maps “related” arguments into “related” results, where the meaning of “related” is arbitrary for type variables but induced in a fixed way for higher types. In addition to showing that the type system enforces abstraction, this theorem is a rich source of laws about definable functions of particular types [3]. For the polymorphic lambda calculus [4, 5, 6], the logical relations theorem suggests a plausible definition of Strachey’s concept of “parametricity” [7], i.e. that definable polymorphic functions treat types uniformly. This definition implies that certain low-order polymorphic types can be used as algebraic data types [8, 9, 2]. In this tutorial, we will try to explain the intuitions behind these ideas without becoming enmeshed in the mathematical complexities of defining the polymorphic lambda calculus rigorously. *This research was sponsored in part by National Science Foundation Grant CCR-8922109 and in part by the Avionics Lab, Wright Research and Development Center, Aeronautical Systems Division (AFSC), U.S. Air Force, Wright-Patterson AFB, OH 45433-6543 under Contract F33615-90-C-1465, Arpa Order No. 7597. The views and conclusions contained in this document are those of the author and should not be interpreted as representing the official policies, either expressed or implied, of the U.S. Government.