1 Introduction Recent yeara saw several proposals for languages for querying object-oriented databases [2, 3, 4, 5, 13, 6]. None of them, however , captures (or even attempts to deal with) all the aspects of the object-oriented model. In this paper, we present a new query language, henceforth referred to as XSQL, that incorporates fea tures not found in earlier languages. XSQL is easier to use and it has more expressive power than previous languages. It is not our goal here to give the full-fledged syntax and semantics of XSQL. Rather, we use the familiar SQL-like syntax to illustrate certain philosophy in designing object-oriented languages-a philosophy put forward in [12, 10, 13, 8]. Before discussing the novelties found in XSQL, we should point out some of the differences between the object-oriented model and the relational model. The different features of these two models induce different modes of representing information and querying it. Suppose that a database includes information about engines and their types (e.g., turbo engines, diesel engines, etc.). In a relational database, there would likely be an attribute Eragin e Type having the various engine types aa its possible values. In an object-oriented database, there would likely be a class Engines having the various engine types as subclasses. This is a fundamental difference, because it shifts the information about engine types from the data to the schema. For example, suppose we want to know what are all the engine types. In the relational model, we simply project onto the attribute Engine Type. In the object-oriented model, we have to interrogate the schema rather than the data (and there is hardly any language for doing that). This shows the need for features not available in relational query languages. Jh particular, as an object-oriented schema is likely to have much more information than a relational schema, querying the schema (as well aa data without a complete knowledge of the schema) becomes an important issue. We also need to deal easily with nested structures. XSQL provides these (and other) features through path expressions. Although the idea of path expressions is not new (it first *Work supported in part by the NSF grants IRI-8903507 sad CCR-9102159. On sabbatical leave from Stony Brook University, Permission to copy without fee all or part of this material is granted provided that the copies are not made or distributed for direct commercial advantage, the ACM copyright notice â€¦