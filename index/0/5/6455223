The issue of integrating inheritance rules into Prolog has recently received some attention in literature. A Prolog-based interpreter extended with a special, built-in mechanism for handling is a taxonomies has been built. The motivation for this work stems from two observations: (1) is a hierarchies are common in many domains, and (2) the issue of representing in Prolog is a hierarchies, and the inheritance properties related to it, is not so straightforward as it would seem at a first glance, especially whether time and space efficiency are required. The model underlying the proposed extension is shown and compared with relevant literature. We describe how some new capabilities have been added to a standard Prolog interpreter in order to implement the extended interpreter. In particular, the unification algorithm and the management of some data areas have been modified. The space requirements and time performance of the extended interpreter are compared with those of the original standard Prolog interpreter, and the results of a series of tests are discussed.