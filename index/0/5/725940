Several hardware database-searchers for a large number of patterns or keys are presented. These searchers can be implemented by a random access memory and are suitable for VLSI implementation. Application of these searchers as database filters is described; a filter detects all the matched records in the database as well as a few others which don't match. The percentage of these unmatched records that manage to pass through can be reduced to any arbitrary minimum value; this is done, for example, by using several filters together, or passing the output records repeatedly through the same filters. Several filters can be used together by cascading them in series, parallel, and series-parallel fashion. The performance of the filters using iterative approach depends very much on the regrouping algorithms of the patterns/keys. Several such algorithms are presented and their performances compared. A single pass is required if they are pipelined. Hardware organization for different pipelined approaches are also studied. Experiments are performed for all the different hardware organizations mentioned above on an employee-name database. The results are presented in graph forms. They support the usefulness of these hardware organizations as filters.