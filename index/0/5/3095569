Often server systems do not implement the best known algorithms for optimizing average Quality of Service (QoS) out of concern of that these algorithms may be insufficiently fair to individual jobs. The standard method for balancing average QoS and fairness is optimize the <i>L<sub>p</sub></i> metric, <i>1 < p < ∞</i>. Thus we consider server scheduling strategies to optimize the <i>L<sub>p</sub></i> norms of the standard QoS measures, flow and stretch. We first show that there is no <i>n<sup>o(1)</sup></i>-competitive online algorithm for the <i>L<sub>p</sub></i> norms of either flow or stretch. We then show that the standard clairvoyant algorithms for optimizing average QoS, <i>SJF</i> and <i>SRPT</i>, are <i>O(1+ε)</i>-speed <i>O(1/ε)</i>-competitive for the <i>L<sub>p</sub></i> norms of flow and stretch. And that the standard nonclairvoyant algorithm for optimizing average QoS, <i>SETF</i>, is <i>O(1+ε)</i>-speed <i>O(1/ε<sup>(2+2/p)</sup>)</i>-competitive for the <i>L<sub>p</sub></i> norms of flow. These results argue that these standard algorithms will not starve jobs until the system is near peak capacity. In contrast, we show that the Round Robin, or Processor Sharing algorithm, which is sometimes adopted because of its seeming fairness properties, is not <i>O(1+ε)</i>-speed <i>n<sup>o(1)</sup></i>-competitive for sufficiently small <i>ε</i>.