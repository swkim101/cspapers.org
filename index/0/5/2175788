Computer architectures and programming languages are traditionally developed indepen&dbarbelow;ently. Through suitable computer architecture, for instance, one can attempt to speed up the processing of a stream of data and instructions, leaving to the software the burden of preparing these streams. Through a suitable programming language, one aims at efficiently describing many classes of problems, in a phrase-structure form that is machine indepen&dbarbelow;ent. This approach has led to the ever-increa&sbarbelow;ing application of computers, but it has also brought about a growing complexity in the sof&tbarbelow;ware systems. As a consequence of the latter, there is a new trend toward extending hardware implementation to replace the software ones, especially in view of the new technology of large scale integration.