Integri ty checking has been investigated extensively in the field of deductive databases. Methods have been developed to optimise the checking of an update by specialising the constraints for the information that could have been affected by i t . The optimisation has been applied to sets of updates resulting from the execution of unspecified update procedures. This paper investigates the compilation of integrity checking into the procedures themselves. The paper introduces a (procedural) update language, and describes how constraints are compiled into procedures expressed in this language. The compilation yields conditions on the original database state that guarantee safety of the update. The paper also shows why compilat ion into procedures offers impor tant possibilities for optimisation not available in the earlier framework. 1 I n t r o d u c t i o n Integrity constraint enforcement is important for preventing incorrect data being entered in data and knowledge bases. In databases only quite simple constraints are generally enforced by the system, such as types and functional dependencies. However most applications require more complex constraints. An integrity enforcement technique has been developed which separates the integrity constraints from the update procedures. First proposed in the context of relational databases [Nic82] the technique has been extensively researched in the context of deductive databases [SK88; Dec86; LST87; BDM88] and the references in [BMM90]. Under this approach the integri ty constraints are expressed as logical statements effectively yes/no queries and stored in the knowledge base. The system just checks the constraints that could have been affected by the update, and even then only what has (or could have) changed. We call this specialised integrity checking. It wi l l be described in more detail in the next section. To date integrity specialisation has been applied for updated literals (single inserts and deletes), for sets of updated literals, and for intentional updates (inserts/deletes satisfying a certain condition). However it is normally assumed that the set of updates is the result of an update procedure which is not visible to the specialiser. Specialisation is applied to the resulting update, not to the update procedure. In this paper we show how to specialise integrity constraints for the update procedures themselves. This yields significant reductions in the amount of checking that has to be done at update t ime. The reason is that update procedures often perform part ial integrity enforcement automatically. For example the procedure for hir ing an employee wi l l require that he has a salary which is a real number, and that he belongs to a department etc. In this paper we show how to compile integrity checking into update procedures in such a way that redundant checking is minimised. The aim is to eliminate any further checking at update t ime of constraints which are, from the design of the update procedure, bound to be satisfied after the update. The idea of compiling constraints into update procedures was first suggested in [Sto75], however the techniques applied here are quite different. Effectively we perform specialised integrity checking for update procedures at compile t ime. In section 2 we study integrity checking methods in deductive databases. The next section describes the update language used for encoding update procedures. In section 4 we explain how integrity constraints are compiled into these procedures. Specialised integrity checking implies a requirement, for reasoning over mult iple database states. However itis shown that this requirement can be compiled away so that there is no need for such a faci l i ty at update t ime. In fact the result of compilation is a safe update procedure comprising a condit ion, which is simply a query against the current database state, and then the original update procedure. 2 Cons t ra in ts on D e d u c t i v e Databases 2.1 C o n s t r a i n t s i n D e d u c t i v e Databases Deductive databases extend relational databases by supporting intentional data and logical dependencies amongst the data. A deductive database is a set of program clauses, divided into facts and rules. A program