A secure function evaluation protocol allows two parties to jointly compute a function <italic>f(x,y)</italic> of their inputs in a manner not leaking more information  than necessary. A major result in this field is: “any function <italic>f</italic> that can be computed using polynomial resources can be computed <italic>securely</italic> using polynomial resources” (where “resources” refers to communication and computation). This result follows by a general transformation from any circuit for <italic>f</italic> to a secure protocol that evaluates <italic>f</italic>. Although the resources used by protocols resulting from this transformation are polynomial in the circuit size, they are much higher (in general) than those required for an insecure computation of  <italic>f</italic>.
We propose a new methodology for designing secure protocols, utilizing the communication complexity tree (or branching program) representation of <italic>f</italic>. We start with an efficient (insecure) protocol for <italic>f</italic> and transform it into a secure protocol. In other words, ``any function <italic>f</italic> that can be computed using communication complexity <italic>c</italic> can be can be computed securely using communication complexity that is polynomial in <italic>c</italic> and a security parameter''. We show several simple applications of this new methodology resulting in protocols efficient either in communication or in computation. In particular, we exemplify a protocol for the Millionaires problem, where two participants want to  compare their values but reveal no other information. Our protocol is more efficient than previously known ones in either communication or computation.