The proliferation of multicore processors warrants parallelism as the future of computing, increasing the demand to write parallel programs for increased application performance. Previous experience has shown that writing explicitly parallel programs is inherently more difficult than writing sequential programs. Programmers need parallel programming models, constructs, and tools that can simplify writing of parallel programs. In this poster, we present an innovative new tool, HJ-Viz, which generates interactive Computation Graphs (CGs) of parallel programs by analyzing event logs. The visual feedback is valuable for a programmer to efficiently optimize program logic and to eliminate the presence of potential bugs which may otherwise be difficult to detect. For example, in cases of deadlocks, HJ-Viz enables users to visualize and easily diagnose the deadlock scenario.
 Programmers can use the visualization of the CG by HJ-Viz to pinpoint potential sources of bugs and points of improvement for parallel performance. HJ-Viz highlights the program's critical paths and displays the amount of work performed in each step of computation based on the collected abstract execution metrics. Our event logging infrastructure also maintains precise source code locations for each event, allowing HJ-Viz to display the code involved in the creation of every node in the CG.