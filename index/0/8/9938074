We conducted an observational case study of pair programmers and solo programmers in a challenging, time-limited programming exam in a split level course at the University of Georgia during the spring semester of 2013. Although we observed no significant difference in performance on the exam, we found that pair programming promoted the early application of critical thinking in the process of solving a challenging programming task. Specifically, the pair programmers were found to conduct more critical thinking and to ask important questions in the program design phase while solo programmers postponed the same required thinking activity and associated questions until the testing and debugging phase. We attribute the solo programmer's failure to delve into the difficult questions to the phenomenon of "bounded rationality" and propose that the social effects of pair programming serve to mitigate this phenomenon with the result that the pair programmers' behaviors better align with good software engineering practices and promote the acquisition of expertise.