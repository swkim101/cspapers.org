ing is modified in the system while the GC is examining it in order to determine which objects are garbage. We describe a concurrent garbage collector (GC) for object-oriented databases. Our GC uses a new synchronization mechanism (mechanism that allows the GC to operate concurrently with ordinary users of the database), called CC-consistent cuts. A GC-consistent cut is a set of virtual copies of database pages. The copies are taken at times such that an object may appear as garbage in the cut only if it is garbage in the system. Our GC examines the copies, instead of the real database, in order to determine which objects are garbage. More sophisticated GCs can execute concurrently with the applications. This implies that objects in the system may be modified at any time while the GC is examining them, and that the GC must implement a synchronization mechanism-a mechanism that ensures the correctness of garbage collection in spite of the modifications. The synchronisation mechanism that is both the oldest known and the most widespread today is called write barriers. It was introduced by Dijkstra et al. [5]. See Jones and Lins [9] or Wilson [14] for a complete description of the state of the art concerning write barriers. GC-consistent cuts are easy to implement by already-existing code that implements consistent read-only transactions. Our GC scales up. Unlike other scalable GCs, it does not require the user to explicitely partition the database into looselyconnected subsets, and does not introduce code that must run all the time, hereby avoiding to slow down the system while the GC is not running.