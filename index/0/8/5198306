A user interface management system (UIMS) is a software architecture in which the implementation of an application’s user interface is clearly separated from that of the application’s underlying functionality. This separation is both physical (separate code modules) and logical (separate data structures). Such a separation promises a cleaner and more modular architecture, as well as the possibility of a single user interface for multiple applications (or vice-versa), and faster interaction with the user. These advantages, and early successes in attaining them, have led many in the pursuit of a general purpose UIMS for building and running virtually any style of user interface. However, in recent years, as UIMSs are built to handle more sophisticated user interfaces with direct manipulation, concurrent processing, and multiple input/output channels, there has been concern that the separation between user interface and application raises more problems than it solves. Perhaps the prototypical problem arising from this separation is that of whether to handle the semantics of an interaction in the UIMS or the application program. For example, feedback is a task typically handled by the UIMS, but the semantically rich feedback required by direct manipulation user interfaces (e.g., highlight-