Many advanced real-time robot control systems use multiprocessor parallelism to provide the necessary computing power and low response time to external events. Multiprocessor parallelism requires the decomposition of the control software in parallel processes. A natural and efficient way to parallelize the control software is pipelining: data are transformed by the different stages of the pipeline, starting from the high-level user specification to the low-level control signals. The pipeline reflects the hierarchical structure of the software, and at the same time, allows the use of true hardware parallelism. This approach works well on applications with a single direction of information flow. However, in systems with feedback loops, the pipeline delay causes correction signals to be computed on stale data. To solve this problem one could omit the buffers and use machine language, but then all advantages of concurrent high-level languages are lost. The solution proposed in the paper preserves the advantages of parallel asynchronous processes written in high-level language. It is based on a decomposition of the global control strategy into a nested control structure, akin to human reflexes. The inner structure generates a fast autonomous, but approximate response on external stimuli, while the outer structure is responsible for a slower but more accurate behavior. The linearized entities of the inner loop can be updated in parallel at a much lower rate than the rate at which they are used. >