Increasingly, software plays a key role in critical, high-risk systems. The current practice to demonstrate that software does not adversely affect system properties, such as safety, is to satisfy a set of objectives prescribed by standards and/or guidelines. A good example of this is the DO-178C guideline recommended for software assurance in airborne systems. Typically, such documents recommend and/or mandate the processes to be employed for assurance, and the artifacts to be produced as evidence. However, the rationale connecting the recommended assurance processes, the artifacts produced, and the system properties to be assured, is largely implicit. Assurance cases provide exactly the mechanism, i.e., arguments and argument structures, to make these connections explicit and, thereby, subject to assessment. Several standards in high-risk domains such as defense, aviation, rail and automotive now require the development of an assurance case for software-intensive systems. 
 
An assurance case is a reasoned argument, supported by a body of evidence, that a system exhibits certain behavior in a defined environment. It is typically developed at the system level and focuses on a particular property, e.g., safety, security, or more generally, dependability. As such, there is an urgent need to develop models, techniques and tools that target the development of assurance arguments for software. Ultimately, these assurance arguments will form a core part of the assurance case for the wider system. Assurance cases are typically generated in a phased manner and relate to the main activities in a software engineering process (requirements development, design, implementation, verification and deployment). 
 
There are noteworthy parallels between the design of software as an artifact, and the design of an assurance argument for software, as a corresponding artifact: argument design to satisfy design criteria, argument abstraction and modularization, argument refactoring for maintainability and comprehension, the use of formal techniques for argument design and analysis, and the use of patterns, are but a few areas of correspondence. 
 
The goals of the 1st International Workshop on Assurance Cases for Software-intensive Systems (ASSURE 2013), co-located with ICSE 2013, are to explore techniques for the creation and assessment of assurance cases for software-intensive systems; leverage, adapt and apply techniques, concepts, and tools from software engineering in the assurance case lifecycle; identify the dimensions of effective practice in the development and evaluation of assurance cases, and identify critical challenges and define a roadmap for future developments.