CTDNet is a lambda calculus based reduction machine which was designed to support applicative evaluation on a parallel hardware. Its applicativeness provides it the useful feature of the ability to exploit parallelism both at beta-reduction and primitive reduction levels, but the same property also prevented it from handling recursive computations. The authors have suggested two different techniques to take care of this drawback in the machine. The modifications introduced in reduction rules or message handling preserve its applicative feature. Also the machine dealt with conditionals in a lazy manner to avoid computation of discardable work. Not only that this laziness has been preserved but it has been exploited in the two techniques for handling recursion.