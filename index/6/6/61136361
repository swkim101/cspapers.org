The need for active database rules to be able to interact with running application programs has been recognized for some time. In addition, technology that supports recoverable, transaction-consistent ow of requests from client applications to the database server and of responses from the server back to the client is maturing. The work described here uniies a exible mechanism for interaction between applications and an active DBMS with recoverable messaging services. The resulting system, an extension of the Ariel active DBMS, allows messages to be transmitted by an active rule action to one or more applications. These messages can be made persistent, via a recoverable queue, so they will not be lost due to server, client, or communication failure. In addition, messages transmitted by rules to applications can be delayed until transaction commit to prevent applications from taking action on the results of an uncommitted transaction. This paper describes the design and implementation of the system, including the system architecture, application/server communication facilities, and event processing mechanisms.