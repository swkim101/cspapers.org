Models have long been used in the development of complex systems. Their use is becoming more prevalent in the software development domain as modeling techniques and tools mature. Despite this, there are many challenging issues that the modeling research community must address if software modeling practices are to become mainstream. Furthermore, software and systems have become more intertwined, and the modeling techniques used for systems engineering need to be harmonized with software models. The 2015 edition of the MiSE (Modeling in Software Engineering) workshop aimed at discussing the state-of-the-art and future challenges in modeling, while bringing together different communities of researchers and practitioners who develop, analyze and deploy models in solving engineering problems. 
 
The primary goal of MiSE 2015 was to foster the exchange of innovative ideas on the use of models in software engineering. Another goal of this workshop was to further promote cross-fertilization between the model-driven engineering (MDE) communities (e.g., who associate with the MoDELS conference) and software engineering communities. Previous versions of the workshop showed that while there is great interest in collaborations and discussions across these communities, there are differences in terminologies and concepts that need to be harmonized for effective communication to take place. To ensure that discussions at the 2015 workshop progressed beyond the basic alignment of concepts, potential workshop participants were encouraged to familiarize themselves with the papers presented at the previous MiSE workshops, as well as papers that were to be presented at MiSE 2015. 
 
The workshop provided a forum for discussing and critically analyzing modeling techniques with respect to their purposes in software engineering processes. Participants engaged in the exchange of innovative technical ideas and experiences related to modeling, including modeling notations, abstraction techniques, modeling strategies, and use of models in development activities, including system configuration, system simulation, testing, and product line variability management. 
 
The workshop aimed to explore the following major purposes of software modeling: 
 
•Exploration: where models are used to explore and learn about the problem to be solved --- where the problem can be, for example, requirements identification, system specification, system or component design, complex protocol or algorithm design. Of particular interest was the use of models to enable "what-if?" analysis and prognostics (e.g., prediction), such as via models of Big Data. 
 
•Communication: Communication models are used to document software decisions (e.g., requirements, designs, and deployment decisions), or to enable discussion, conversation and negotiation between different stake-holder groups with different perspectives, vocabularies and needs. 
 
•Support for downstream activities: software models can be used to answer questions or check properties (e.g., correctness, fitness for use) of the modeled artifact, to generate other artifacts, or to configure existing systems. 
 
•Configurability and adaptation: where we use models at runtime to configure the system and adapt it to changed needs of the users. A model of the environment also allows a system to capture its knowledge about the context it controls or communicates with. 
 
The 2015 workshop focused on analyzing both successful and unsuccessful applications of software modeling techniques to gain insights into challenging modeling problems, including: (1) identifying, describing, and using appropriate abstractions, (2) supporting incremental, iterative development through the use of appropriate model composition, transformation and other model manipulation operators, (3) automated analysis of possibly large, possibly incomplete models to determine the presence or absence of desired and undesired properties, and (4) using models to ask questions, enable decision-making in organizations, or to support prognostics related to important domain-specific questions.