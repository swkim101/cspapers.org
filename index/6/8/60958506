ESDA or Electronic system Design Automation by description refers to automating electronic system design, but there is no universally accepted definition. This is understandable since there are so many interpretations and incarnations of just what constitutes a system! As a "system" is defined in the eye of the beholder, it should be expected that the design processes which deliver these products are notably different. The following highlights from our contributors underscore the breadth of this situation. From a computer systems focus: ESDA is an environment that lets me design systems! Rather than sitting on top of CAE, as others see it, I see ESDA as being "wide CAE." Real ESDA will let me do logic simulation, timing verification, signal integrity analysis, EMI, thermal and power analysis on entire systems. The variation from one system to the next is small enough that we tend to carry forward a lot of ideas and logic. We don't start from scratch a lot and don't need the high-level design entry being touted today. Another view: System design methodologies vary by type of business, product, customer and environment. Designers of FAX modem cards for PCs may be able to jump right into architectural design and state transition diagrams, while a large defense contractor may spend many months generating the system requirements document and preliminary partitioning of hardware and software component items. An entirely new design might start from scratch, while a design upgrade may have existing subsystems as initial constraints. Thus no physical level of hierarchy can be uniformly defined as "the system level." Key ESDA tools should include: hierarchy, multiple levels of abstraction, traceability, perspective transformations, downstream verification links, decision audit trails, virtual prototyping, and multi-user support. ESDA tools should be designed around the system engineer's view, not just a lead EE. From a tool vendor perspective: ESDA can be defined as a class of tools used to design the electronic portion of a system (composed of embedded software and hardware) from concept to implementation. This view focuses on the electronic portion of a system, and indirectly interacts with such disciplines as mechanical and EMI design. In this definition, implementation starts with an RTL description for the hardware and source code for the software. ESDA tools would include elements for design capture, highlevel verification and analysis, application-domain visualization, hardware/software codesign, partitioning and exploration, models, and links to CAE tools.