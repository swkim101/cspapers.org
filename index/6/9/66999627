Recommendation systems for software engineering are tools that help developers and managers to better cope with the huge amount of information faced in today's software projects. They provide developers with information to guide them in a number of activities (e.g., software navigation, debugging, refactoring), or to alert them of potential issues (e.g., conflicting changes, failure-inducing changes, duplicated functionality). Similarly, managers get only to see the information that is relevant to make a certain decision (e.g., bug distribution when allocating resources). Recommendation systems can draw from a wide variety of input data, and benefit from different types of analyses. 
 
Although many recommendation systems have demonstrable usefulness and usability in software engineering, a number of questions remain to be discussed and investigated: What recommendations do developers and managers actually need? How can we evaluate recommendations? Are there fundamentally different kinds of recommenders? How can we integrate recommendations from different sources? How can we protect the privacy of developers? How can new recommendation systems leverage lessons from existing ones? 
 
In this workshop, we will study advances in recommendation systems, with a special focus on evaluation, integration, and usability.