Computational Science and Engineering (CSE) software supports a wide variety of domains including nuclear physics, crash simulation, satellite data processing, fluid dynamics, climate modeling, bioinformatics, and vehicle development. The increase in the importance of CSE software motivates the need to identify and understand appropriate software engineering (SE) practices for CSE. Because of the uniqueness of CSE software development, existing SE tools and techniques developed for the business/IT community are often not efficient or effective. Appropriate SE solutions must account for the salient characteristics of the CSE development environment. This situation creates an opportunity for members of the SE community to interact with members of the CSE community to address this need. This workshop facilitates that collaboration by bringing together members of the SE community and the CSE community to share perspectives and present findings from research and practice relevant to CSE software. A significant portion of the workshop is devoted to focused interaction among the participants with the goal of generating a research agenda to improve tools, techniques, and experimental methods for studying CSE software engineering. 
 
The goal of this workshop is to facilitate interaction among researchers from SE and CSE, who do not normally interact, to discuss issues relevant to the intersection of these two fields. By bringing these groups together, our goal is to support the building of a common research agenda to deal with the complex software development issues present in the CSE domain. The 2011 paper topics include: Case studies of CSE software development processes, Lessons learned from the development of CSE applications, SE metrics and tool support for CSE applications, Empirical studies of environments, tools, languages, and processes used in CSE application development, and V&V techniques specifically targeted for the CSE domain. The specific software engineering topics covered by the papers include: design patterns, object-oriented design, agile methods, product lines, requirements, and reengineering software.