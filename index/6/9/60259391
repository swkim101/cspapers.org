The Ada programming language was designed for use in the implementation of embedded real-time computer systems. Although many of these systems are of a distributed nature, Ada does not explicitly support distributed execution and consequently many different models have been suggested. One such approach is based on the idea of a virtual node, which is both a design approach and an implementation model. The authors evaluate the York Distributed Ada approach using two criteria: expressive power and ease of implementation. By expressive power they mean the ease with which distributed algorithms can be written and partitioned. By each of implementation they mean the extent that the approach can be implemented without compiler support and how closely such an Ada implementation conforms to the language reference manual. Following the discussion of these issues, an example of a distributed Ada program is presented which illustrates the approach. >