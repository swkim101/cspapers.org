Most techniques to aid maintenance and evolution of software require to define extension points. Generally, developers try to anticipate the parts that are more likely to evolve, but they can make mistakes and spend money in vain. With Unanticipated Software Evolution, developers can easily change any element of the software, even those that are not related with an extension point. However, we have not found empirical validations of Unanticipated Software Evolution impact on development cost and quality. In this work, we design and execute an experiment for Unanticipated Software Evolution (specifically, using the COMPOR platform), in order to compare its results metrics -- time, lines of code, test coverage and complexity -- using OO systems as baseline. 30 undergraduate students were subjects in this experiment. We concluded that COMPOR have significant impact on the Lines of code and Complexity metrics, reducing the amount of lines changed and the McCabe cyclomatic complexity on evolution of a small system. Keywords-Unanticipated Software Evolution, Cost, Quality, Empirical software engineering, Software Evolution.