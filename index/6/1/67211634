The history of programming languages shows a continuous search for new composition mechanisms to find better ways for structuring increasingly complex software systems into modules that can be developed and reused independently. Composition mechanisms can address various forms of interactions, e.g., inheritance, delegation, aggregation, design patterns, contracts, explicit protocols, or domain-specific compositions. 
 
However, most languages adopt a fixed set of composition mechanisms, usually with explicit notation and predefined semantics. In case a language does not provide any mechanisms with the desired compositional behavior, programmers may need to write workarounds or introduce the new composition mechanism through macros, libraries, frameworks or language extensions. 
 
The FREECO workshop series intends to stimulate research in programming languages and software development by exploring the notion that languages should not offer a limited set of fixed composition mechanisms, but allow for flexibility, a wide variety of compositions, domain-specific and tailored compositions, or programmable compositions of various program artifacts. You can find more information about the FREECO workshop series at the workshop website located at: http://trese.ewi.utwente.nl/workshops/FREECO. 
 
These proceedings contain a selection of papers that were submitted for the FREECO@ONWARD!2011 workshop that was held as part of the SPLASH/ONWARD conference in Portland, OR, October 23-27, 2011. The workshop was a fruitful and constructive day, which resulted in new insights, new inspiration, as well as a poster with the workshop results, which was presented at the plenary poster event the next day.