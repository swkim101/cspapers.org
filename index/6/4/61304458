Proposes a new strategy for automatic code synthesis without the drawbacks of simple translations schemes. Its prime advantage is that the performance of the generated code is insensitive to the way and degree of partitioning of its specifications. By eliminating the 'internal' interprocess communication, it also solves the problem of queue dimensioning. The main idea behind the proposed method is to map SDL onto some kind of process algebra. The problem with SDL is that it is a language and not an algebra: there is no way of telling whether two SDL expressions are equivalent, apart from their being textually identical. Since the semantics of SDL are formally defined (which happened only recently), one can argue that two SDL expressions are equivalent when they exhibit the same behaviour (whatever that may be) but one still lacks operators that can be applied to SDL expressions. By mapping SDL onto a true process algebra, one has the opportunity to apply transformations on a specification, working toward a more efficient implementation while preserving the overall behaviour, and to analyze the specified behaviour. >