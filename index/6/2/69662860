Modern, high-performance processors rely on speculative execution to fully utilize available hardware resources. While speculative execution is designed such that side-effects do not affect the correct execution of the applications running on the system, speculation is not completely side-effect free. Specifically, not only are the microarchitectural state of the processor and the memory system modified during speculative execution, but their state is also not reverted to their original state upon a mis-speculation. This can lead to a number of security problems that can be broadly described as speculative side-channel attacks, such as the infamous Spectre, Meltdown, and their variants [1, 2]. The purpose of this work is to hide all observable side-effects of speculation in the memory system. We do not focus on any specific known attacks, not only because there are specialized solutions for most of them, but more importantly, because further attacks are bound to appear in the future. Instead, we aim to eliminate the exploitation of speculation side-effects as a side-channel for attacks, without suffering a debilitating performance loss. To achieve this, we propose a mechanism called "Ghost Loads", which are loads that do not update, to the degree possible, any of the state of the memory system. We only focus on loads since stores are kept hidden by default and any remaining types of memory accesses are rare and do not cause any significant performance loss if executed non-speculatively.