Some ways in which the sequential execution of Prolog can be parallelized are reviewed. Most existing methods cause microscopic forms of parallelism and thereby cause a strong deviation from the Prolog language semantics. The author presents Multi-Prolog, an alternative way to introduce parallelism into logic programming, in an attempt to design a process-oriented parallel Prolog. It is based on macroscopical parallelism (non-trivial processes) and on interprocess communication by means of a blackboard. Potential applications are multiple expert systems and applications requiring real-time responses. Multi-Prolog is developed to make optimal use of the resources offered by a shared memory multiprocessor with a limited number of processors. >