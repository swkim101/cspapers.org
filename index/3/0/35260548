From the perspective of computer science edueation, most (perhaps all) first courses in computer hardware are created “upside down” both pedagogically and pragmatically. Present courses are usually bottom-up, starting with very concrete but low level subjects such as bits and gates, and progressing through more complex constructs: binary arithmetic, arithmetic logic units, fetch execute cycle, microcode machine language, assembler language toward integrated systems. Pedagogically, this approach provides no “cognitive hooks”, which might enable students to relate new material to that of previous courses until the semester is almost complete. Pragmatically, assembly language can provide a powerful tool for understanding the logical construction of a computer, but students do not receive enough exposure to assembly for any non-trivial problems until late in the course. One way to rectify these problems, which has worked well at SUNY Geneseo, is to approach the course top-down, starting with abstractions of material already familiar to the students (e.g., the higher level language model), and working down toward the less familiar modek+ such as the digital logic view of based on bits and gates.