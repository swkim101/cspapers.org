INTRODUCTION Object-orientation as a software development paradigm has existed for some time; its beginnings can be traced to as long ago as the introduction of SIMULA in 1967 (Decker and Hirshfield, 1994; Luker, 1994). The development methods advocated by this paradigm have only more recently been included as serious topics in computer science education, however (Mazaitis, 1993), Currently, as industry increasingly calls for object-oriented methods to be included in undergraduate computer science education, and as object-orientation experiences growing recognition as an acceptable (even preferable) teaching paradigm, many college computer science departments have begun struggling with the task of implementing this methodology into their curricula (Mazaitis, 1993). The difficulty of the task is somewhat troubling since object-oriented techniques are forecasted to become the dominant software development methodology in the near future (Mazaitis, 1993; Lewis, 1993). According to some (Luker, 1994; Lewis, 1993), what is occurring in computer science, and what is reflected in the teaching practices at the college level is a paradigm shift, a revolutionary change away from the currently accepted structured analysis, design, and programming methodologies toward their counterparts in the object-oriented paradigm.