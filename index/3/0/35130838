Tutorial is an interactive exploratory learning tool designed toaid programmers in learning graphics programming and SiliconGraphics Inc.'s Graphics Library (GL) in particular.
Tutorial is driven by four demo programs that present<i>simulated source code</i> to the student. Thestudent uses Tutorial by executing each line of code and noticingits effects on the graphics state, representations of the internalhardware, and the final output. We intend that the exploratorynature of the system will result in deep learning of graphicsprogramming concepts.
The user interacts with Tutorial by modifying parameters to GLfunction calls, choosing lines of source code to execute, andmodifying the graphics state directly. Nearly all aspects of thegraphics state are both inspectable and modifiable, with thesechanges propagated throughout the entire system.
This interaction aids in: determining what are reasonableparameters for GL functions; observing how GL functionsinterrelate; observing how the functions modify the graphics state;and observing how the graphics state determines what is presentedin the final window.
The poster describes Tutorial and presents four scenarios ofTutorial in use. Each scenario is a series of pictures which showthe modification of function parameters and the effect of themodification on the final image. The scenarios we will show are:the use of the perspective and lookat to define the viewpoint andviewing volume; orthographic projection and how it relates to theviewport and the hardware zbuffer; how the 2-dimensionalorthographic projection, viewport and charstr interact; and usingthe overlay and underlay framebuffers.
Each scenario demonstrates how Tutorial enables the user to cometo a deeper understanding of the effects of various graphicslibrary functions. For instance, the relationship between theorthographic projection area and the viewport (screen) area isexplained. The scenarios also demonstrates the different ways theuser can interact with Tutorial. These include modifying functionparameters, altering the simulated source code, changing the<i>state</i> of the system directly (bypassing thesimulated source code), and inspecting various parts of thegraphics pipeline. As well the features of the interface and thecontrol of the simulated source code will become apparent from thescenarios.