Sussman (1973) has shown that strategies could be reordered according to experience. In his examples no conflicts were experienced after reordering. We shall illustrate that conflicts do arise and present a way of trying to overcome them. The program written (ELS) accepts a set of partially ordered Horn clauses as input and a sequence of problems to solve. The search tree obtained is examined in order to generate a priority ordering for the clauses used. If conflicts are detected, ELS tries to determine the conditions under which the clauses involved should be applied. For example , suppose the problem 3+2=X is to be solved and we are given the clauses: assoc: subs: subz: sue : pred: Generally, the problems are solved in a breadth first manner, but priority orderings between individual clauses are respected. First all clauses that match the given subgoal are chosen. In our case both the clauses 'subs' and 'subz' match the initial goal 3+2-X, as this goal matches X1+X2=X3. Both clauses are actually tried in the search, since initially there is no priority ordering specified between them. If it had been specified that 'subz<subs', only the clause 'subz' would have been tried. Figure 1 shows a part of the search tree produced by ELS when solving the goal 3+2=X. The search tree contains a number of choice points. Every time a choice is made ELS makes a note of which clause was given preference. After a successful solution has been reached (marked 'yes'), the preferences noted on the solution path are integrated with the existing priority orderings and then used to guide future searches. The integration is not just a matter of adding the new orderings to the old ones as conflicting requirements can occur. In our example we have one such conflict. First we require 'subz<subs' and then 'subs<subz'. To resolve the conflict, ELS looks back into the search tree. It assumes that one of the variable assignments in the clause 'subs' (or 'subz') is critical. In order to make a good guess which is the critical assignment, it compares the application which lies on the solution path (marked 'allow') with an application which lies just off the solution path (marked 'avoid'). A new clause is generated on the basis of this comparison. Care is taken so that it would mismatch the application marked 'avoid', but further unnecessary specializations are avoided. In our case ELS â€¦