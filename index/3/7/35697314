The synthesis of combinational or switching circuits is a major task in digital computer design. Somewhere along the design process a set of Boolean (logical) equations are stated by the designer which describe the properties of the digital system. The designer is then faced with the task of implementing this set of equations using, in general, a restricted inventory of integrated circuits which constitute the basic building blocks. The structure of this inventory imposes restrictions on the use of the commonly known AND-OR two-level logical circuit design techniques, such as Quine-McCluskey, etc., because if followed, the synthesis thus obtained is not necessarily the optimum with respect to the particular inventory. A question, therefore arises how to proceed or what general method should be followed to synthesize a given Boolean Function using any general building block, and what are the conditions under which this task is possible with the given particular inventory?
 First, the inventory should be adequate. This means that the set of available integrated circuits should be such that any given Boolean Function can be synthesized.
 Second, the synthesis algorithm to be followed should be independent of the complexity or simplicity of the used inventory.
 Third, the number of steps of the algorithm should be finite and a certain criterion of “optimum” should be followed at the different steps to satisfy the specific designer's constraints.
 In this paper we introduce a general algorithm which satisfies the requirements mentioned above and produces an adequate implementation of a logical net (without feedback) provided the designer establishes an “adequate” set of design criteria.