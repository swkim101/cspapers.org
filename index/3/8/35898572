Providing efficient machine learning (ML) analytics over relational data is a mainstream requirement for data management systems [2,5]. Several projects are building tools to closely integrate ML and data processing [3, 4, 9, 10]. Thus, there is a lot of interest in accelerating ML workloads using data management ideas. Recently, there are quite a few studies on accelerating ML workload by exploiting data redundancy introduced by joins [11â€“13]. For example, [12] shows how to train generalized linear models (GLMs) over primary key-foreign key (PK-FK) joined tables. [13] designs and analyzes a mechanism for speeding up linear regression over factorized joins. However, there are several limitations of the existing results. First, they are all tied closely with the underlying data systems, which incurs a large development overhead when a developer needs to implement the accelerated algorithms in his/her own systems. Secondly, to the best of our knowledge, all existing systems only work for a small subset of ML algorithms. [12] aims at GLMs, while [13] targets exclusively on linear regression. Consequently, it poses challenges for data scientists to design new ML algorithms over mutli-table data. This raises an important question: how to exploit redundancy in data generated by joins such that it i) helps developers avoid a large development overhead and ii) enables data scientists to design new algorithms without bothering about joins? In this abstract, we answer this question by pushing linear algebra (LA) operators over joins; we call this factorized linear algebra. The key insight is that a number of ML algorithms share common operators. Accelerating these operators can automatically speed up a large set of ML algorithms. Note that, by analogy to the database world where relational algebra is the main language, LA is the dominant language in the ML world. Thus, we focus on optimizing LA over normalized data, show how to speed up LA operators (e.g., matrix multiplications) over both PK-FK joins as well as equi joins, and implement the framework in open source R.