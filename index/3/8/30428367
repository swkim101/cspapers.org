Is it possible to excite students about learning the mathematical principles that underlie high-quality software? Can we teach them to apply these principles using modern software tools? Can this be accomplished without displacing existing content? In each case, the answer is a resounding yes - but it takes the right set of pedagogical principles, teaching tools, and classroom exercises. This hands-on laboratory will introduce a set of principles, tools, and exercises that have proven to work. By adopting one content module at a time, educators will better prepare students to reason rigorously about the software they develop and maintain.
 The workshop will introduce a series of independent content modules that can be introduced in any course where mathematical reasoning might be taught - from introductory programming and software engineering to data structures and algorithms. They are designed to supplement, rather than replace, existing course materials.
 Fees for this workshop will be covered for a limited number of attendees through an NSF award; limited travel support is also available. A laptop is required to participate.