Trellis is designed with these tenets first in mind. It then adopts type-safety through subtype-compatibility rules to ensure that the program model accurately reflects the intentions of the application writer, that encapsulation is preserved, and that inheritance and composition do not result in erroneous programs. The result is a language with the benefits of the object-oriented paradigm without the worry. Trellis programmers define simple types (such as Integer and Window) and parameterized types (such as List[T] and Set[T]) in th e course of building an application. A type’s interface contains operations, constants, and type-specific attributes (such as no-subtypes which indicates the type may not be subtyped). An operation specification contains argument types, a result type, exceptions, and other attributes. Types relat,e to one another according to a subtyping relationship and inheritance between types must maintain this relationship. Understanding subtype-compatibility is key to understanding the construction of Trellis type hierarchies. A Trellis type (say S) is a subtype of another type (T) if objects of type S can be used wherever an object of type T is expected without introducing even the possibility that a message may not be resolved. This is, in some sense, Trellis’ definition of type-safety: