In early 2014 I created and taught an introductory CS course for non-CS students at Mount Holyoke College. I chose to emphasize algorithmic thinking as a way of solving problems on and off the computer, so I needed concrete and appealing problems for the students to solve. Having the students create their own problems was my way of doing so. Based on a one week introduction to visual design, each student designed the image or animation that they would later program. As they did so outside class, the students and I collaborated in class solving the problems of implementing a design I had chosen: solving design problems of their own overlapped with algorithmic solution of implementation problems in class. Subsequently, they applied the classroom lessons to their own designs. The result was a collection of programmed images and animations the students were eager to show their families and friends. The dual nature of their practice appealed to the students: they were motivated to do the course-work; they took ownership of their work and of skills they acquired; they formed a cohesive community working together in the lab. Modeling on the classroom work in which they participated was effective in building programming skills. Most important several students expressed unprompted interest in taking a follow-on course.