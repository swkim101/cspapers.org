Extended Abstract-1. Introduction For almost as long as attempts at proving theorems by machines have been made, a critical problem has been well known: Equational axioms, if left without precautions in the data base of an automatic theorem prover (ATP), will force the ATP to go astray. Four approaches to cope with equality axioms have been proposed: (1) To write the axioms into the data base, and use an additional rule of inference, such as paramodulation. (2) To use special "rewrite rules". (3) To design special inference rules incorporating these axioms. (4) To develop special unification algorithms incorporating these axioms. At least for equational axioms, the? last approach (4) appears to be most promising. So far we have concentrated on the axioms of asso-ciativity, commutativity, idempotence and various combinations of these. In this paper, algorithms are presented for theories of idempotence and for idempotence together with commutativity. Idempotent functions appear in group theory, practical examples being proofs about substitutions which are i-dempotent if they are in normal form. See e.g. the proof of Theorem 3-2 in this paper. A historical example is how Luckham's program verifier found the correctness of Robinson's unification algorithm only after the idempotence for unifiers had been added. The main results are that the unification problem for idempotence is decidable,and the set of all uni-fiers is finite, but not a singleton in general. 2. Algorithm for I-Unification 2.1. Intuitive Overview. Our algorithm unifying two terms s and t is split up into two interlocking parts: (1) Collapsing phase: In both s and t we look for subterms (r^,^) s.t. r and r can be unified by a substitution p to r. Then, applying p to s and t causes subterms (r ,r2) to "collapse" to r, generating a new unification problem. (2) R-unification phase,: Unification problems resulting from the collapsing phase are solved by the algorithm RUNIFY. Essentially, RUNIFY follows the idea of Robinson's unification algorithm except for the way an atom and a non-atomic term is unified. (RUNIFY returns a success/failure message (SUCC/ FAIL) and a substitution (empty upon failure).) For space limitations we can not state the full algorithms but the following examples may indicate the basic idea: