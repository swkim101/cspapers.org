An architectural model of a self-descriptive relational data base is presented and the implementation problems are investigated. 
 
It is argued that self-descriptivity brings excellent properties of the data base management system. For example, users can easily extend the capability of the DBMS or fewer basic access commands can cover all the accesses to the data base. Thus, the self-descriptive data base architecture is an excellent candidate for a hardware data base management system where simple and yet universal access mechanism is badly needed. 
 
It is shown that a close relation exists between a self-descriptive data base and the DD/D. In fact, it is theoretically necessary that a DBMS be self-descriptive. The notions 'type' and 'occurrence' are also applied to relations, thus a relation type and corresponding relation occurrences are introduced and shown to be effective in representing the real world. An example of a self-descriptive data base relation is exhibited and the general characteristics of it is discussed. To make the system motions secure, a monitoring program is introduced and explained. A typical command process is described and its internal logic is shown in an ALGOL-like program codes. Four basic atomic commands, executed by a data base machine, are introduced and explained. The method to extend the basic data base management facility by using selfdescriptivity and exit routines is introduced and an example to enhance the integrity checking capability is demonstrated. The hierarchical locking method is applied and the problems peculiar to the self-descriptive architecture are investigated. Finally the implementation of temporary relations useful in various conditions is considered.