Ada 83 is an abstraction-oriented programming language. It supports the definition of abstract data types in modules called “packages,” with a separate interface and implementation. The next revision of the language is now being prepared, and is designated Ada 9X. This revision will support full object-oriented programming. As part of designing the object-oriented features of Ada 9X, we had a choice whether to construct a conventional but essentially independent objectoriented capability in addition to the existing abstraction-oriented features of Ada 83, or to make an effort to integrate the existing abstraction support with the minimal set of additional capabilities necessary to support object-oriented programming. We have chosen the latter approach, and as part of this effort, we have tried to isolate exactly what capabilities distinguish a full object-oriented programming language from an abstraction-oriented programming language like Ada 83. Our conclusion is that the essential new capability of object-oriented programming is that a given abstraction may effectively have multiple implementations. The objects carry sufficient extra information at run-time to identify to which implementation they correspond. In Ada 9X, we call this run-time type identification the “tag” of the object, and the corresponding new language capability is called “tagged types.” Permission to copy without fee all or part of this material is granted provided that the copies are not made or distributed for direct commercial advantage, the ACM copyright notice and the title of the publication and its date appear, and notice is given that copying is by permission of the Association for Computing Machinery. To copy otherwise, or to republish, requires a fee and/or specific permission. @ 1993 ACM 0-89791~587-9/93/0009/0127...$1.50 Introduction Ada 83[8] is an abstraction-oriented programming language. By this we mean it is a language that supports the definition of abstractions, each with a well-defined interface separated from its implementation. An abstraction (defined by a “package” in Ada) generally consists of one or more abstract data types (called “private types” in Ada), with corresponding operations for constructing, updating, and querying instances of the type. The implementations of the operations can be changed without disturbing the clients of the abstraction. The abstraction may or may not contain global state over and above the state represented within instances of the abstract data types. It if does, this global state is also generally managed internally, with operations provided for updating and querying the state, as appropriate. Ada is now undergoing a revision, as part of the normal ANSI and IS0 processes for periodically updating language standards. The revised language is currently designated Ada 9X]S], with balloting on the revised standard planned to start in late 1993. Adding Object-Orientation As part of this revision we are updating the language to be a true object-oriented language. This has turned out to be a challenging task, because many of the capabilities normally associated with object-orientation are already present in Ada 83, and rather than reinventing these capabilities in a different guise as part of a OOPSLA’93, pp. 127-136