Traditionally the freshman level computer science courses have been based exclusively on imperative programming languages and techniques. The emphasis lS upon having the student learn to program usin-g the structured tools of sequence, condition, and looping. The algorithms taught are given in a sequential fashion. The modularization of programs is done • rimarily by the use of procedures. Functions tend to e used as extensions of the set of operators rather than being used as programming techniques. With the recent emergence of artificial intelligence and the associated techniques as a major force in computer science applications, the importance of functional and logical programming Is growing. Industries are now looking for students with an AI background. Most computer science curriculums now offer courses in artificial intelligence and related areas. Some universities, including Texas A&M, have a required undergraduate course in AI for their computer science majors. The use of nonprocedural languages and techniques in these courses require programming skills other than those acquired by programming in imperative languages. The nonprocedural approaches to programming require a different set of thought processes than does • rocedural programming. These concepts are now eing taught within the AI related courses. Most students take these courses in their junior or senior year. At this point many students have developed work habits and mind sets that cause them to resist the transition to functional or logical programming. This paper reviews the experiences at Texas A&M in teaching functional programming in the freshman computer science courses and .proposes a course for freshman computer science majors that contains both procedural and functional programming. The language LISP is used along with Pascal to