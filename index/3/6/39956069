The database field has worked on metadata-related prob-lems for 30 years. Examples include data translation and migration, schema evolution, database design, schema / ontology integration, XML wrapper generation, data scrubbing and transformation for data warehouses, mes-sage mapping for e-business, and schema-driven web site design. Tools that address these problems are strikingly similar in their design. Arguably, we are making very little progress, since we keep reapplying the same old 1970’s techniques of data translation [9] and views to one new problem after another, without getting much leverage from each succeeding step. Despite all the research on the above tools, we have so far been unable to offer general-purpose database technology that factors out the similar aspects of these tools into generic database infrastructure. This panel addresses the following questions: Is it feasible to develop a generic infrastructure for managing models? If so, what would it need to do, beyond what’s offered in the best object-oriented databases and repositories? Can we devise a useful generic notion of model that treats all popular information structures as speciali-zations (SQL schemas, ER diagrams, XML DTD’s, object-oriented (OO) schemas, web site maps, make scripts, etc.)? Can we produce a generic model manipulation alge-bra that generalizes transformation operations devel-oped for data integration and translation, such as union, match, difference, and merge? What about generic operations on mappings between models, such as invert and compose? What is the role of an expression language that cap-tures the semantics of models and mappings, not only for design but also for run-time execution? Does a generic approach offer any advantages for model manipulation areas of current interest, such as data integration and XML? If the skeptics are right that a generic approach to model management is unachievable pie-in-the-sky, are writers of metadata-driven applications doomed forever to writing special-purpose object-at-a-time code for navigating their information structures? If so, what is the leverage that the database field can offer for these problems?