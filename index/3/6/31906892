Distributed data base systems can take on various architectures that pose different requirements and have both logical and performance implications for the application. Conversely, the application specifics also influence the choice of architecture. There is thus an interplay between choice of architecture and application specification. However, it has been argued that since the application need is often defined first, even before the decision to use a distributed approach is made, it should be possible for the application to be specified independently of the architecture, provided that an architecture - independent application definition scheme for distributed data base systems is available. The circularity of causality can then be cut and the design can proceed hierarchically. The essentials of such a scheme are presented here. The scheme uses the concept of abstract data types with two extensions termed instance extension and disinstantiation and is also applicable to data base systems not distributed.