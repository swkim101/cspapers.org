An insatiable desire for increased computational performance, as measured in operations per second, has always been one of the main considerations in the design of new computers. Multiprocessor architectures and vector processors provide two ways to improve performance. Fueled by the demand for faster processing, parallel architectures are moving out of the laboratories and into the work place. Given that parallel processing is becoming more common, it is important that our students be exposed to parallel programming because working with parallel processors is qualitatively different from working with sequential processors. Many of the programming techniques that were patiently learned for sequential machines are not appropriate for a parallel environment. The need to teach parallel processing presents problems, especially for smaller schools. Even though the costs are decreasing rapidly, many colleges and universities do not have any form of parallel computer, nor is it reasonable for them to acquire one in the near future. Second, many schools lack the resources to add a complctcly new course to their curriculum, especially a course that requires preliminary faculty development. Fortunately, there are ways to introduce students to parallel processing without purchasing new hardware and without developing an cntircly new course. This paper is designed for those who lack parallel hardware and a specific course in parallcl