Systems-on-Chip (SoC) complexity increases as a growing number of applications are integrated and executed on sophisticated multi-processor systems that strike a balance between performance, cost, power consumption and flexibility [4, 6]. Complexity is further increased by an increasing number of concurrently executing applications, which result in a large number of possible use-cases. The applications have mixed time-criticality, which is a mix between firm, soft, and no real-time requirements. Firm real-time requirements must always be satisfied to avoid unacceptable output quality loss. Occasional failures to meet soft requirements can be tolerated. Non-real-time applications do not have well-defined timing requirements, but must be responsive. Verification of real-time requirements is traditionally performed using formal timing analysis, simulation, or a combination of the two. Firm real-time applications demand rigorous formal analysis, since their requirements must always be met. In contrast, soft real-time applications are often verified by simulation for a large set of inputs, as they are often dynamic by nature and difficult to verify by formal methods in a cost-effective manner. A key challenge with verification is that platform resources, such as processors, interconnect, and memories, are shared between applications to reduce cost. This results in interference between applications, making their temporal behaviors inter-dependent. This causes three problems with respect to integration and verification. Firstly, accurate system-level simulation and several approaches to timing analysis become infeasible, because of the state-space explosion resulting from the many use-cases, application inputs, and resources states. Secondly, use-case verification becomes a circular process that must be repeated if an application is added, removed, or modified [3]. Thirdly, verification of a use-case cannot begin until all applications it comprises are available. The verification process hence depends on the availability of all applications, which may be developed by independent software vendors. Together, these problems contribute to making the integration and verification process a dominant part of SoC development, both in terms of time and money [3]. The CompSoC platform [1,2] addresses these problems by executing each application in an independent virtual platform. It also uses the SDF design flow [5] that automatically analyzes firm real-time applications and maps them to resources in a virtual platform, according to their resource and timing requirements. The CompSoC virtualization technology relies on two complexity-reducing concepts: predictability and composability, detailed as follows.