Object-Oriented Programming (OOP) has been recognized to havegreat potential in producing high quality, large reusable software.However, we often find it difficult to write good C++ or Smalltalkprograms. Without good program designs we will not reap thebenefits of OOP. On the other hand, Object-Oriented Design (OOD) isconsiderably more complex than that of the traditional designdisciplines such as Structured Design. Therefore, without the helpof powerful CASE tools, we may not achieve the benefits of OOD andOOP.
This demonstration will present TurboCASE, a multi-methodologysupporting CASE tool that supports both Object-Oriented Analysis(OOA) and OOD. TurboCASE provides multiple views to help softwaredesigners create good OOD models.
TurboCASE allows you to create and maintain Class Hierarchy,Class Collaboration, Class Definition, and Class Design Diagrams.The Class Hierarchy Diagram not only shows the class hierarchy, butalso helps resolve how polymorphism works. The class CollaborationDiagram gives three levels of abstraction showing how objectscommunicate with each other. The Class Definition Diagram shows themethods and instance variables of the class, as well as providingthe ability to browse the capabilities of the class inherited fromthe class hierarchy. The Class Design Diagram allows you to designa class similar to that of the Structured Chart with full supportof the method signature specification. These diagrams areintegrated through a project database, thereby providing multipleviews of the software design.
TurboCASE also provides intelligent help to refine the designsuch as abstracting the common behaviors of classes into anabstracted class. Subsystems can be designed top-down as well asbottom-up by abstracting from system components. These capabilitiesgreatly reduce the complexities of the designs and help achieveoptimal solutions.