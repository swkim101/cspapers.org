In 1971 John Johnston [1] introduced a new model to illustrate the execution of programs written in block structured languages such as Algol 60. This contour model connects the static picture of a program (the s tructure of the actual code) with a dynamic picture of the execution of the program. In both pictures, procedures and the program itself are represented as boxes, called contours, which are nested inside one another corresponding to the nesting structure of the program code. This nested contour structure is reminiscent of a topographic map. In order to represent the dynamic picture of execution, these contours appear when their procedures are called and disappear when their procedures finish executing. This dynamic action is easily illustrated in the classroom with chalk and eraser, but it is represented in a more permanent medium by the use of snapshots which show the state of the dynamic execution at strategic moments. The contour model has been used to explain concepts in programming languages in a junior-senior level textbook [2]. I have found a simplified version of the model to be a valuable tool for teaching the fundamentals of scope rules and parameter passing to beginning students learning modern block structured languages like Pascal. Although the model presented here will be referred to as the contour model, the reader should understand that modifications have been made to Johnston 's original contour model, particularly with regard to the representation of data. The examples presented here are in Pascal, but they can easily be adapted to other block structured languages. These examples are appropriate for students in an introductory course, and consequently they do not demonstrate the full power and versatility of this model. 2 A n e l e m e n t a r y e x a m p l e w i t h n o p a r a m e t e r s .