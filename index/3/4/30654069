An introductory course for nonmajors that overviews academic computer science has been under development at Duke University since the spring semester of 1986. This course introduces students to programming, teaches them the fundamentals of hardware and software and covers advanced topics such as program time complexity, parallel architectures, noncomputability, and artificial intelligence. The course emphasizes deep academic experiences for students including nontrivial programming assignments, circuit design problems, assembly language programming, hand simulation of a compiler to see its functioning, the study of execution time 5j programs, programming for parallel machines, proofs of noncomputability. and the hand simulation of some artificial intelligence systems. The purpose of the course is to prepare people in numerous disciplines to live with computers in the long term by understanding the fundamentals of the field. The course attempts to present most of the great ideas of computer science that have developed over the past several decades. The claim is that, with such preparation, students will be maximally prepared to understand the capabilities and limitations of machines and to have perspective on their appropriate role in society. This course is in contrast to the introductory courses that are usually given to such students at most colleges and universities. The typical choice is to teach either programming or what is usually called computer literacy [4,9,11]. Courses in programming are, of course, excellent educational experiences in clear thinking and problem solving and are almost always valuable for students. However, such courses do not address the broader concerns of a liberal arts student who needs to know the ultimate capabilities and limitations of machines. Computer literacy courses emphasize the development of useful skills such as the operation of software packages and their application to real world situations. They teach many useful facts about computers, but they do not necessarily engage the students in actually doing computer science. Again, the deeper understanding that comes from a detailed study of academic computer science is not achieved. This course attempts to provide the alternative to computer literacy asked for by J. Paul Myers at last year’s conference [8]. In his paper, he objected to the current trend in computer literacy courses, pointed to the increased maturity of current students, and campaigned for more genuinely academic studies. The general view of computer science given in the Duke course is in agreement with the Denning et al. report [S], “Computing as a Discipline”. The following sections