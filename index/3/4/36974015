This paper describes the second course in a graduate sequence in Computer Science given at the University of Tennessee, Knoxville. The purpose of this sequence is to provide students with a theoretical base in formal language theory for understanding and interpretation of concepts and relationships in programming and automata theory. The explicit purpose of the second course, “The Relationship of Formal Language Theory to Automata”, is to use the structure of grammars, primarily context-free grammars, to examine various aspects of automata theory. These aspects include deterministic and non-deterministic acceptors, processors with pushdown stores, and finite state machines. The first course in the series employs formal language theory as the vehicle for presenting concepts related to the theory of programming languages; this second course employs the same vehicle for presenting aspects of automata theory. The two courses combined achieve a unity whereby important relationships between programming and automata theory as well as applications stemming from these theories can be derived.
 This course meets for one and a half hours twice a week for ten weeks. Prerequisites for this course include the first course in this sequence, as well as, an intermediate sequence of courses in machine organization and programming languages plus basic courses in numerical analysis, probability and statistics, and at least two years of calculus.