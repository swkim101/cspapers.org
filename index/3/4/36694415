This paper describee some new methods used in PLANNER-BESM-6 system for the implementation of PLANNER. Backtracking is implemented with a single stack and no copying of activation frames is needed. Lists are represented as arrays of pointers ; the garbage collector for this representation requires no additional memory. Restrictions on variable values are accomplished by using 'semi-defined f structures. These methods have enabled to achieve the high efficiency of the system work. Together with the well-known techniques (coordinates in data base organization [3.4] , context number for f a i l-points [5] and so on) PLANNER-BESM-6 system uses some new methods. This paper briefly describes three of such methods. Backtracking is implemented with a single stack and without copying information in the stack. Lists are represented as arrays of pointers which contain the length of lists; the garbage collection used for this representation requires no additional space. Restrictions on variable values are accomplished with structures that are not fully defined. 1 • Introduction Newer programming languages [1,2] intended for use in Artificial Intelligence research have introduced many new facilities that make much more easy the construction of sophisticated AI systems. Therefore practical implementation of these languages and creating efficient methods for this are the necessary and important tasks for AI progress. Among the new languages PLANNER [ 3] has gained the widest popularity. PLANNER was the firBt language introducing a majority of the new concepts and methods. Now PLANNER attracts much attention: many papers propose methods of its translation , there are some practical implementations of it and others are being created. PLANNER-BESM-6 system is an interpreter. In some important aspects this system differs from other PLANNER systems. The system has been designed to be an efficient practical tool, so the efficiency of the language implementation, which is the heel of Achilles for PLANNER, has been given more attention rather than aiming to implement all without exception features of PLANNER. Some features which are not the main within the language but require the superfluous memory and time for their implementation have not been introduced into the input language of this system. For example the input language uses only recursive and backtrack regimes and prohibits actors' utilization in matching patterns. This has enabled to use methods that increase the efficiency of the system work. 2. Implementation of backtracking There are some schemes for implementing backtrack control. For example the paper [5] …