GLP is a general l inguist ic processor for the analysis and generation of natural language. It is part of a speech understanding system currently under development at the Computer Science Department of our university [ 2 ] . 1. The Structure of GLP GLP is based on a second generation version of the General Syntactic Processor GSP of Kaplan and Kay [3]. I ts architecture is shown in f i g . 1. GLP uses two central data structures, chart and agenda. The chart is a directed graph which represents the utterance being analysed (or generated) together with a l l i ts component structures for any point of time of the processor's operation. For the sake of simplici ty our i l lus t ra t ion of the chart's usage is l imited to the simpler case of text processing. In this case the chart is in i t ia l i zed by a sequence of vertices which mark the start and the end of the sentence and the boundaries between words. The vertices are connected by edges which are labelled by the words themselves and lexical information (see f i g . 2.) . During processing GLP introduces more and more edges into the chart representing const i tuents, part ial derivations, etc. Processing is finished when at least one spanning edge from the f i r s t to the last vertex is found which represents a completely specified interpretation of the sentence (see f i g . 3). All edges along one path through the chart belong to the same decomposition of the sentence. Besides these inactive edges during processing there are also active ones which represent only a part of a phrase, together with an indication which kind of information would be necessary to complete i t , i .e . to make an inactive edge out of i t . The agenda is a l i s t of tasks to be carried out over the chart. Each task is the procedural incarnation of a rule of the grammer, or a part of i t . As GLP realizes a multiprocessing scheme a l l tasks can be executed independently of one another as asynchronous parallel processes. The underlying grammar is a procedural one simi l a r to an Augmented Transition Network (ATN). I ts rules contain l ingu is t ica l ly defined operators, among which are operators for the formation of structures, selectors for accessing structures, predicates for testing the appl icabi l i ty of a rule or of parts of i t , operators to cause side effects and to affect the flow of control . The formalism used is similar to that of Kay's[3] reversible grammar system in which the rules are treated as coroutines. The whole processing is controlled by a monitor which is responsible for the i n i t i a l i za t i on of the system and the generation and management of processes. It is the monitor which creates new tasks, spl i ts complex tasks into potential ly parallel executable subtasks, and maintains process and state information. The tasks themselves are executed by an interpreter (or processor) whose instruction set is the set of grammatical operators. Whenever a task sends an interrupt the monitor has to update the chart with the information sent along with it and to look at inactive edges whether there are suspended processes which would need exactly this information to be resumed. The monitor causes the selection of tasks from the agenda by means of a selector in an order determined by strategical reasons which are based on l inguist ic theory. The parsing strategy is realized by a scheduler which gives pr io r i t ies to tasks and so fixes their order of execution. Thus the strategy may be f lex ib le over the whole parsing process; top-down or bottomup processing are not characteristic for the processing as a whole but only for parts of i t . Clearly the structure of GLP does not l im i t i t s ab i l i t y to perform syntactic analysis; with a su i t able l inguis t ic data base (lexicon and grammar) it can be applied from phonological/morphological to semantic processing. The desire to break down the tradit ional borders between morphological, syntactic and semantic processing was not the least reason to choose this kind of systems architecture. Part i cularly in systems for processing continuous speech, because of uncertain data, progress in one level of analysis can only be achieved by confirmations from dif ferent levels so that a common data structure for a l l levels so that a common data structure for a l l levels of processing and a unique control structure allowing a f lex ib le strategy become essential 2. Special Features of GLP Besides an improved set of grammatical operators, GLP is able