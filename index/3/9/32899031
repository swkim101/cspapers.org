The impact of the ubiquitous microprocessor is being felt at all levels of education and industry. It is not only changing the technology of production, but altering the basic concepts of the design cycl e itself. The tremendous flexibility of "programmable architecture" [1,2], or "dynamic configuration " [3,4], dictates that hardware-standardized, software-customized modules, of which microprocessors for m an integral part, are the way of the future. Changes of this magnitude must be reflected in ou r computer science curriculum, else our own relevance is suspect. How to reflect this technologica l shift in the classroom is the subject of this paper. 171 REALIZATIONS A first realization is that microprocessor-based systems are, by their very nature, hybri d hardware/software systems. True, microcomputer s can teach either hardware or software with only lip-service to the other, but to do so is to abridg e the total learning experience available. The electrical engineer who denies the existence or importance of sophisticated programming techniques an d cross-software support systems is missing the poin t just as surely as the computer scientist who disdain s the ability to quickly and accurately implement a hardware device interface. The hardware/softwar e nature of microprocessors can be explained, utilized , and even exploited for the benefit of the studen t who will soon be designing his own microprocessor-based systems. Secondly, microprocessors are popular. The y represent state-of-the-art technology and as suc h benefit directly from students' natural curiosit y and motivation. The first offering of a graduate-level computer science course at the University o f Virginia attracted widespread attention and inquir y from students, faculty, government, and industr y within a 150 mile radius. A third realization is that microprocessor s illustrate some basic computer science concept s as well as, or even better than, a large machine. Techniques of interrupt handling, peripheral device interfacing, direct memory access, assembl y language programming, etc ., are easier to teac h and understand when presented in a simple environment uncluttered by the non-enlightening complexities of a big machine. Finally, the hands-on experience provided b y low-cost microprocessor-based equipment is an invaluable and cost-effective teaching aid. Whil e lectures present a broad range of knowledge, a laboratory experience permits practical applicatio n and in-depth examination of the course material at a very practical level. STRUCTURE Should microprocessor education be formalize d as a new subject, or should the content of â€¦