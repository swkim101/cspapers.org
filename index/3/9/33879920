We present an in-depth look at the abiity of existing models and languages to support different forms of reuse and evolution. The intended tutorial participants are experienced object-oriented programmers and analysts who want to improve the adaptability of their models and programs. The design patterns described by Gamma, Helm, Johnson, and Vlissides [l] in 1994 ensure that a certain system aspect can vary over time. In this tutorial we help the participant recognize an underlying principle common to many existing design patterns, namely the ability to allow the implementation of an object or class to vary dynamically. We present a key concept in supporting dynamic evolution: the context class. At the design level we present a simple extension to the Unified Modeling Language [2] for describing context classes. At the implementation level we demonstrate how to develop Java [3] programs using context objects. We demonstrate how context objects can be used to easily model and program patterns such as the Adapter, Bridge, Chain of Responsibility, Decorator, Iterator, Observer, State, Strategy, and Visitor. Tutorial Content We present techniques for achieving dynamic behavior in a static, class-based model and language. We focus on two forms of behavior evolution: