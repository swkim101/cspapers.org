When the time comes to make a critical decision, it is of paramount importance to prepare enough so that all the information necessary is available at decision time. Under-preparation leads to uninformed decisions; over-preparation, however, may lead to conservative decisions. Often a decision seems suboptimal after its consequences are known; regret is a typical reaction in such a situation. In life and in my research I have often followed the wrong path. More accurately, I have often followed a path that led to suboptimal results or unwanted consequences. The difficulty is to fight the urge to regret and rather learn from the process; divide the input that led to the wrong path into the part that could have been made better (and is the reason for the suboptimal outcome) and the part that was already as good as it gets. Next time, prepare less for the former while keeping the latter an invariant. We are often faced with daunting decisions when designing database systems on modern heterogeneous, ever-faster hardware platforms. After having built hierarchical, object-oriented, relational, and just-in-time (JIT) systems by myself or with a team, I realize that a great deal of the performance is determined less from determining what data model to use or what index to build ahead of time and more from making decisions at the right time. Educated JIT works using mathematics and dynamic programming, and it helps prepare for invariants. We make decisions only when all the information is at hand for the more flexible (and more decisive) part of the input. Even if the response time of the first few requests is high, these serve as "teaching" exercises for the subsequent ones. Tools like code generation and data virtualization help make JIT useful in data management. I hope that our community will build many JIT systems and benefit from the dynamic nature of this philosophy. As many computer scientists do, I routinely use what I learn in my research to optimize performance in a multi-dimensionally unpredictable everyday life, and vice versa. I've built systems by mapping design choices to life challenges, and have tried to relate to my students' personalities and help them overcome hurdles while filtering through my (often boring, but hopefully useful) personal experiences. In my talk I will share some of these experiences, intertwined with exciting research directions. I am humbled and grateful to receive the VLDB Women in Database Research award, and I thank the community for this distinction.