There is a recent exciting line of work in distributed graph algorithms in the CONGEST model that exploit expanders. All these algorithms so far are based on two tools: expander decomposition and expander routing. An (<tex>$\epsilon, \phi$</tex>)-expander decomposition removes <tex>$\epsilon$</tex>-fraction of the edges so that the remaining connected components have conductance at least <tex>$\phi$</tex>, i.e., they are <tex>$\phi$</tex>-expanders, and expander routing allows each vertex <tex>$v$</tex> in a <tex>$\phi$</tex>-expander to very quickly exchange <tex>$\deg(v)$</tex> messages with any other vertices, not just its local neighbors. In this paper, we give the first efficient deterministic distributed algorithms for both tools. We show that an (<tex>$\epsilon, \phi$</tex>) -expander decomposition can be deterministically computed in <tex>$\text{poly} (\epsilon^{-1})n^{o(1)}$</tex> rounds for <tex>$\phi= \text{poly} (\epsilon)n^{-o(1)}$</tex>, and that expander routing can be performed deterministically in <tex>$\text{poly} (\phi^{-1})n^{o(1)}$</tex> rounds. Both results match previous bounds of randomized algorithms by [Chang and Saranurak, PODC 2019] and [Ghaffari, Kuhn, and Su, PODC 2017] up to subpolynomial factors. Consequently, we derandomize existing distributed algorithms that exploit expanders. We show that a minimum spanning tree on <tex>$n^{-o(1)}$</tex>-expanders can be constructed deterministically in <tex>$n^{o(1)}$</tex> rounds, and triangle detection and enumeration on general graphs can be solved deterministically in <tex>$O(n^{0.58})$</tex> and <tex>$n^{2/3+o(1)}$</tex> rounds, respectively. Using similar techniques, we also give the first polylogarithmic-round randomized algorithm for constructing an (<tex>$\epsilon, \phi$</tex>) -expander decomposition in <tex>$\text{poly} (\epsilon^{-1}, \log n)$</tex> rounds for <tex>$\phi=1/\text{poly}(\epsilon^{-1}, \log n)$</tex>. This algorithm is faster than the previous algorithm by [Chang and Saranurak, PODC 2019] in all regimes of parameters. The previous algorithm needs <tex>$n^{\Omega(1)}$</tex> rounds for any <tex>$\phi\geq 1/\text{poly}\log n$</tex>.