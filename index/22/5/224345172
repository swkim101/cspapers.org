This paper describes our experience applying formal meth-ods to a critical component in the Linux kernel,the just-in-time compilers (“JITs”) for the Berkeley Packet Filter (BPF) virtual machine. We verify these JITs using Jitterbug, the ﬁrst framework to provide a precise speciﬁcation of JIT correctness that is capable of ruling out real-world bugs, and an automated proof strategy that scales to practical implementations. Using Jitterbug, we have designed, implemented, and veriﬁed a new BPF JIT for 32-bit RISC-V, found and ﬁxed 16 previously unknown bugs in ﬁve other deployed JITs, and developed new JIT optimizations; all of these changes have been upstreamed to the Linux kernel. The results show that it is possible to build a veriﬁed component within a large, unveriﬁed system with careful design of speciﬁcation and proof strategy.