Persistent memory offers persistence and byte-level ad-dressability at DRAM-like speed. Operating system support and some user-level library support for persistent memory programming has emerged. But we think lack of native programming language support is an impediment to a programmer’s productivity. This paper contributes go-pmem , an open-source extension to the Go language compiler and runtime that natively supports programming persistent memory. go-pmem extends Go to introduce a runtime garbage collected persistent heap. Often persistent data needs to be updated in a transactional (i.e., crash consistent) manner. To express transaction boundaries, go-pmem introduces a new txn block which can include most Go statements and function calls. go-pmem compiler uses static type analysis to log persistent updates and avoid logging volatile variable updates whenever possible. To guide our design and validate our work, we developed a feature-poor Redis server go-redis-pmem using go-pmem . We show that go-redis-pmem offers more than 5x through-put than unmodiﬁed Redis using a high-end NVMe SSD on memtier benchmark and can restart up to 20x faster than unmodiﬁed Redis after a crash. In addition, using compiler microbenchmarks, we show go-pmem ’s persistent memory allocator performs up to 40x better and transactions up to 4x faster than commercial libraries like PMDK and previous work like Mnemosyne.