Often we find it difficult to adapt to any changes during later phases of a software development project. Primary reason for this is rigidity in design and code which do not allow major changes to be incorporated. This inflexibility substantially increases the cost of post-delivery enhancement and maintenance and is termed as Technical Debt. As Technical Debt cannot be eliminated completely, we need to reduce its burden. Many practitioners, especially from agile community, have suggested some practices to avoid or overcome the Technical Debt. This paper explores the methods for relief from Technical Debt and proposes thirteen steps that a developer should follow to minimize technical debt. These steps have proved to be effective when implemented in projects as discussed in this paper. (5 pages)