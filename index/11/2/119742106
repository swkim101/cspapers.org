Given a function <bold><italic>f</italic></bold> over a domain and an element <bold><italic>x</italic></bold> in the domain, the cycle detection problem is to find a repetition in the sequence of values <bold><italic>x</italic>, <italic>f</italic>(<italic>x</italic>), <italic>f</italic>(<italic>f</italic>(<italic>x</italic>)), <italic>f</italic><supscrpt>3</supscrpt>(<italic>x</italic>)</bold>,. . . , if one exists. This paper investigates lower bounds on the number of function evaluations needed when there is a bound on the amount of memory available. For certain restricted classes of algorithms which use two memory locations optimality is achieved. A summary of the major results appears in the final section.