Secure Computation (SC) is a family of cryptographic primitives for computing on encrypted data in single-party and multi-party settings. SC is being increasingly adopted by in-dustry for a variety of applications. A signiﬁcant obstacle to using SC for practical applications is the memory overhead of the underlying cryptography. We develop MAGE, an execution engine for SC that efﬁciently runs SC computations that do not ﬁt in memory. We observe that, due to their intended security guarantees, SC schemes are inherently oblivious — their memory access patterns are independent of the input data. Using this property, MAGE calculates the memory access pattern ahead of time and uses it to produce a memory management plan. This formulation of memory management, which we call memory programming , is a generalization of paging that allows MAGE to provide a highly efﬁcient virtual memory abstraction for SC. MAGE outperforms the OS virtual memory system by up to an order of magnitude, and in many cases, runs SC computations that do not ﬁt in memory at nearly the same speed as if the underlying machines had unbounded physical memory to ﬁt the entire computation. Abstract Our artifact consists of a MAGE prototype and scripts to use it to run our experiments from §8. The MAGE prototype can execute SC efﬁciently even when the computation does not ﬁt in memory. It does so by using memory programming to provide a very efﬁcient virtual memory abstraction. Our prototype supports distributing an SC computation across workers that communicate over the network, allowing for parallel and distributed SC execution. The MAGE prototype presently supports two SC protocols: garbled circuits and CKKS. It follows the layered architecture described in §4.3. artifact be used