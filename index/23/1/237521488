Trusted Execution Environments such as Intel SGX provide software applications with hardware support for preventing attacks from privileged software. However, these applications are still subject to rollback or replay attacks due to their lack of state continuity protection from the hardware. Therefore, maintaining state continuity has become a burden of software developers, which is not only challenging to implement but also difﬁcult to validate. In this paper, we make the ﬁrst attempt towards formally verifying the property of state continuity for SGX enclave programs by leveraging the symbolic veriﬁcation tool, Tamarin Prover, to model SGX-speciﬁc program semantics and operations, and verify the property of state continuity with respect to monotonic counters, global variables, and sealed data, respectively. We apply this method to analyze these three types of state continuity issues exhibited in three open-source SGX applications. We show that our method can successfully identify the ﬂaws that lead to failures of maintaining state continuity, and formally verify the corrected implementation with respect to the desired property. The discovered ﬂaws have been reported to the developers and some have been addressed.