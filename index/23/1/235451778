Modern consensus algorithms are required to service a large number of client requests quickly. Responding to these requirements, several algorithms have sought to reduce bottlenecks to consensus performance, such as network usage and reliance on a single leader process. While the use of leaderless algorithms resolves process and network imbalance, one resource has seen increased use - stable storage. Leaderless consensus algorithms require at best 3nover4 of n acceptors to write to stable storage, limiting the benefit of these algorithms in larger systems. Meanwhile, the use of a single leader incurs only ƒ + 1 writes per proposal, where ƒ is the desired number of tolerated liveness failures. Here, a leaderless consensus algorithm that requires only ƒ + 1 writes per proposal is described. It is shown also to improve throughput of commands executed as system size increases without a corresponding degradation to latency.