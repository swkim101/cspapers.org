In this work, we revisit the fundamental and well-studied problem of approximate pattern matching under edit distance. Given an integer <tex>$k$</tex>, a pattern <tex>$P$</tex> of length <tex>$m$</tex>, and a text <tex>$T$</tex> of length <tex>$n\geq m$</tex>, the task is to find substrings of <tex>$T$</tex> that are within edit distance <tex>$k$</tex> from <tex>$P$</tex>. Our main result is a streaming algorithm that solves the problem in <tex>$\tilde{\mathcal{O}}(k^{5})$</tex> space<sup>1</sup><sup>1</sup>Hereafter, <tex>$\tilde{\mathcal{O}}(\cdot)$</tex> hides a <tex>$\text{poly} (\log n)$</tex> factor. and <tex>$\tilde{\mathcal{O}}(k^{8})$</tex> amortized time per character of the text, providing answers correct with high probability. This answers a decade-old question: since the discovery of a poly (<tex>$k\ \text{log}\ n$</tex>) -space streaming algorithm for pattern matching under Hamming distance by Porat and Porat [FOCS 2009], the existence of an analogous result for edit distance remained open. Up to this work, no poly (<tex>$k\ \text{log}\ n$</tex>)-space algorithm was known even in the simpler semi-streaming model, where <tex>$T$</tex> comes as a stream but <tex>$P$</tex> is available for read-only access. In this model, we give a deterministic algorithm that achieves slightly better complexity. Our central technical contribution is a new space-efficient deterministic encoding of two strings, called the greedy encoding, which encodes a set of all alignments of cost at most <tex>$k$</tex> with a certain property (we call such alignments greedy). On strings of length at most <tex>$n$</tex>, the encoding occupies <tex>$\tilde{\mathcal{O}}(k^{2})$</tex> space. We use the encoding to compress substrings of the text that are close to the pattern. In order to do so, we compute the encoding for substrings of the text and of the pattern, which requires read-only access to the latter. In order to develop the fully streaming algorithm, we further introduce a new edit distance sketch parameterized by integers <tex>$n > k$</tex>. For any string of length at most <tex>$n$</tex>, the sketch is of size <tex>$\tilde{\mathcal{O}}\overline{(k}^{2})$</tex>, and it can be computed with an <tex>$\tilde{\mathcal{O}}(k^{2})$</tex>-space streaming algorithm. Given the sketches of two strings, in <tex>$\tilde{\mathcal{O}}(k^{3})$</tex> time we can compute their edit distance or certify that it is larger than <tex>$k$</tex>. This result improves upon <tex>$\tilde{\mathcal{O}}(k^{8})$</tex>-size sketches of Belazzougui and Zhang [FOCS 2016] and very recent <tex>$\tilde{\mathcal{O}}(k^{3})$</tex>-size sketches of Jin, Nelson, and Wu [STACS 2021].