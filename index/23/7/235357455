Poor data locality hurts an application’s performance. While compiler-based techniques have been proposed to improve data locality, they depend on heuristics, which can sometimes hurt performance. Therefore, developers typically ﬁnd data locality issues via dynamic proﬁling and repair them manually. Alas, existing proﬁling techniques incur high overhead when used to identify data locality problems and cannot be deployed in production, where programs may exhibit previously-unseen performance problems. We present selective proﬁling, a technique that locates data locality problems with low-enough overhead that is suitable for production use. To achieve low overhead, selective proﬁling gathers runtime execution information selectively and incrementally. Using selective proﬁling, we build DMon, a system that can automatically locate data locality problems in production, identify access patterns that hurt locality, and repair such patterns using targeted optimizations. Thanks to selective proﬁling, DMon’s proﬁling overhead is 1.36% on average, making it feasible for production use. DMon’s targeted optimizations provide 16.83% speedup on average (up to 53.14%), compared to a baseline that uses the highest level of compiler optimization. DMon speeds up PostgreSQL, one of the most popular database systems, by 6.64% on average (up to 17.48%).