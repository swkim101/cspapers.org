While fuzz testing proved to be a very effective technique to ﬁnd software bugs, open challenges still exist. One of the its main limitations is the fact that popular coverage-guided designs are optimized to reach different parts of the program under test, but struggle when reachability alone is insufﬁcient to trigger a vulnerability. In reality, many bugs require a speciﬁc program state that involve not only the control ﬂow, but also the values of some of the program variables. Unfortunately, alternative exploration strategies that have been proposed in the past to capture the program state are of little help in practice, as they immediately result in a state explosion. In this paper, we propose a new feedback mechanism that augments code coverage by taking into account the usual values and relationships among program variables. For this purpose, we learn likely invariants over variables at the basic-block level, and partition the program state space accordingly. Our feedback can distinguish when an input violates one or more invariants and reward it, thus reﬁning the program state approximation that code coverage normally offers. We implemented our technique in a prototype called I NVS C OV , developed on top of LLVM and AFL ++ . Our experiments show that our approach can ﬁnd more, and different, bugs with respect to fuzzers that use a pure code-coverage feedback. Furthermore, they led to the discovery of two vulnerabilities in a library tested daily on OSS-Fuzz, and still present at the time in its latest version.