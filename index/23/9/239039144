Numerous robotic and control applications have strict real-time requirements, which, when violated, result in reduced quality of service or, in case of safety critical applications, might even have catastrophic consequences. To ensure that certain real-time constraints are satisfied, roboticists have relied on real-time safe frameworks, environments and middleware. With the introduction of ROS 2, alongside kernel patches such as PREEMPT_RT, there is an abundance of solutions to pick from. This paper compares OROCOS and ROS 2 over PREEMPT_RT and vanilla Linux kernels in a variety of benchmarks and draws conclusions on their performance in real-time critical applications. The outcome of the benchmark shows comparable performances under normal conditions. However, when the system is under stress both frameworks suffer in different fashions. Furthermore, the results show an accumulating error which over time violates the real-time requirements in both frameworks. These findings are paramount in conducting real world application with real-time constraints.