In this paper we study the problem of finding fair and efficient allocations of a mixed manna, i.e., a setM of discrete items that are goods/chores, among a set N of agents with additive valuations. We note that a mixed manna allows an item to be a good (positively valued) for some agents, and a chore (negatively valued) for others, and thereby strictly generalizes the extensively studied goods (chores) manna. To measure fairness and efficiencywe consider the popular and well studied notions of maximin-share (MMS) and Pareto optimality (PO) respectively. AnMMS allocation is one where every agent gets at least herMMS value. However, [6] showed that an MMS allocation may not always exist. This prompted a series of works on the efficient computation of α-MMS allocations, where every agent gets at least α (1/α) times her MMS value for a goods (chores) manna, for progressively better α ∈ [0, 1]; the best factor known so far is α = (3/4 + 1/(12n)) by Garg and Taki [2] for n ≥ 5 agents for goods, and 9/11 for chores [5]. No such results are known for the mixed manna. Even for the goods (chores) manna, no work has explored the PO guarantee in addition toMMS, to the best of our knowledge. In this paper, we first show that, for any fixed α ∈ (0, 1], an α-MMS allocation may not always exist; in contrast, non-existence with a goods manna is known for α close to one. This rules out efficient computation for any fixed α, and naturally raises the following problem. Problem of Interest. Design an efficient algorithm to find an α-MMS + PO allocation for the best possible α , i.e., the maximum α ∈ (0, 1] for which it exists. This exact problem is intractable: In the case of identical agents, an (α = 1)-MMS allocation exists by definition. However, finding one is known to be NP-hard for a goods manna. On the positive side, a polynomial-time approximation scheme (PTAS) is known for this case; given a constant ε ∈ (0, 1], the algorithm finds a (1 − ε)-MMS allocation in polynomial time. Guaranteeing PO in addition adds to the complexity, since even checking if a given allocation is PO is coNP-hard. In light of these results, we ask,