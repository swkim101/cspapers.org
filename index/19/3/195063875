—Binary difﬁng analysis quantitatively measures the differences between two given binaries and produces ﬁne-grained basic block level matching. It has been widely used to enable different kinds of critical security analysis. However, all existing program analysis and machine learning based techniques suffer from low accuracy, poor scalability, coarse granularity, or require extensive labeled training data to function. In this paper, we pro-pose an unsupervised program-wide code representation learning technique to solve the problem. We rely on both the code semantic information and the program-wide control ﬂow information to generate basic block embeddings. Furthermore, we propose a k - hop greedy matching algorithm to ﬁnd the optimal difﬁng results using the generated block embeddings. We implement a prototype called D EEP B IN D IFF and evaluate its effectiveness and efﬁciency with a large number of binaries. The results show that our tool outperforms the state-of-the-art binary difﬁng tools by a large margin for both cross-version and cross-optimization-level difﬁng. A case study for OpenSSL using real-world vulnerabilities further demonstrates the usefulness of our system.