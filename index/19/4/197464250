We present a method for providing semantic interpretations for languages which feature inheritance in the framework of statically checked, rich type disciplines. We illustrate our approach on an extension of the language Fun of Cardelli and Wegner, which we interpret via a translation into an extended polymorphic lambda calculus. Our approach interprets inheritances in Fun as coercion functions already definable in the target of the translation. Existing techniques in the theory of semantic domains can be then used to interpret the extended polymorphic lambda calculus, thus providing many models for the original language. Our method allows the simultaneous modeling of parametric polymorphism, recursive types, and inheritance, something that was regarded as problematic because of the seemingly contradictory characteristics of inheritance and type recursion on higher types. We identify the main difficulty in providing interpretations for explicit type disciplines featuring inher- itance, namely that programs can type-check in more than one way. Since interpretations follow the type-checking derivations, coherence theorems are required, (that is, one must prove that the meaning of a program does not depend on the way it was type-checked), and we do prove them for our seman- tic method. Interestingly, proving coherence in the presence of recursive types, variants, and abstract types forced us to reexamine fundamental equational properties that arise in proof theory (in the form of commutative reductions) and domain theory (in the form of strict us. non-strict functions).