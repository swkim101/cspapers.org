LSM-tree based key-value (KV) stores suffer from severe read ampliﬁcation because searching a key requires to check multiple SSTables. To reduce extra I/Os, Bloom ﬁlters are usually deployed in KV stores to improve read performance. However, Bloom ﬁlters suffer from false positive, and simply enlarging the size of Bloom ﬁlters introduces large memory overhead, so it still causes extra I/Os in memory-constrained systems. In this paper, we observe that access skewness is very common among SSTables or even small-sized segments within each SSTable. To leverage this skewness feature, we develop ElasticBF, a ﬁne-grained heterogeneous Bloom ﬁlter management scheme with dynamic adjustment according to data hotness. ElasticBF is orthogonal to the works optimizing the architecture of LSM-tree based KV stores, so it can be integrated to further speed up their read performance. We build ElasticBF atop of LevelDB, RocksDB, and PebblesDB, and our experimental results show that ElasticBF increases the read throughput of the above KV stores to 2.34 × , 2.35 × , and 2.58 × , respectively, while keeps almost the same write and range query performance.