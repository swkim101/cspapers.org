CLISP is an attempt to make LISP programs easier to read and write by extending the syntax of LISP to include infix operators, IF-THEN statements, FOR-DO-WHILE statements, and similar ALGOL-like constructs, without changing the structure or representation of the language. CLISP is implemented through LISP's error handling machinery, rather than by modifying the interpreter: when an expression is encountered whose evaluation causes an error, the expression is scanned for possible CLISP constructs, which are then converted to the equivalent LISP expressions. Thus, users can freely intermix LISP and CLISP without having to distinguish which is which. Emphasis in the design and development of CLISP has been on the system aspects of such a facility, with the goal in mind of producing a useful tool, not just another language. To this end, CLISP includes interactive error correction and many 'Do-what-I-Mean* features. The syntax of the programming language LISP»»»»» is very simple, in the sense that it can be described concisely, but not in the sense that LISP programs are easy to read or write! This simplicity of syntax is achieved by, and at the expense of, extensive use of explicit structuring, namely grouping through parenthesesization. For the benefit of readers unfamiliar with LISP syntax, the basic element of LISP programs is called a fgr.m. A form is either (1) atomic, or (2) a list, the latter being denoted by enclosing the elements of the list in matching parentheses. In the first case, the form is either a variable or a constant, and its value is computed accordingly. In the second case, the first element of the list is the name of a function, and the remaining elements are again forms whose values will be the arguments to that function. In Backus notation: Figure 1 Syntax of a LISP Form For example, assign x the value of the sum of A and the product of B and C is written in LISP as (SETQ X (PLUS A (TIMES B C))). The syntax for a conditional expression is correspondingly simple:* Figure 2 Syntax of a conditional Expression <conditional expression> ::x (COND <clause> ... <clause>) <clause> :;= (<form> <form>) Note that there are no IF's, THEN's, BEGIN's, END'S, or semicolons. LISP avoids the problem of parsing the conditional expression, i.e., delimiting the individual clauses, and delimiting the predicates and consequents within the clauses, by requiring that each clause be a separate element in the …