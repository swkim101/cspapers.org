In the early 1990s, hardware support for instruction-level parallelism was advancing at a rapid rate. For example, Digital introduced the 2-way superscalar Alpha 21064 in 1992 and Intel introduced its 2-way Pentium in 1993. By 1995, the Alpha architecture had already jumped to 4-way superscalar (the 21164). This appeared to be a trend that would continue. While that did not pan out the way many expected, what was abundantly clear even then was that our ability to build hardware for instruction level parallelism was quickly outpacing our ability to find it in software. Multithreading was a technology with a very long history, going back to the 1950s (and in fact, one of the authors did his PhD thesis on multithreading in 1979). It had appeared in real machines like the CDC 6600 PPU [6], the Denelcor HEP [4], etc. A multithreaded architecture keeps the state of multiple contexts in hardware at once, allowing it to introduce instructions into the pipeline from multiple threads without waiting for a slow software context switch. Several of the earliest machines were fine-grain multithreaded, able to introduce an instruction from a distinct thread each cycle. Others, like MITâ€™s TX-2 and Alewife [1] architectures, utilized a less aggressive model, coarse-grain multithreading, which can be thought of as a hardware accelerator for context switches (able to do them in a handful of cycles, fast enough to profitably switch on long memory latencies). Fine-grain multithreading, however, saw a revival in the 1990s Tera MTA architecture [2].