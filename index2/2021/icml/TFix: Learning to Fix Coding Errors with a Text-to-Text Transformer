The problem of ﬁxing errors in programs has at-tracted substantial interest over the years. The key challenge for building an effective code ﬁx-ing tool is to capture a wide range of errors and meanwhile maintain high accuracy. In this paper, we address this challenge and present a new learning-based system, called TFix. TFix works directly on program text and phrases the problem of code ﬁxing as a text-to-text task. In turn, this enables it to leverage a powerful Transformer based model pre-trained on natural language and ﬁne-tuned to generate code ﬁxes (via a large, high-quality dataset obtained from GitHub commits). TFix is not speciﬁc to a particular programming language or class of defects and, in fact, improved its precision by simultaneously ﬁne-tuning on 52 different error types reported by a popular static analyzer. Our evaluation on a massive dataset of JavaScript programs shows that TFix is practically effective: it is able to synthesize code that ﬁxes the error in ∼ 67 percent of cases and signiﬁcantly outperforms existing learning-based approaches.