We present an explicit and efficient algebraic construction of capacity-achieving list decodable codes with <italic>both</italic> constant alphabet and constant list sizes. More specifically, for any <inline-formula> <tex-math notation="LaTeX">$R \in (0,1)$ </tex-math></inline-formula> and <inline-formula> <tex-math notation="LaTeX">$\epsilon >0$ </tex-math></inline-formula>, we give an algebraic construction of an infinite family of error-correcting codes of rate <inline-formula> <tex-math notation="LaTeX">$R$ </tex-math></inline-formula>, over an alphabet of size <inline-formula> <tex-math notation="LaTeX">$(1/\epsilon)^{O(1/\epsilon ^{2})}$ </tex-math></inline-formula>, that can be list decoded from a <inline-formula> <tex-math notation="LaTeX">$(1-R-\epsilon)$ </tex-math></inline-formula>-fraction of errors with list size at most <inline-formula> <tex-math notation="LaTeX">$\exp (\mathrm {poly}(1/ \epsilon))$ </tex-math></inline-formula>. Moreover, the codes can be encoded in time <inline-formula> <tex-math notation="LaTeX">$\mathrm {poly}(1/ \epsilon,n)$ </tex-math></inline-formula>, the output list is contained in a linear subspace of dimension at most <inline-formula> <tex-math notation="LaTeX">$\mathrm {poly}(1/ \epsilon)$ </tex-math></inline-formula>, and a basis for this subspace can be found in time <inline-formula> <tex-math notation="LaTeX">$\mathrm {poly}(1 /\epsilon, n)$ </tex-math></inline-formula>. Thus, both encoding and list decoding can be performed in <italic>fully polynomial-time</italic> <inline-formula> <tex-math notation="LaTeX">$\mathrm {poly}(1/ \epsilon,n)$ </tex-math></inline-formula>, except for pruning the subspace and outputting the final list which takes time <inline-formula> <tex-math notation="LaTeX">$\exp (\mathrm {poly}(1/ \epsilon)) \cdot \mathrm {poly} (n)$ </tex-math></inline-formula>. In contrast, prior explicit and efficient constructions of capacity-achieving list decodable codes either required a much higher complexity in terms of <inline-formula> <tex-math notation="LaTeX">$1/ \epsilon $ </tex-math></inline-formula> (and were additionally much less structured), or had super-constant alphabet or list sizes. Our codes are quite natural and structured. Specifically, we use algebraic-geometric (AG) codes with evaluation points restricted to a subfield, and with the message space restricted to a (carefully chosen) linear subspace. Our main observation is that the output list of AG codes with subfield evaluation points is contained in an affine shift of the image of a <italic>block-triangular-Toeplitz</italic> (BTT) <italic>matrix</italic>, and that the list size can potentially be reduced to a constant by restricting the message space to a BTT <italic>evasive subspace</italic>, which is a large subspace that intersects the image of any BTT matrix in a constant number of points. We further show how to explicitly construct such BTT evasive subspaces, based on the explicit subspace designs of Guruswami and Kopparty (<italic>Combinatorica</italic>, 2016), and composition.