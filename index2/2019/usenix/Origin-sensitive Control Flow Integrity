CFI is an effective, generic defense against control-flow hijacking attacks,  especially for C/C++ programs. However, most previous CFI systems have  poor security as demonstrated by their large equivalence class (EC) sizes.  An EC is a set of targets that are indistinguishable from each other in the  CFI policy; i.e., an attacker can "bend"' the control flow within an EC without  being detected. As such, the large ECs denote the weakest link in a CFI  system and should be broken down in order to improve security. An approach to improve the security of CFI is to use contextual information,  such as the last branches taken, to refine the CFI policy,  the so-called  context-sensitive CFI. However, contexts based on the recent execution  history are often inadequate in breaking down large ECs due to the limited  number of incoming execution paths to an indirect control transfer instruction (ICT).In this paper, we propose a new context for CFI, origin sensitivity, that  can effectively break down large ECs and reduce the average and largest  EC size.  Origin-sensitive CFI (OS-CFI) takes the origin of the code pointer  called by an ICT as the context and constrains the targets of the ICT with  this context. It supports both C-style indirect calls and C++ virtual calls.  Additionally, we leverage common hardware features in the commodity  Intel processors (MPX and TSX) to improve both security and performance  of OS-CFI. Our evaluation shows that OS-CFI can substantially reduce  the largest and average EC sizes (by 98% in some cases) and has strong  performance -- 7.6% overhead on average for all C/C++ benchmarks  of SPEC CPU2006 and NGINX.