Program options are ubiquitous and serve as a fundamental mechanism for configuring and customizing software behaviors. Given their widespread use, testing program options becomes essential to ensure that the software behaves as expected across various configurations. Existing option-aware fuzzers either mutate options as if they were standard program inputs or employ NLP techniques to deduce relationships among options from the documentation. However, there has not been a whitebox approach that generates option combinations by capturing the inherent execution logic of the program. This paper presents Osmart, a whitebox approach designed to systematically extract program options and effective option combinations that precisely encapsulate the intrinsic execution logic of the program, incorporating both data dependency and control dependency.OSmart successfully inferred 12,560 option combinations from 56 programs. Additionally, OSmart uncovered that more than 67% of evaluated programs have undocumented options. By integrated with AFL++, OSmart discovered 40.3% more paths, which led to the detection of 51 new bugs and the assignment of 18 CVE IDs. Finally, we also compared OSmart with four state-of-the-art option-aware fuzzers on a public benchmark and our tool achieved higher line coverage in 66.7% (20/30) of the evaluated programs.