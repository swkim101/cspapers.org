Jump tables are a common source of indirect jumps in binary code. Resolving these indirect jumps is critical for constructing a complete control-flow graph, which is an essential first step for most applications involving binaries, including binary hardening and instrumentation, binary analysis and fuzzing for vulnerability discovery, malware analysis and reverse engineering. Existing techniques for jumptableanalysisgenerallyprioritizeperformanceoversoundness. Whilelackofsoundnessmaybeacceptableforapplicationssuchas decompilation,itcancauseunpredictableruntimefailuresinbinary instrumentationapplications.WethereforepresentSJA,anewjump table analysis technique in this paper that is sound and scalable. Our analysis uses a novel abstract domain to systematically track the “structure” of computed code pointers without relying on syntactic pattern-matching that is common in previous works. In addition, we present a bounds analysis that efficiently and losslessly reasons about equality and inequality relations that arise in the context of jumptables.Asaresult,oursystemreducesmissrateby35 × overthe nextbesttechnique.WhenevaluatedonerrorratebasedonF1-score, ourtechniqueoutperformsthebestprevioustechniquesby3 × .