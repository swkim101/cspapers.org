In streaming PCA, we see a stream of vectors <tex>$x_1, \ldots, x_n \in \mathbb{R}^d$</tex> and want to estimate the top eigenvector of their covariance matrix. This is easier if the spectral ratio <tex>$\boldsymbol{R}=\lambda_{1}/\lambda_{2}$</tex> is large. We ask: how large does <tex>$\boldsymbol{R}$</tex> need to be to solve streaming PCA in <tex>$\boldsymbol{\tilde{O}(d)}$</tex> space? Existing algorithms require <tex>$\boldsymbol{R=\tilde{\Omega}({d})}$</tex>. We show: • For all mergeable summaries, <tex>$\boldsymbol{R=\tilde{\Omega}(\sqrt{d})}$</tex> is necessary. • In the insertion-only model, a variant of Oja's algorithm gets <tex>$\boldsymbol{o(1)}$</tex> error for <tex>$\boldsymbol{R=O(\log n \log d)}$</tex> • No algorithm with <tex>$\boldsymbol{o(d^{2})}$</tex> space gets <tex>$\boldsymbol{o(1)}$</tex> error for <tex>$\boldsymbol{R=O(1)}$</tex>. Our analysis is the first application of Oja's algorithm to adversarial streams. It is also the first algorithm for adversarial streaming PCA that is designed for a spectral, rather than Frobenius, bound on the tail; and the bound it needs is exponentially better than is possible by adapting a Frobenius guarantee.