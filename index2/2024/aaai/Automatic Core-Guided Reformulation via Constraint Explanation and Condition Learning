SAT and propagation solvers often underperform for optimisation models whose objective sums many single-variable terms.
MaxSAT solvers avoid this by detecting and exploiting cores: subsets of these terms that cannot collectively take their lower bounds.
Previous work has shown manual analysis of cores can help define model reformulations likely to speed up solving for many model instances.
This paper presents a method to automate this process.
For each selected core the method identifies the instance constraints that caused it;
infers the model constraints and parameters that explain how these instance constraints were formed;
and learns the conditions that made those model constraint instances generate cores, while others did not.
It then uses this information to reformulate the objective.
The empirical evaluation shows this method can produce useful reformulations.
Importantly, the method can be useful in many other situations that require explaining a set of constraints.