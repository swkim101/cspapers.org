The current hardware landscape and application scale is driving performance engineers towards writing bespoke optimizations. Ver-ifying such optimizations, and generating minimal failing cases, is important for robustness in the face of changing program con-ditions, such as inputs and sizes. However, isolation of minimal test-cases from existing applications and generating new config-urations are often difficult due to side effects on the system state, mostly related to dataflow. This paper introduces FuzzyFlow: a fault localization and test case extraction framework designed to test program optimizations. We leverage dataflow program representations to capture a fully reproducible system state and area-of-effect for optimizations to enable fast checking for semantic equivalence. To reduce testing time, we design an algorithm for minimizing test inputs, trading off memory for recomputation. We demonstrate FuzzyFlow on example use cases in real-world applications where the approach provides up to 528 times faster optimization testing and debugging compared to traditional approaches.