As FPGAs become more widespread for improving computing performance within cloud infrastructure, researchers aim to equip them with virtualization features to enable resource sharing in both temporal and spatial domains, thereby improving hardware utilization. Existing multi-tenant solutions focus on task-parallel models, where tasks are assigned to distinct regions to process separate sets of data. However, this model introduces waiting times between dependent and pipelined tasks, leading to longer response times for applications. The root cause is the lack of support for dataflow execution -a key potential of FPGAs and a crucial optimization for applications. Dataflow allows direct data streaming between operators, forming a task-pipelined model that reduces application latency by overlapping task operations within its workflow. This paper presents Nyx, the first system to enable dataflow execution in a task-based virtualized and shared FPGA environment. Nyx enables efficient resource sharing by dividing the FPGA into distinct reconfigurable regions. At its core, Nyx employs virtual FIFOs, independent channels that allow seamless communication between pipelined tasks. Its approach ensures smooth task operation even when the predecessor or successor tasks are not simultaneously scheduled in the FPGA, making them agnostic to their dependencies, communication channels or data locations. An FPGA hypervisor is designed to handle all data dependencies and efficiently dispatch pipelined tasks across regions at high throughput. Nyx outperforms existing state of the art virtualized task-parallel approaches by 1.26x - 8.87x across a series of real-world benchmarks. Furthermore, it reduces response times by 2.8x - 3.28x during low-demand periods, decreasing also deadline violations by up to 76.5%. Under high-demand conditions, Nyx delivers 2x - 2.75x reduction, 34.5% fewer violations, and up to 1.9x reduced tail response time.