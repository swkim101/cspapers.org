PythonTA is a free, open-source Python library consisting of a suite of educational code analysis tools designed to be easily added to course workflows, from being run locally by students to being integrated with autograding platforms. This tutorial will cover the three components of PythonTA: (1) a static code analyser that detects common issues related to code correctness and quality; (2) a dynamic verifier of program logical specifications (e.g., function type signatures and pre-/postconditions); and (3) a generator of multiple forms of program execution artifacts, including control flow graphs and memory state visualizations. Together, these tools are designed to empower students to gain deep understanding of the design and execution of their code and to provide them with beginner-friendly feedback on their code. The modular and configurable design of PythonTA makes it easy for educators to customize how they wish to use these tools in their classroom, and its distribution as a pure Python library makes it easy for students to install these tools on their computers for on-demand access. Participants in this tutorial will explore PythonTA through a series of hands-on demos and activities (all run locally on their laptops). They will learn about best practices in using PythonTA gathered from educators who have used these tools in their classrooms over the past eight years. Participants will leave the tutorial with concrete ideas on how to incorporate PythonTA in their teaching and with adaptable educational materials for doing so. A laptop is required for full participation in the tutorial.